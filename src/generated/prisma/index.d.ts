
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Profile
 * 
 */
export type Profile = $Result.DefaultSelection<Prisma.$ProfilePayload>
/**
 * Model PrimaryProfile
 * 
 */
export type PrimaryProfile = $Result.DefaultSelection<Prisma.$PrimaryProfilePayload>
/**
 * Model Workspace
 * 
 */
export type Workspace = $Result.DefaultSelection<Prisma.$WorkspacePayload>
/**
 * Model WorkspaceMember
 * 
 */
export type WorkspaceMember = $Result.DefaultSelection<Prisma.$WorkspaceMemberPayload>
/**
 * Model WorkspaceOwner
 * 
 */
export type WorkspaceOwner = $Result.DefaultSelection<Prisma.$WorkspaceOwnerPayload>
/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model Employee
 * 
 */
export type Employee = $Result.DefaultSelection<Prisma.$EmployeePayload>
/**
 * Model DayLaborer
 * 
 */
export type DayLaborer = $Result.DefaultSelection<Prisma.$DayLaborerPayload>
/**
 * Model Owner
 * 
 */
export type Owner = $Result.DefaultSelection<Prisma.$OwnerPayload>
/**
 * Model ProjectOwner
 * 
 */
export type ProjectOwner = $Result.DefaultSelection<Prisma.$ProjectOwnerPayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model Site
 * 
 */
export type Site = $Result.DefaultSelection<Prisma.$SitePayload>
/**
 * Model SiteAttendance
 * 
 */
export type SiteAttendance = $Result.DefaultSelection<Prisma.$SiteAttendancePayload>
/**
 * Model TalentPool
 * 
 */
export type TalentPool = $Result.DefaultSelection<Prisma.$TalentPoolPayload>
/**
 * Model IndustrialAccidentInsurancePremiumRate
 * 
 */
export type IndustrialAccidentInsurancePremiumRate = $Result.DefaultSelection<Prisma.$IndustrialAccidentInsurancePremiumRatePayload>
/**
 * Model CompanyIndustryCode
 * 
 */
export type CompanyIndustryCode = $Result.DefaultSelection<Prisma.$CompanyIndustryCodePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const InvitationType: {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE'
};

export type InvitationType = (typeof InvitationType)[keyof typeof InvitationType]


export const InvitationStatus: {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED'
};

export type InvitationStatus = (typeof InvitationStatus)[keyof typeof InvitationStatus]

}

export type InvitationType = $Enums.InvitationType

export const InvitationType: typeof $Enums.InvitationType

export type InvitationStatus = $Enums.InvitationStatus

export const InvitationStatus: typeof $Enums.InvitationStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.primaryProfile`: Exposes CRUD operations for the **PrimaryProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PrimaryProfiles
    * const primaryProfiles = await prisma.primaryProfile.findMany()
    * ```
    */
  get primaryProfile(): Prisma.PrimaryProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workspace`: Exposes CRUD operations for the **Workspace** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Workspaces
    * const workspaces = await prisma.workspace.findMany()
    * ```
    */
  get workspace(): Prisma.WorkspaceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workspaceMember`: Exposes CRUD operations for the **WorkspaceMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkspaceMembers
    * const workspaceMembers = await prisma.workspaceMember.findMany()
    * ```
    */
  get workspaceMember(): Prisma.WorkspaceMemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workspaceOwner`: Exposes CRUD operations for the **WorkspaceOwner** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkspaceOwners
    * const workspaceOwners = await prisma.workspaceOwner.findMany()
    * ```
    */
  get workspaceOwner(): Prisma.WorkspaceOwnerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.employee`: Exposes CRUD operations for the **Employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): Prisma.EmployeeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dayLaborer`: Exposes CRUD operations for the **DayLaborer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DayLaborers
    * const dayLaborers = await prisma.dayLaborer.findMany()
    * ```
    */
  get dayLaborer(): Prisma.DayLaborerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.owner`: Exposes CRUD operations for the **Owner** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Owners
    * const owners = await prisma.owner.findMany()
    * ```
    */
  get owner(): Prisma.OwnerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.projectOwner`: Exposes CRUD operations for the **ProjectOwner** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectOwners
    * const projectOwners = await prisma.projectOwner.findMany()
    * ```
    */
  get projectOwner(): Prisma.ProjectOwnerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.site`: Exposes CRUD operations for the **Site** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sites
    * const sites = await prisma.site.findMany()
    * ```
    */
  get site(): Prisma.SiteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.siteAttendance`: Exposes CRUD operations for the **SiteAttendance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SiteAttendances
    * const siteAttendances = await prisma.siteAttendance.findMany()
    * ```
    */
  get siteAttendance(): Prisma.SiteAttendanceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.talentPool`: Exposes CRUD operations for the **TalentPool** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TalentPools
    * const talentPools = await prisma.talentPool.findMany()
    * ```
    */
  get talentPool(): Prisma.TalentPoolDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.industrialAccidentInsurancePremiumRate`: Exposes CRUD operations for the **IndustrialAccidentInsurancePremiumRate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IndustrialAccidentInsurancePremiumRates
    * const industrialAccidentInsurancePremiumRates = await prisma.industrialAccidentInsurancePremiumRate.findMany()
    * ```
    */
  get industrialAccidentInsurancePremiumRate(): Prisma.IndustrialAccidentInsurancePremiumRateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.companyIndustryCode`: Exposes CRUD operations for the **CompanyIndustryCode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompanyIndustryCodes
    * const companyIndustryCodes = await prisma.companyIndustryCode.findMany()
    * ```
    */
  get companyIndustryCode(): Prisma.CompanyIndustryCodeDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.13.0
   * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Profile: 'Profile',
    PrimaryProfile: 'PrimaryProfile',
    Workspace: 'Workspace',
    WorkspaceMember: 'WorkspaceMember',
    WorkspaceOwner: 'WorkspaceOwner',
    Company: 'Company',
    Employee: 'Employee',
    DayLaborer: 'DayLaborer',
    Owner: 'Owner',
    ProjectOwner: 'ProjectOwner',
    Project: 'Project',
    Site: 'Site',
    SiteAttendance: 'SiteAttendance',
    TalentPool: 'TalentPool',
    IndustrialAccidentInsurancePremiumRate: 'IndustrialAccidentInsurancePremiumRate',
    CompanyIndustryCode: 'CompanyIndustryCode'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "profile" | "primaryProfile" | "workspace" | "workspaceMember" | "workspaceOwner" | "company" | "employee" | "dayLaborer" | "owner" | "projectOwner" | "project" | "site" | "siteAttendance" | "talentPool" | "industrialAccidentInsurancePremiumRate" | "companyIndustryCode"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Profile: {
        payload: Prisma.$ProfilePayload<ExtArgs>
        fields: Prisma.ProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findFirst: {
            args: Prisma.ProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findMany: {
            args: Prisma.ProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          create: {
            args: Prisma.ProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          createMany: {
            args: Prisma.ProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          delete: {
            args: Prisma.ProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          update: {
            args: Prisma.ProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          deleteMany: {
            args: Prisma.ProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          upsert: {
            args: Prisma.ProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          aggregate: {
            args: Prisma.ProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfile>
          }
          groupBy: {
            args: Prisma.ProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ProfileCountAggregateOutputType> | number
          }
        }
      }
      PrimaryProfile: {
        payload: Prisma.$PrimaryProfilePayload<ExtArgs>
        fields: Prisma.PrimaryProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PrimaryProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrimaryProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PrimaryProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrimaryProfilePayload>
          }
          findFirst: {
            args: Prisma.PrimaryProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrimaryProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PrimaryProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrimaryProfilePayload>
          }
          findMany: {
            args: Prisma.PrimaryProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrimaryProfilePayload>[]
          }
          create: {
            args: Prisma.PrimaryProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrimaryProfilePayload>
          }
          createMany: {
            args: Prisma.PrimaryProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PrimaryProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrimaryProfilePayload>[]
          }
          delete: {
            args: Prisma.PrimaryProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrimaryProfilePayload>
          }
          update: {
            args: Prisma.PrimaryProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrimaryProfilePayload>
          }
          deleteMany: {
            args: Prisma.PrimaryProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PrimaryProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PrimaryProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrimaryProfilePayload>[]
          }
          upsert: {
            args: Prisma.PrimaryProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrimaryProfilePayload>
          }
          aggregate: {
            args: Prisma.PrimaryProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePrimaryProfile>
          }
          groupBy: {
            args: Prisma.PrimaryProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<PrimaryProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.PrimaryProfileCountArgs<ExtArgs>
            result: $Utils.Optional<PrimaryProfileCountAggregateOutputType> | number
          }
        }
      }
      Workspace: {
        payload: Prisma.$WorkspacePayload<ExtArgs>
        fields: Prisma.WorkspaceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkspaceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkspaceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>
          }
          findFirst: {
            args: Prisma.WorkspaceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkspaceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>
          }
          findMany: {
            args: Prisma.WorkspaceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>[]
          }
          create: {
            args: Prisma.WorkspaceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>
          }
          createMany: {
            args: Prisma.WorkspaceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkspaceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>[]
          }
          delete: {
            args: Prisma.WorkspaceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>
          }
          update: {
            args: Prisma.WorkspaceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>
          }
          deleteMany: {
            args: Prisma.WorkspaceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkspaceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkspaceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>[]
          }
          upsert: {
            args: Prisma.WorkspaceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>
          }
          aggregate: {
            args: Prisma.WorkspaceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkspace>
          }
          groupBy: {
            args: Prisma.WorkspaceGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkspaceGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkspaceCountArgs<ExtArgs>
            result: $Utils.Optional<WorkspaceCountAggregateOutputType> | number
          }
        }
      }
      WorkspaceMember: {
        payload: Prisma.$WorkspaceMemberPayload<ExtArgs>
        fields: Prisma.WorkspaceMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkspaceMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkspaceMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>
          }
          findFirst: {
            args: Prisma.WorkspaceMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkspaceMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>
          }
          findMany: {
            args: Prisma.WorkspaceMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>[]
          }
          create: {
            args: Prisma.WorkspaceMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>
          }
          createMany: {
            args: Prisma.WorkspaceMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkspaceMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>[]
          }
          delete: {
            args: Prisma.WorkspaceMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>
          }
          update: {
            args: Prisma.WorkspaceMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>
          }
          deleteMany: {
            args: Prisma.WorkspaceMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkspaceMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkspaceMemberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>[]
          }
          upsert: {
            args: Prisma.WorkspaceMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>
          }
          aggregate: {
            args: Prisma.WorkspaceMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkspaceMember>
          }
          groupBy: {
            args: Prisma.WorkspaceMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkspaceMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkspaceMemberCountArgs<ExtArgs>
            result: $Utils.Optional<WorkspaceMemberCountAggregateOutputType> | number
          }
        }
      }
      WorkspaceOwner: {
        payload: Prisma.$WorkspaceOwnerPayload<ExtArgs>
        fields: Prisma.WorkspaceOwnerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkspaceOwnerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceOwnerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkspaceOwnerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceOwnerPayload>
          }
          findFirst: {
            args: Prisma.WorkspaceOwnerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceOwnerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkspaceOwnerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceOwnerPayload>
          }
          findMany: {
            args: Prisma.WorkspaceOwnerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceOwnerPayload>[]
          }
          create: {
            args: Prisma.WorkspaceOwnerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceOwnerPayload>
          }
          createMany: {
            args: Prisma.WorkspaceOwnerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkspaceOwnerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceOwnerPayload>[]
          }
          delete: {
            args: Prisma.WorkspaceOwnerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceOwnerPayload>
          }
          update: {
            args: Prisma.WorkspaceOwnerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceOwnerPayload>
          }
          deleteMany: {
            args: Prisma.WorkspaceOwnerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkspaceOwnerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkspaceOwnerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceOwnerPayload>[]
          }
          upsert: {
            args: Prisma.WorkspaceOwnerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceOwnerPayload>
          }
          aggregate: {
            args: Prisma.WorkspaceOwnerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkspaceOwner>
          }
          groupBy: {
            args: Prisma.WorkspaceOwnerGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkspaceOwnerGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkspaceOwnerCountArgs<ExtArgs>
            result: $Utils.Optional<WorkspaceOwnerCountAggregateOutputType> | number
          }
        }
      }
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompanyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      Employee: {
        payload: Prisma.$EmployeePayload<ExtArgs>
        fields: Prisma.EmployeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findFirst: {
            args: Prisma.EmployeeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findMany: {
            args: Prisma.EmployeeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          create: {
            args: Prisma.EmployeeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          createMany: {
            args: Prisma.EmployeeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmployeeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          delete: {
            args: Prisma.EmployeeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          update: {
            args: Prisma.EmployeeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          deleteMany: {
            args: Prisma.EmployeeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmployeeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          upsert: {
            args: Prisma.EmployeeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          aggregate: {
            args: Prisma.EmployeeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployee>
          }
          groupBy: {
            args: Prisma.EmployeeGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeCountAggregateOutputType> | number
          }
        }
      }
      DayLaborer: {
        payload: Prisma.$DayLaborerPayload<ExtArgs>
        fields: Prisma.DayLaborerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DayLaborerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DayLaborerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DayLaborerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DayLaborerPayload>
          }
          findFirst: {
            args: Prisma.DayLaborerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DayLaborerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DayLaborerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DayLaborerPayload>
          }
          findMany: {
            args: Prisma.DayLaborerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DayLaborerPayload>[]
          }
          create: {
            args: Prisma.DayLaborerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DayLaborerPayload>
          }
          createMany: {
            args: Prisma.DayLaborerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DayLaborerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DayLaborerPayload>[]
          }
          delete: {
            args: Prisma.DayLaborerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DayLaborerPayload>
          }
          update: {
            args: Prisma.DayLaborerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DayLaborerPayload>
          }
          deleteMany: {
            args: Prisma.DayLaborerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DayLaborerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DayLaborerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DayLaborerPayload>[]
          }
          upsert: {
            args: Prisma.DayLaborerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DayLaborerPayload>
          }
          aggregate: {
            args: Prisma.DayLaborerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDayLaborer>
          }
          groupBy: {
            args: Prisma.DayLaborerGroupByArgs<ExtArgs>
            result: $Utils.Optional<DayLaborerGroupByOutputType>[]
          }
          count: {
            args: Prisma.DayLaborerCountArgs<ExtArgs>
            result: $Utils.Optional<DayLaborerCountAggregateOutputType> | number
          }
        }
      }
      Owner: {
        payload: Prisma.$OwnerPayload<ExtArgs>
        fields: Prisma.OwnerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OwnerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OwnerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerPayload>
          }
          findFirst: {
            args: Prisma.OwnerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OwnerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerPayload>
          }
          findMany: {
            args: Prisma.OwnerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerPayload>[]
          }
          create: {
            args: Prisma.OwnerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerPayload>
          }
          createMany: {
            args: Prisma.OwnerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OwnerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerPayload>[]
          }
          delete: {
            args: Prisma.OwnerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerPayload>
          }
          update: {
            args: Prisma.OwnerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerPayload>
          }
          deleteMany: {
            args: Prisma.OwnerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OwnerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OwnerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerPayload>[]
          }
          upsert: {
            args: Prisma.OwnerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerPayload>
          }
          aggregate: {
            args: Prisma.OwnerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOwner>
          }
          groupBy: {
            args: Prisma.OwnerGroupByArgs<ExtArgs>
            result: $Utils.Optional<OwnerGroupByOutputType>[]
          }
          count: {
            args: Prisma.OwnerCountArgs<ExtArgs>
            result: $Utils.Optional<OwnerCountAggregateOutputType> | number
          }
        }
      }
      ProjectOwner: {
        payload: Prisma.$ProjectOwnerPayload<ExtArgs>
        fields: Prisma.ProjectOwnerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectOwnerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectOwnerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectOwnerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectOwnerPayload>
          }
          findFirst: {
            args: Prisma.ProjectOwnerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectOwnerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectOwnerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectOwnerPayload>
          }
          findMany: {
            args: Prisma.ProjectOwnerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectOwnerPayload>[]
          }
          create: {
            args: Prisma.ProjectOwnerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectOwnerPayload>
          }
          createMany: {
            args: Prisma.ProjectOwnerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectOwnerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectOwnerPayload>[]
          }
          delete: {
            args: Prisma.ProjectOwnerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectOwnerPayload>
          }
          update: {
            args: Prisma.ProjectOwnerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectOwnerPayload>
          }
          deleteMany: {
            args: Prisma.ProjectOwnerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectOwnerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProjectOwnerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectOwnerPayload>[]
          }
          upsert: {
            args: Prisma.ProjectOwnerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectOwnerPayload>
          }
          aggregate: {
            args: Prisma.ProjectOwnerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjectOwner>
          }
          groupBy: {
            args: Prisma.ProjectOwnerGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectOwnerGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectOwnerCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectOwnerCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProjectUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      Site: {
        payload: Prisma.$SitePayload<ExtArgs>
        fields: Prisma.SiteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SiteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SiteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          findFirst: {
            args: Prisma.SiteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SiteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          findMany: {
            args: Prisma.SiteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>[]
          }
          create: {
            args: Prisma.SiteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          createMany: {
            args: Prisma.SiteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SiteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>[]
          }
          delete: {
            args: Prisma.SiteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          update: {
            args: Prisma.SiteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          deleteMany: {
            args: Prisma.SiteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SiteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SiteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>[]
          }
          upsert: {
            args: Prisma.SiteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          aggregate: {
            args: Prisma.SiteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSite>
          }
          groupBy: {
            args: Prisma.SiteGroupByArgs<ExtArgs>
            result: $Utils.Optional<SiteGroupByOutputType>[]
          }
          count: {
            args: Prisma.SiteCountArgs<ExtArgs>
            result: $Utils.Optional<SiteCountAggregateOutputType> | number
          }
        }
      }
      SiteAttendance: {
        payload: Prisma.$SiteAttendancePayload<ExtArgs>
        fields: Prisma.SiteAttendanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SiteAttendanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteAttendancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SiteAttendanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteAttendancePayload>
          }
          findFirst: {
            args: Prisma.SiteAttendanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteAttendancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SiteAttendanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteAttendancePayload>
          }
          findMany: {
            args: Prisma.SiteAttendanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteAttendancePayload>[]
          }
          create: {
            args: Prisma.SiteAttendanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteAttendancePayload>
          }
          createMany: {
            args: Prisma.SiteAttendanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SiteAttendanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteAttendancePayload>[]
          }
          delete: {
            args: Prisma.SiteAttendanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteAttendancePayload>
          }
          update: {
            args: Prisma.SiteAttendanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteAttendancePayload>
          }
          deleteMany: {
            args: Prisma.SiteAttendanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SiteAttendanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SiteAttendanceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteAttendancePayload>[]
          }
          upsert: {
            args: Prisma.SiteAttendanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteAttendancePayload>
          }
          aggregate: {
            args: Prisma.SiteAttendanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSiteAttendance>
          }
          groupBy: {
            args: Prisma.SiteAttendanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<SiteAttendanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.SiteAttendanceCountArgs<ExtArgs>
            result: $Utils.Optional<SiteAttendanceCountAggregateOutputType> | number
          }
        }
      }
      TalentPool: {
        payload: Prisma.$TalentPoolPayload<ExtArgs>
        fields: Prisma.TalentPoolFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TalentPoolFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TalentPoolPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TalentPoolFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TalentPoolPayload>
          }
          findFirst: {
            args: Prisma.TalentPoolFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TalentPoolPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TalentPoolFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TalentPoolPayload>
          }
          findMany: {
            args: Prisma.TalentPoolFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TalentPoolPayload>[]
          }
          create: {
            args: Prisma.TalentPoolCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TalentPoolPayload>
          }
          createMany: {
            args: Prisma.TalentPoolCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TalentPoolCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TalentPoolPayload>[]
          }
          delete: {
            args: Prisma.TalentPoolDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TalentPoolPayload>
          }
          update: {
            args: Prisma.TalentPoolUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TalentPoolPayload>
          }
          deleteMany: {
            args: Prisma.TalentPoolDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TalentPoolUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TalentPoolUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TalentPoolPayload>[]
          }
          upsert: {
            args: Prisma.TalentPoolUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TalentPoolPayload>
          }
          aggregate: {
            args: Prisma.TalentPoolAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTalentPool>
          }
          groupBy: {
            args: Prisma.TalentPoolGroupByArgs<ExtArgs>
            result: $Utils.Optional<TalentPoolGroupByOutputType>[]
          }
          count: {
            args: Prisma.TalentPoolCountArgs<ExtArgs>
            result: $Utils.Optional<TalentPoolCountAggregateOutputType> | number
          }
        }
      }
      IndustrialAccidentInsurancePremiumRate: {
        payload: Prisma.$IndustrialAccidentInsurancePremiumRatePayload<ExtArgs>
        fields: Prisma.IndustrialAccidentInsurancePremiumRateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IndustrialAccidentInsurancePremiumRateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndustrialAccidentInsurancePremiumRatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IndustrialAccidentInsurancePremiumRateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndustrialAccidentInsurancePremiumRatePayload>
          }
          findFirst: {
            args: Prisma.IndustrialAccidentInsurancePremiumRateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndustrialAccidentInsurancePremiumRatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IndustrialAccidentInsurancePremiumRateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndustrialAccidentInsurancePremiumRatePayload>
          }
          findMany: {
            args: Prisma.IndustrialAccidentInsurancePremiumRateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndustrialAccidentInsurancePremiumRatePayload>[]
          }
          create: {
            args: Prisma.IndustrialAccidentInsurancePremiumRateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndustrialAccidentInsurancePremiumRatePayload>
          }
          createMany: {
            args: Prisma.IndustrialAccidentInsurancePremiumRateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IndustrialAccidentInsurancePremiumRateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndustrialAccidentInsurancePremiumRatePayload>[]
          }
          delete: {
            args: Prisma.IndustrialAccidentInsurancePremiumRateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndustrialAccidentInsurancePremiumRatePayload>
          }
          update: {
            args: Prisma.IndustrialAccidentInsurancePremiumRateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndustrialAccidentInsurancePremiumRatePayload>
          }
          deleteMany: {
            args: Prisma.IndustrialAccidentInsurancePremiumRateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IndustrialAccidentInsurancePremiumRateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.IndustrialAccidentInsurancePremiumRateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndustrialAccidentInsurancePremiumRatePayload>[]
          }
          upsert: {
            args: Prisma.IndustrialAccidentInsurancePremiumRateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndustrialAccidentInsurancePremiumRatePayload>
          }
          aggregate: {
            args: Prisma.IndustrialAccidentInsurancePremiumRateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIndustrialAccidentInsurancePremiumRate>
          }
          groupBy: {
            args: Prisma.IndustrialAccidentInsurancePremiumRateGroupByArgs<ExtArgs>
            result: $Utils.Optional<IndustrialAccidentInsurancePremiumRateGroupByOutputType>[]
          }
          count: {
            args: Prisma.IndustrialAccidentInsurancePremiumRateCountArgs<ExtArgs>
            result: $Utils.Optional<IndustrialAccidentInsurancePremiumRateCountAggregateOutputType> | number
          }
        }
      }
      CompanyIndustryCode: {
        payload: Prisma.$CompanyIndustryCodePayload<ExtArgs>
        fields: Prisma.CompanyIndustryCodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyIndustryCodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyIndustryCodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyIndustryCodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyIndustryCodePayload>
          }
          findFirst: {
            args: Prisma.CompanyIndustryCodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyIndustryCodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyIndustryCodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyIndustryCodePayload>
          }
          findMany: {
            args: Prisma.CompanyIndustryCodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyIndustryCodePayload>[]
          }
          create: {
            args: Prisma.CompanyIndustryCodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyIndustryCodePayload>
          }
          createMany: {
            args: Prisma.CompanyIndustryCodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyIndustryCodeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyIndustryCodePayload>[]
          }
          delete: {
            args: Prisma.CompanyIndustryCodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyIndustryCodePayload>
          }
          update: {
            args: Prisma.CompanyIndustryCodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyIndustryCodePayload>
          }
          deleteMany: {
            args: Prisma.CompanyIndustryCodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyIndustryCodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompanyIndustryCodeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyIndustryCodePayload>[]
          }
          upsert: {
            args: Prisma.CompanyIndustryCodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyIndustryCodePayload>
          }
          aggregate: {
            args: Prisma.CompanyIndustryCodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompanyIndustryCode>
          }
          groupBy: {
            args: Prisma.CompanyIndustryCodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyIndustryCodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyIndustryCodeCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyIndustryCodeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    profile?: ProfileOmit
    primaryProfile?: PrimaryProfileOmit
    workspace?: WorkspaceOmit
    workspaceMember?: WorkspaceMemberOmit
    workspaceOwner?: WorkspaceOwnerOmit
    company?: CompanyOmit
    employee?: EmployeeOmit
    dayLaborer?: DayLaborerOmit
    owner?: OwnerOmit
    projectOwner?: ProjectOwnerOmit
    project?: ProjectOmit
    site?: SiteOmit
    siteAttendance?: SiteAttendanceOmit
    talentPool?: TalentPoolOmit
    industrialAccidentInsurancePremiumRate?: IndustrialAccidentInsurancePremiumRateOmit
    companyIndustryCode?: CompanyIndustryCodeOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    profiles: number
    workspaceMembers: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profiles?: boolean | UserCountOutputTypeCountProfilesArgs
    workspaceMembers?: boolean | UserCountOutputTypeCountWorkspaceMembersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkspaceMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceMemberWhereInput
  }


  /**
   * Count Type ProfileCountOutputType
   */

  export type ProfileCountOutputType = {
    talentPools: number
    workspaceMembers: number
  }

  export type ProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    talentPools?: boolean | ProfileCountOutputTypeCountTalentPoolsArgs
    workspaceMembers?: boolean | ProfileCountOutputTypeCountWorkspaceMembersArgs
  }

  // Custom InputTypes
  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileCountOutputType
     */
    select?: ProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountTalentPoolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TalentPoolWhereInput
  }

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountWorkspaceMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceMemberWhereInput
  }


  /**
   * Count Type WorkspaceCountOutputType
   */

  export type WorkspaceCountOutputType = {
    companies: number
    sites: number
    talentPools: number
    workspaceMembers: number
    workspaceOwners: number
    projects: number
  }

  export type WorkspaceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies?: boolean | WorkspaceCountOutputTypeCountCompaniesArgs
    sites?: boolean | WorkspaceCountOutputTypeCountSitesArgs
    talentPools?: boolean | WorkspaceCountOutputTypeCountTalentPoolsArgs
    workspaceMembers?: boolean | WorkspaceCountOutputTypeCountWorkspaceMembersArgs
    workspaceOwners?: boolean | WorkspaceCountOutputTypeCountWorkspaceOwnersArgs
    projects?: boolean | WorkspaceCountOutputTypeCountProjectsArgs
  }

  // Custom InputTypes
  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceCountOutputType
     */
    select?: WorkspaceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeCountCompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
  }

  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeCountSitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SiteWhereInput
  }

  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeCountTalentPoolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TalentPoolWhereInput
  }

  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeCountWorkspaceMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceMemberWhereInput
  }

  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeCountWorkspaceOwnersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceOwnerWhereInput
  }

  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }


  /**
   * Count Type WorkspaceMemberCountOutputType
   */

  export type WorkspaceMemberCountOutputType = {
    owners: number
    companiesCreated: number
    invitedMembers: number
  }

  export type WorkspaceMemberCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owners?: boolean | WorkspaceMemberCountOutputTypeCountOwnersArgs
    companiesCreated?: boolean | WorkspaceMemberCountOutputTypeCountCompaniesCreatedArgs
    invitedMembers?: boolean | WorkspaceMemberCountOutputTypeCountInvitedMembersArgs
  }

  // Custom InputTypes
  /**
   * WorkspaceMemberCountOutputType without action
   */
  export type WorkspaceMemberCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMemberCountOutputType
     */
    select?: WorkspaceMemberCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkspaceMemberCountOutputType without action
   */
  export type WorkspaceMemberCountOutputTypeCountOwnersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceOwnerWhereInput
  }

  /**
   * WorkspaceMemberCountOutputType without action
   */
  export type WorkspaceMemberCountOutputTypeCountCompaniesCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
  }

  /**
   * WorkspaceMemberCountOutputType without action
   */
  export type WorkspaceMemberCountOutputTypeCountInvitedMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceMemberWhereInput
  }


  /**
   * Count Type CompanyCountOutputType
   */

  export type CompanyCountOutputType = {
    companyIndustryCodes: number
    dayLaborers: number
    employees: number
    owners: number
    sites: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companyIndustryCodes?: boolean | CompanyCountOutputTypeCountCompanyIndustryCodesArgs
    dayLaborers?: boolean | CompanyCountOutputTypeCountDayLaborersArgs
    employees?: boolean | CompanyCountOutputTypeCountEmployeesArgs
    owners?: boolean | CompanyCountOutputTypeCountOwnersArgs
    sites?: boolean | CompanyCountOutputTypeCountSitesArgs
  }

  // Custom InputTypes
  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountCompanyIndustryCodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyIndustryCodeWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountDayLaborersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DayLaborerWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountEmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountOwnersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OwnerWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountSitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SiteWhereInput
  }


  /**
   * Count Type EmployeeCountOutputType
   */

  export type EmployeeCountOutputType = {
    owners: number
  }

  export type EmployeeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owners?: boolean | EmployeeCountOutputTypeCountOwnersArgs
  }

  // Custom InputTypes
  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCountOutputType
     */
    select?: EmployeeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountOwnersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OwnerWhereInput
  }


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    projectOwners: number
    sites: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projectOwners?: boolean | ProjectCountOutputTypeCountProjectOwnersArgs
    sites?: boolean | ProjectCountOutputTypeCountSitesArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountProjectOwnersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectOwnerWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountSitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SiteWhereInput
  }


  /**
   * Count Type SiteCountOutputType
   */

  export type SiteCountOutputType = {
    siteAttendances: number
  }

  export type SiteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    siteAttendances?: boolean | SiteCountOutputTypeCountSiteAttendancesArgs
  }

  // Custom InputTypes
  /**
   * SiteCountOutputType without action
   */
  export type SiteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteCountOutputType
     */
    select?: SiteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SiteCountOutputType without action
   */
  export type SiteCountOutputTypeCountSiteAttendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SiteAttendanceWhereInput
  }


  /**
   * Count Type TalentPoolCountOutputType
   */

  export type TalentPoolCountOutputType = {
    employees: number
    dayLaborers: number
    siteAttendances: number
  }

  export type TalentPoolCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employees?: boolean | TalentPoolCountOutputTypeCountEmployeesArgs
    dayLaborers?: boolean | TalentPoolCountOutputTypeCountDayLaborersArgs
    siteAttendances?: boolean | TalentPoolCountOutputTypeCountSiteAttendancesArgs
  }

  // Custom InputTypes
  /**
   * TalentPoolCountOutputType without action
   */
  export type TalentPoolCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TalentPoolCountOutputType
     */
    select?: TalentPoolCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TalentPoolCountOutputType without action
   */
  export type TalentPoolCountOutputTypeCountEmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
  }

  /**
   * TalentPoolCountOutputType without action
   */
  export type TalentPoolCountOutputTypeCountDayLaborersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DayLaborerWhereInput
  }

  /**
   * TalentPoolCountOutputType without action
   */
  export type TalentPoolCountOutputTypeCountSiteAttendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SiteAttendanceWhereInput
  }


  /**
   * Count Type IndustrialAccidentInsurancePremiumRateCountOutputType
   */

  export type IndustrialAccidentInsurancePremiumRateCountOutputType = {
    companyIndustryCodes: number
  }

  export type IndustrialAccidentInsurancePremiumRateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companyIndustryCodes?: boolean | IndustrialAccidentInsurancePremiumRateCountOutputTypeCountCompanyIndustryCodesArgs
  }

  // Custom InputTypes
  /**
   * IndustrialAccidentInsurancePremiumRateCountOutputType without action
   */
  export type IndustrialAccidentInsurancePremiumRateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndustrialAccidentInsurancePremiumRateCountOutputType
     */
    select?: IndustrialAccidentInsurancePremiumRateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * IndustrialAccidentInsurancePremiumRateCountOutputType without action
   */
  export type IndustrialAccidentInsurancePremiumRateCountOutputTypeCountCompanyIndustryCodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyIndustryCodeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    primaryProfile?: boolean | User$primaryProfileArgs<ExtArgs>
    profiles?: boolean | User$profilesArgs<ExtArgs>
    workspaceMembers?: boolean | User$workspaceMembersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    primaryProfile?: boolean | User$primaryProfileArgs<ExtArgs>
    profiles?: boolean | User$profilesArgs<ExtArgs>
    workspaceMembers?: boolean | User$workspaceMembersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      primaryProfile: Prisma.$PrimaryProfilePayload<ExtArgs> | null
      profiles: Prisma.$ProfilePayload<ExtArgs>[]
      workspaceMembers: Prisma.$WorkspaceMemberPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    primaryProfile<T extends User$primaryProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$primaryProfileArgs<ExtArgs>>): Prisma__PrimaryProfileClient<$Result.GetResult<Prisma.$PrimaryProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    profiles<T extends User$profilesArgs<ExtArgs> = {}>(args?: Subset<T, User$profilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workspaceMembers<T extends User$workspaceMembersArgs<ExtArgs> = {}>(args?: Subset<T, User$workspaceMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.primaryProfile
   */
  export type User$primaryProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrimaryProfile
     */
    select?: PrimaryProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrimaryProfile
     */
    omit?: PrimaryProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrimaryProfileInclude<ExtArgs> | null
    where?: PrimaryProfileWhereInput
  }

  /**
   * User.profiles
   */
  export type User$profilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    cursor?: ProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * User.workspaceMembers
   */
  export type User$workspaceMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    where?: WorkspaceMemberWhereInput
    orderBy?: WorkspaceMemberOrderByWithRelationInput | WorkspaceMemberOrderByWithRelationInput[]
    cursor?: WorkspaceMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkspaceMemberScalarFieldEnum | WorkspaceMemberScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Profile
   */

  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ProfileSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ProfileMinAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    birthday: Date | null
    address: string | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    birthday: Date | null
    address: string | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    birthday: number
    address: number
    phone: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProfileAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ProfileSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ProfileMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    birthday?: true
    address?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    birthday?: true
    address?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    birthday?: true
    address?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithAggregationInput | ProfileOrderByWithAggregationInput[]
    by: ProfileScalarFieldEnum[] | ProfileScalarFieldEnum
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _avg?: ProfileAvgAggregateInputType
    _sum?: ProfileSumAggregateInputType
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }

  export type ProfileGroupByOutputType = {
    id: number
    userId: number | null
    name: string
    birthday: Date | null
    address: string | null
    phone: string | null
    createdAt: Date
    updatedAt: Date
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    birthday?: boolean
    address?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Profile$userArgs<ExtArgs>
    talentPools?: boolean | Profile$talentPoolsArgs<ExtArgs>
    primaryProfile?: boolean | Profile$primaryProfileArgs<ExtArgs>
    workspaceMembers?: boolean | Profile$workspaceMembersArgs<ExtArgs>
    _count?: boolean | ProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    birthday?: boolean
    address?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Profile$userArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    birthday?: boolean
    address?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Profile$userArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    birthday?: boolean
    address?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "name" | "birthday" | "address" | "phone" | "createdAt" | "updatedAt", ExtArgs["result"]["profile"]>
  export type ProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Profile$userArgs<ExtArgs>
    talentPools?: boolean | Profile$talentPoolsArgs<ExtArgs>
    primaryProfile?: boolean | Profile$primaryProfileArgs<ExtArgs>
    workspaceMembers?: boolean | Profile$workspaceMembersArgs<ExtArgs>
    _count?: boolean | ProfileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Profile$userArgs<ExtArgs>
  }
  export type ProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Profile$userArgs<ExtArgs>
  }

  export type $ProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      talentPools: Prisma.$TalentPoolPayload<ExtArgs>[]
      primaryProfile: Prisma.$PrimaryProfilePayload<ExtArgs> | null
      workspaceMembers: Prisma.$WorkspaceMemberPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number | null
      name: string
      birthday: Date | null
      address: string | null
      phone: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["profile"]>
    composites: {}
  }

  type ProfileGetPayload<S extends boolean | null | undefined | ProfileDefaultArgs> = $Result.GetResult<Prisma.$ProfilePayload, S>

  type ProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profile'], meta: { name: 'Profile' } }
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfileFindUniqueArgs>(args: SelectSubset<T, ProfileFindUniqueArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Profile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfileFindFirstArgs>(args?: SelectSubset<T, ProfileFindFirstArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfileFindManyArgs>(args?: SelectSubset<T, ProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
     */
    create<T extends ProfileCreateArgs>(args: SelectSubset<T, ProfileCreateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Profiles.
     * @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfileCreateManyArgs>(args?: SelectSubset<T, ProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Profiles and returns the data saved in the database.
     * @param {ProfileCreateManyAndReturnArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
     */
    delete<T extends ProfileDeleteArgs>(args: SelectSubset<T, ProfileDeleteArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfileUpdateArgs>(args: SelectSubset<T, ProfileUpdateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfileDeleteManyArgs>(args?: SelectSubset<T, ProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfileUpdateManyArgs>(args: SelectSubset<T, ProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles and returns the data updated in the database.
     * @param {ProfileUpdateManyAndReturnArgs} args - Arguments to update many Profiles.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
     */
    upsert<T extends ProfileUpsertArgs>(args: SelectSubset<T, ProfileUpsertArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profile model
   */
  readonly fields: ProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Profile$userArgs<ExtArgs> = {}>(args?: Subset<T, Profile$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    talentPools<T extends Profile$talentPoolsArgs<ExtArgs> = {}>(args?: Subset<T, Profile$talentPoolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TalentPoolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    primaryProfile<T extends Profile$primaryProfileArgs<ExtArgs> = {}>(args?: Subset<T, Profile$primaryProfileArgs<ExtArgs>>): Prisma__PrimaryProfileClient<$Result.GetResult<Prisma.$PrimaryProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    workspaceMembers<T extends Profile$workspaceMembersArgs<ExtArgs> = {}>(args?: Subset<T, Profile$workspaceMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profile model
   */
  interface ProfileFieldRefs {
    readonly id: FieldRef<"Profile", 'Int'>
    readonly userId: FieldRef<"Profile", 'Int'>
    readonly name: FieldRef<"Profile", 'String'>
    readonly birthday: FieldRef<"Profile", 'DateTime'>
    readonly address: FieldRef<"Profile", 'String'>
    readonly phone: FieldRef<"Profile", 'String'>
    readonly createdAt: FieldRef<"Profile", 'DateTime'>
    readonly updatedAt: FieldRef<"Profile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile create
   */
  export type ProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }

  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
  }

  /**
   * Profile createManyAndReturn
   */
  export type ProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile update
   */
  export type ProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
  }

  /**
   * Profile updateManyAndReturn
   */
  export type ProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }

  /**
   * Profile delete
   */
  export type ProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to delete.
     */
    limit?: number
  }

  /**
   * Profile.user
   */
  export type Profile$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Profile.talentPools
   */
  export type Profile$talentPoolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TalentPool
     */
    select?: TalentPoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TalentPool
     */
    omit?: TalentPoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TalentPoolInclude<ExtArgs> | null
    where?: TalentPoolWhereInput
    orderBy?: TalentPoolOrderByWithRelationInput | TalentPoolOrderByWithRelationInput[]
    cursor?: TalentPoolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TalentPoolScalarFieldEnum | TalentPoolScalarFieldEnum[]
  }

  /**
   * Profile.primaryProfile
   */
  export type Profile$primaryProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrimaryProfile
     */
    select?: PrimaryProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrimaryProfile
     */
    omit?: PrimaryProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrimaryProfileInclude<ExtArgs> | null
    where?: PrimaryProfileWhereInput
  }

  /**
   * Profile.workspaceMembers
   */
  export type Profile$workspaceMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    where?: WorkspaceMemberWhereInput
    orderBy?: WorkspaceMemberOrderByWithRelationInput | WorkspaceMemberOrderByWithRelationInput[]
    cursor?: WorkspaceMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkspaceMemberScalarFieldEnum | WorkspaceMemberScalarFieldEnum[]
  }

  /**
   * Profile without action
   */
  export type ProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
  }


  /**
   * Model PrimaryProfile
   */

  export type AggregatePrimaryProfile = {
    _count: PrimaryProfileCountAggregateOutputType | null
    _avg: PrimaryProfileAvgAggregateOutputType | null
    _sum: PrimaryProfileSumAggregateOutputType | null
    _min: PrimaryProfileMinAggregateOutputType | null
    _max: PrimaryProfileMaxAggregateOutputType | null
  }

  export type PrimaryProfileAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    profileId: number | null
  }

  export type PrimaryProfileSumAggregateOutputType = {
    id: number | null
    userId: number | null
    profileId: number | null
  }

  export type PrimaryProfileMinAggregateOutputType = {
    id: number | null
    userId: number | null
    profileId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PrimaryProfileMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    profileId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PrimaryProfileCountAggregateOutputType = {
    id: number
    userId: number
    profileId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PrimaryProfileAvgAggregateInputType = {
    id?: true
    userId?: true
    profileId?: true
  }

  export type PrimaryProfileSumAggregateInputType = {
    id?: true
    userId?: true
    profileId?: true
  }

  export type PrimaryProfileMinAggregateInputType = {
    id?: true
    userId?: true
    profileId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PrimaryProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    profileId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PrimaryProfileCountAggregateInputType = {
    id?: true
    userId?: true
    profileId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PrimaryProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrimaryProfile to aggregate.
     */
    where?: PrimaryProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrimaryProfiles to fetch.
     */
    orderBy?: PrimaryProfileOrderByWithRelationInput | PrimaryProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PrimaryProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrimaryProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrimaryProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PrimaryProfiles
    **/
    _count?: true | PrimaryProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PrimaryProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PrimaryProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrimaryProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrimaryProfileMaxAggregateInputType
  }

  export type GetPrimaryProfileAggregateType<T extends PrimaryProfileAggregateArgs> = {
        [P in keyof T & keyof AggregatePrimaryProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrimaryProfile[P]>
      : GetScalarType<T[P], AggregatePrimaryProfile[P]>
  }




  export type PrimaryProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrimaryProfileWhereInput
    orderBy?: PrimaryProfileOrderByWithAggregationInput | PrimaryProfileOrderByWithAggregationInput[]
    by: PrimaryProfileScalarFieldEnum[] | PrimaryProfileScalarFieldEnum
    having?: PrimaryProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrimaryProfileCountAggregateInputType | true
    _avg?: PrimaryProfileAvgAggregateInputType
    _sum?: PrimaryProfileSumAggregateInputType
    _min?: PrimaryProfileMinAggregateInputType
    _max?: PrimaryProfileMaxAggregateInputType
  }

  export type PrimaryProfileGroupByOutputType = {
    id: number
    userId: number
    profileId: number
    createdAt: Date
    updatedAt: Date
    _count: PrimaryProfileCountAggregateOutputType | null
    _avg: PrimaryProfileAvgAggregateOutputType | null
    _sum: PrimaryProfileSumAggregateOutputType | null
    _min: PrimaryProfileMinAggregateOutputType | null
    _max: PrimaryProfileMaxAggregateOutputType | null
  }

  type GetPrimaryProfileGroupByPayload<T extends PrimaryProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PrimaryProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrimaryProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrimaryProfileGroupByOutputType[P]>
            : GetScalarType<T[P], PrimaryProfileGroupByOutputType[P]>
        }
      >
    >


  export type PrimaryProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    profileId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["primaryProfile"]>

  export type PrimaryProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    profileId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["primaryProfile"]>

  export type PrimaryProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    profileId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["primaryProfile"]>

  export type PrimaryProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    profileId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PrimaryProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "profileId" | "createdAt" | "updatedAt", ExtArgs["result"]["primaryProfile"]>
  export type PrimaryProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }
  export type PrimaryProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }
  export type PrimaryProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }

  export type $PrimaryProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PrimaryProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      profile: Prisma.$ProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      profileId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["primaryProfile"]>
    composites: {}
  }

  type PrimaryProfileGetPayload<S extends boolean | null | undefined | PrimaryProfileDefaultArgs> = $Result.GetResult<Prisma.$PrimaryProfilePayload, S>

  type PrimaryProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PrimaryProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PrimaryProfileCountAggregateInputType | true
    }

  export interface PrimaryProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PrimaryProfile'], meta: { name: 'PrimaryProfile' } }
    /**
     * Find zero or one PrimaryProfile that matches the filter.
     * @param {PrimaryProfileFindUniqueArgs} args - Arguments to find a PrimaryProfile
     * @example
     * // Get one PrimaryProfile
     * const primaryProfile = await prisma.primaryProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PrimaryProfileFindUniqueArgs>(args: SelectSubset<T, PrimaryProfileFindUniqueArgs<ExtArgs>>): Prisma__PrimaryProfileClient<$Result.GetResult<Prisma.$PrimaryProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PrimaryProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PrimaryProfileFindUniqueOrThrowArgs} args - Arguments to find a PrimaryProfile
     * @example
     * // Get one PrimaryProfile
     * const primaryProfile = await prisma.primaryProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PrimaryProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, PrimaryProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PrimaryProfileClient<$Result.GetResult<Prisma.$PrimaryProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PrimaryProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrimaryProfileFindFirstArgs} args - Arguments to find a PrimaryProfile
     * @example
     * // Get one PrimaryProfile
     * const primaryProfile = await prisma.primaryProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PrimaryProfileFindFirstArgs>(args?: SelectSubset<T, PrimaryProfileFindFirstArgs<ExtArgs>>): Prisma__PrimaryProfileClient<$Result.GetResult<Prisma.$PrimaryProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PrimaryProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrimaryProfileFindFirstOrThrowArgs} args - Arguments to find a PrimaryProfile
     * @example
     * // Get one PrimaryProfile
     * const primaryProfile = await prisma.primaryProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PrimaryProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, PrimaryProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__PrimaryProfileClient<$Result.GetResult<Prisma.$PrimaryProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PrimaryProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrimaryProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PrimaryProfiles
     * const primaryProfiles = await prisma.primaryProfile.findMany()
     * 
     * // Get first 10 PrimaryProfiles
     * const primaryProfiles = await prisma.primaryProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const primaryProfileWithIdOnly = await prisma.primaryProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PrimaryProfileFindManyArgs>(args?: SelectSubset<T, PrimaryProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrimaryProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PrimaryProfile.
     * @param {PrimaryProfileCreateArgs} args - Arguments to create a PrimaryProfile.
     * @example
     * // Create one PrimaryProfile
     * const PrimaryProfile = await prisma.primaryProfile.create({
     *   data: {
     *     // ... data to create a PrimaryProfile
     *   }
     * })
     * 
     */
    create<T extends PrimaryProfileCreateArgs>(args: SelectSubset<T, PrimaryProfileCreateArgs<ExtArgs>>): Prisma__PrimaryProfileClient<$Result.GetResult<Prisma.$PrimaryProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PrimaryProfiles.
     * @param {PrimaryProfileCreateManyArgs} args - Arguments to create many PrimaryProfiles.
     * @example
     * // Create many PrimaryProfiles
     * const primaryProfile = await prisma.primaryProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PrimaryProfileCreateManyArgs>(args?: SelectSubset<T, PrimaryProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PrimaryProfiles and returns the data saved in the database.
     * @param {PrimaryProfileCreateManyAndReturnArgs} args - Arguments to create many PrimaryProfiles.
     * @example
     * // Create many PrimaryProfiles
     * const primaryProfile = await prisma.primaryProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PrimaryProfiles and only return the `id`
     * const primaryProfileWithIdOnly = await prisma.primaryProfile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PrimaryProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, PrimaryProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrimaryProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PrimaryProfile.
     * @param {PrimaryProfileDeleteArgs} args - Arguments to delete one PrimaryProfile.
     * @example
     * // Delete one PrimaryProfile
     * const PrimaryProfile = await prisma.primaryProfile.delete({
     *   where: {
     *     // ... filter to delete one PrimaryProfile
     *   }
     * })
     * 
     */
    delete<T extends PrimaryProfileDeleteArgs>(args: SelectSubset<T, PrimaryProfileDeleteArgs<ExtArgs>>): Prisma__PrimaryProfileClient<$Result.GetResult<Prisma.$PrimaryProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PrimaryProfile.
     * @param {PrimaryProfileUpdateArgs} args - Arguments to update one PrimaryProfile.
     * @example
     * // Update one PrimaryProfile
     * const primaryProfile = await prisma.primaryProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PrimaryProfileUpdateArgs>(args: SelectSubset<T, PrimaryProfileUpdateArgs<ExtArgs>>): Prisma__PrimaryProfileClient<$Result.GetResult<Prisma.$PrimaryProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PrimaryProfiles.
     * @param {PrimaryProfileDeleteManyArgs} args - Arguments to filter PrimaryProfiles to delete.
     * @example
     * // Delete a few PrimaryProfiles
     * const { count } = await prisma.primaryProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PrimaryProfileDeleteManyArgs>(args?: SelectSubset<T, PrimaryProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PrimaryProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrimaryProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PrimaryProfiles
     * const primaryProfile = await prisma.primaryProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PrimaryProfileUpdateManyArgs>(args: SelectSubset<T, PrimaryProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PrimaryProfiles and returns the data updated in the database.
     * @param {PrimaryProfileUpdateManyAndReturnArgs} args - Arguments to update many PrimaryProfiles.
     * @example
     * // Update many PrimaryProfiles
     * const primaryProfile = await prisma.primaryProfile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PrimaryProfiles and only return the `id`
     * const primaryProfileWithIdOnly = await prisma.primaryProfile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PrimaryProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, PrimaryProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrimaryProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PrimaryProfile.
     * @param {PrimaryProfileUpsertArgs} args - Arguments to update or create a PrimaryProfile.
     * @example
     * // Update or create a PrimaryProfile
     * const primaryProfile = await prisma.primaryProfile.upsert({
     *   create: {
     *     // ... data to create a PrimaryProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PrimaryProfile we want to update
     *   }
     * })
     */
    upsert<T extends PrimaryProfileUpsertArgs>(args: SelectSubset<T, PrimaryProfileUpsertArgs<ExtArgs>>): Prisma__PrimaryProfileClient<$Result.GetResult<Prisma.$PrimaryProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PrimaryProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrimaryProfileCountArgs} args - Arguments to filter PrimaryProfiles to count.
     * @example
     * // Count the number of PrimaryProfiles
     * const count = await prisma.primaryProfile.count({
     *   where: {
     *     // ... the filter for the PrimaryProfiles we want to count
     *   }
     * })
    **/
    count<T extends PrimaryProfileCountArgs>(
      args?: Subset<T, PrimaryProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrimaryProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PrimaryProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrimaryProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrimaryProfileAggregateArgs>(args: Subset<T, PrimaryProfileAggregateArgs>): Prisma.PrismaPromise<GetPrimaryProfileAggregateType<T>>

    /**
     * Group by PrimaryProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrimaryProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrimaryProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrimaryProfileGroupByArgs['orderBy'] }
        : { orderBy?: PrimaryProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrimaryProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrimaryProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PrimaryProfile model
   */
  readonly fields: PrimaryProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PrimaryProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PrimaryProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    profile<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PrimaryProfile model
   */
  interface PrimaryProfileFieldRefs {
    readonly id: FieldRef<"PrimaryProfile", 'Int'>
    readonly userId: FieldRef<"PrimaryProfile", 'Int'>
    readonly profileId: FieldRef<"PrimaryProfile", 'Int'>
    readonly createdAt: FieldRef<"PrimaryProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"PrimaryProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PrimaryProfile findUnique
   */
  export type PrimaryProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrimaryProfile
     */
    select?: PrimaryProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrimaryProfile
     */
    omit?: PrimaryProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrimaryProfileInclude<ExtArgs> | null
    /**
     * Filter, which PrimaryProfile to fetch.
     */
    where: PrimaryProfileWhereUniqueInput
  }

  /**
   * PrimaryProfile findUniqueOrThrow
   */
  export type PrimaryProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrimaryProfile
     */
    select?: PrimaryProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrimaryProfile
     */
    omit?: PrimaryProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrimaryProfileInclude<ExtArgs> | null
    /**
     * Filter, which PrimaryProfile to fetch.
     */
    where: PrimaryProfileWhereUniqueInput
  }

  /**
   * PrimaryProfile findFirst
   */
  export type PrimaryProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrimaryProfile
     */
    select?: PrimaryProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrimaryProfile
     */
    omit?: PrimaryProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrimaryProfileInclude<ExtArgs> | null
    /**
     * Filter, which PrimaryProfile to fetch.
     */
    where?: PrimaryProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrimaryProfiles to fetch.
     */
    orderBy?: PrimaryProfileOrderByWithRelationInput | PrimaryProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrimaryProfiles.
     */
    cursor?: PrimaryProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrimaryProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrimaryProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrimaryProfiles.
     */
    distinct?: PrimaryProfileScalarFieldEnum | PrimaryProfileScalarFieldEnum[]
  }

  /**
   * PrimaryProfile findFirstOrThrow
   */
  export type PrimaryProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrimaryProfile
     */
    select?: PrimaryProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrimaryProfile
     */
    omit?: PrimaryProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrimaryProfileInclude<ExtArgs> | null
    /**
     * Filter, which PrimaryProfile to fetch.
     */
    where?: PrimaryProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrimaryProfiles to fetch.
     */
    orderBy?: PrimaryProfileOrderByWithRelationInput | PrimaryProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrimaryProfiles.
     */
    cursor?: PrimaryProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrimaryProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrimaryProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrimaryProfiles.
     */
    distinct?: PrimaryProfileScalarFieldEnum | PrimaryProfileScalarFieldEnum[]
  }

  /**
   * PrimaryProfile findMany
   */
  export type PrimaryProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrimaryProfile
     */
    select?: PrimaryProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrimaryProfile
     */
    omit?: PrimaryProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrimaryProfileInclude<ExtArgs> | null
    /**
     * Filter, which PrimaryProfiles to fetch.
     */
    where?: PrimaryProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrimaryProfiles to fetch.
     */
    orderBy?: PrimaryProfileOrderByWithRelationInput | PrimaryProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PrimaryProfiles.
     */
    cursor?: PrimaryProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrimaryProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrimaryProfiles.
     */
    skip?: number
    distinct?: PrimaryProfileScalarFieldEnum | PrimaryProfileScalarFieldEnum[]
  }

  /**
   * PrimaryProfile create
   */
  export type PrimaryProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrimaryProfile
     */
    select?: PrimaryProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrimaryProfile
     */
    omit?: PrimaryProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrimaryProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a PrimaryProfile.
     */
    data: XOR<PrimaryProfileCreateInput, PrimaryProfileUncheckedCreateInput>
  }

  /**
   * PrimaryProfile createMany
   */
  export type PrimaryProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PrimaryProfiles.
     */
    data: PrimaryProfileCreateManyInput | PrimaryProfileCreateManyInput[]
  }

  /**
   * PrimaryProfile createManyAndReturn
   */
  export type PrimaryProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrimaryProfile
     */
    select?: PrimaryProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PrimaryProfile
     */
    omit?: PrimaryProfileOmit<ExtArgs> | null
    /**
     * The data used to create many PrimaryProfiles.
     */
    data: PrimaryProfileCreateManyInput | PrimaryProfileCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrimaryProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PrimaryProfile update
   */
  export type PrimaryProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrimaryProfile
     */
    select?: PrimaryProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrimaryProfile
     */
    omit?: PrimaryProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrimaryProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a PrimaryProfile.
     */
    data: XOR<PrimaryProfileUpdateInput, PrimaryProfileUncheckedUpdateInput>
    /**
     * Choose, which PrimaryProfile to update.
     */
    where: PrimaryProfileWhereUniqueInput
  }

  /**
   * PrimaryProfile updateMany
   */
  export type PrimaryProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PrimaryProfiles.
     */
    data: XOR<PrimaryProfileUpdateManyMutationInput, PrimaryProfileUncheckedUpdateManyInput>
    /**
     * Filter which PrimaryProfiles to update
     */
    where?: PrimaryProfileWhereInput
    /**
     * Limit how many PrimaryProfiles to update.
     */
    limit?: number
  }

  /**
   * PrimaryProfile updateManyAndReturn
   */
  export type PrimaryProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrimaryProfile
     */
    select?: PrimaryProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PrimaryProfile
     */
    omit?: PrimaryProfileOmit<ExtArgs> | null
    /**
     * The data used to update PrimaryProfiles.
     */
    data: XOR<PrimaryProfileUpdateManyMutationInput, PrimaryProfileUncheckedUpdateManyInput>
    /**
     * Filter which PrimaryProfiles to update
     */
    where?: PrimaryProfileWhereInput
    /**
     * Limit how many PrimaryProfiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrimaryProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PrimaryProfile upsert
   */
  export type PrimaryProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrimaryProfile
     */
    select?: PrimaryProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrimaryProfile
     */
    omit?: PrimaryProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrimaryProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the PrimaryProfile to update in case it exists.
     */
    where: PrimaryProfileWhereUniqueInput
    /**
     * In case the PrimaryProfile found by the `where` argument doesn't exist, create a new PrimaryProfile with this data.
     */
    create: XOR<PrimaryProfileCreateInput, PrimaryProfileUncheckedCreateInput>
    /**
     * In case the PrimaryProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PrimaryProfileUpdateInput, PrimaryProfileUncheckedUpdateInput>
  }

  /**
   * PrimaryProfile delete
   */
  export type PrimaryProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrimaryProfile
     */
    select?: PrimaryProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrimaryProfile
     */
    omit?: PrimaryProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrimaryProfileInclude<ExtArgs> | null
    /**
     * Filter which PrimaryProfile to delete.
     */
    where: PrimaryProfileWhereUniqueInput
  }

  /**
   * PrimaryProfile deleteMany
   */
  export type PrimaryProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrimaryProfiles to delete
     */
    where?: PrimaryProfileWhereInput
    /**
     * Limit how many PrimaryProfiles to delete.
     */
    limit?: number
  }

  /**
   * PrimaryProfile without action
   */
  export type PrimaryProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrimaryProfile
     */
    select?: PrimaryProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrimaryProfile
     */
    omit?: PrimaryProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrimaryProfileInclude<ExtArgs> | null
  }


  /**
   * Model Workspace
   */

  export type AggregateWorkspace = {
    _count: WorkspaceCountAggregateOutputType | null
    _avg: WorkspaceAvgAggregateOutputType | null
    _sum: WorkspaceSumAggregateOutputType | null
    _min: WorkspaceMinAggregateOutputType | null
    _max: WorkspaceMaxAggregateOutputType | null
  }

  export type WorkspaceAvgAggregateOutputType = {
    id: number | null
  }

  export type WorkspaceSumAggregateOutputType = {
    id: number | null
  }

  export type WorkspaceMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkspaceMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkspaceCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkspaceAvgAggregateInputType = {
    id?: true
  }

  export type WorkspaceSumAggregateInputType = {
    id?: true
  }

  export type WorkspaceMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkspaceMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkspaceCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkspaceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workspace to aggregate.
     */
    where?: WorkspaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workspaces to fetch.
     */
    orderBy?: WorkspaceOrderByWithRelationInput | WorkspaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkspaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workspaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workspaces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Workspaces
    **/
    _count?: true | WorkspaceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkspaceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkspaceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkspaceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkspaceMaxAggregateInputType
  }

  export type GetWorkspaceAggregateType<T extends WorkspaceAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkspace]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkspace[P]>
      : GetScalarType<T[P], AggregateWorkspace[P]>
  }




  export type WorkspaceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceWhereInput
    orderBy?: WorkspaceOrderByWithAggregationInput | WorkspaceOrderByWithAggregationInput[]
    by: WorkspaceScalarFieldEnum[] | WorkspaceScalarFieldEnum
    having?: WorkspaceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkspaceCountAggregateInputType | true
    _avg?: WorkspaceAvgAggregateInputType
    _sum?: WorkspaceSumAggregateInputType
    _min?: WorkspaceMinAggregateInputType
    _max?: WorkspaceMaxAggregateInputType
  }

  export type WorkspaceGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: WorkspaceCountAggregateOutputType | null
    _avg: WorkspaceAvgAggregateOutputType | null
    _sum: WorkspaceSumAggregateOutputType | null
    _min: WorkspaceMinAggregateOutputType | null
    _max: WorkspaceMaxAggregateOutputType | null
  }

  type GetWorkspaceGroupByPayload<T extends WorkspaceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkspaceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkspaceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkspaceGroupByOutputType[P]>
            : GetScalarType<T[P], WorkspaceGroupByOutputType[P]>
        }
      >
    >


  export type WorkspaceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companies?: boolean | Workspace$companiesArgs<ExtArgs>
    sites?: boolean | Workspace$sitesArgs<ExtArgs>
    talentPools?: boolean | Workspace$talentPoolsArgs<ExtArgs>
    workspaceMembers?: boolean | Workspace$workspaceMembersArgs<ExtArgs>
    workspaceOwners?: boolean | Workspace$workspaceOwnersArgs<ExtArgs>
    projects?: boolean | Workspace$projectsArgs<ExtArgs>
    _count?: boolean | WorkspaceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspace"]>

  export type WorkspaceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["workspace"]>

  export type WorkspaceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["workspace"]>

  export type WorkspaceSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkspaceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["workspace"]>
  export type WorkspaceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies?: boolean | Workspace$companiesArgs<ExtArgs>
    sites?: boolean | Workspace$sitesArgs<ExtArgs>
    talentPools?: boolean | Workspace$talentPoolsArgs<ExtArgs>
    workspaceMembers?: boolean | Workspace$workspaceMembersArgs<ExtArgs>
    workspaceOwners?: boolean | Workspace$workspaceOwnersArgs<ExtArgs>
    projects?: boolean | Workspace$projectsArgs<ExtArgs>
    _count?: boolean | WorkspaceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkspaceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type WorkspaceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $WorkspacePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Workspace"
    objects: {
      companies: Prisma.$CompanyPayload<ExtArgs>[]
      sites: Prisma.$SitePayload<ExtArgs>[]
      talentPools: Prisma.$TalentPoolPayload<ExtArgs>[]
      workspaceMembers: Prisma.$WorkspaceMemberPayload<ExtArgs>[]
      workspaceOwners: Prisma.$WorkspaceOwnerPayload<ExtArgs>[]
      projects: Prisma.$ProjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workspace"]>
    composites: {}
  }

  type WorkspaceGetPayload<S extends boolean | null | undefined | WorkspaceDefaultArgs> = $Result.GetResult<Prisma.$WorkspacePayload, S>

  type WorkspaceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkspaceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkspaceCountAggregateInputType | true
    }

  export interface WorkspaceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Workspace'], meta: { name: 'Workspace' } }
    /**
     * Find zero or one Workspace that matches the filter.
     * @param {WorkspaceFindUniqueArgs} args - Arguments to find a Workspace
     * @example
     * // Get one Workspace
     * const workspace = await prisma.workspace.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkspaceFindUniqueArgs>(args: SelectSubset<T, WorkspaceFindUniqueArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Workspace that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkspaceFindUniqueOrThrowArgs} args - Arguments to find a Workspace
     * @example
     * // Get one Workspace
     * const workspace = await prisma.workspace.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkspaceFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkspaceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Workspace that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceFindFirstArgs} args - Arguments to find a Workspace
     * @example
     * // Get one Workspace
     * const workspace = await prisma.workspace.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkspaceFindFirstArgs>(args?: SelectSubset<T, WorkspaceFindFirstArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Workspace that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceFindFirstOrThrowArgs} args - Arguments to find a Workspace
     * @example
     * // Get one Workspace
     * const workspace = await prisma.workspace.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkspaceFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkspaceFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Workspaces that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workspaces
     * const workspaces = await prisma.workspace.findMany()
     * 
     * // Get first 10 Workspaces
     * const workspaces = await prisma.workspace.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workspaceWithIdOnly = await prisma.workspace.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkspaceFindManyArgs>(args?: SelectSubset<T, WorkspaceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Workspace.
     * @param {WorkspaceCreateArgs} args - Arguments to create a Workspace.
     * @example
     * // Create one Workspace
     * const Workspace = await prisma.workspace.create({
     *   data: {
     *     // ... data to create a Workspace
     *   }
     * })
     * 
     */
    create<T extends WorkspaceCreateArgs>(args: SelectSubset<T, WorkspaceCreateArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Workspaces.
     * @param {WorkspaceCreateManyArgs} args - Arguments to create many Workspaces.
     * @example
     * // Create many Workspaces
     * const workspace = await prisma.workspace.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkspaceCreateManyArgs>(args?: SelectSubset<T, WorkspaceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Workspaces and returns the data saved in the database.
     * @param {WorkspaceCreateManyAndReturnArgs} args - Arguments to create many Workspaces.
     * @example
     * // Create many Workspaces
     * const workspace = await prisma.workspace.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Workspaces and only return the `id`
     * const workspaceWithIdOnly = await prisma.workspace.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkspaceCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkspaceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Workspace.
     * @param {WorkspaceDeleteArgs} args - Arguments to delete one Workspace.
     * @example
     * // Delete one Workspace
     * const Workspace = await prisma.workspace.delete({
     *   where: {
     *     // ... filter to delete one Workspace
     *   }
     * })
     * 
     */
    delete<T extends WorkspaceDeleteArgs>(args: SelectSubset<T, WorkspaceDeleteArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Workspace.
     * @param {WorkspaceUpdateArgs} args - Arguments to update one Workspace.
     * @example
     * // Update one Workspace
     * const workspace = await prisma.workspace.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkspaceUpdateArgs>(args: SelectSubset<T, WorkspaceUpdateArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Workspaces.
     * @param {WorkspaceDeleteManyArgs} args - Arguments to filter Workspaces to delete.
     * @example
     * // Delete a few Workspaces
     * const { count } = await prisma.workspace.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkspaceDeleteManyArgs>(args?: SelectSubset<T, WorkspaceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workspaces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workspaces
     * const workspace = await prisma.workspace.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkspaceUpdateManyArgs>(args: SelectSubset<T, WorkspaceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workspaces and returns the data updated in the database.
     * @param {WorkspaceUpdateManyAndReturnArgs} args - Arguments to update many Workspaces.
     * @example
     * // Update many Workspaces
     * const workspace = await prisma.workspace.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Workspaces and only return the `id`
     * const workspaceWithIdOnly = await prisma.workspace.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkspaceUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkspaceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Workspace.
     * @param {WorkspaceUpsertArgs} args - Arguments to update or create a Workspace.
     * @example
     * // Update or create a Workspace
     * const workspace = await prisma.workspace.upsert({
     *   create: {
     *     // ... data to create a Workspace
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Workspace we want to update
     *   }
     * })
     */
    upsert<T extends WorkspaceUpsertArgs>(args: SelectSubset<T, WorkspaceUpsertArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Workspaces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceCountArgs} args - Arguments to filter Workspaces to count.
     * @example
     * // Count the number of Workspaces
     * const count = await prisma.workspace.count({
     *   where: {
     *     // ... the filter for the Workspaces we want to count
     *   }
     * })
    **/
    count<T extends WorkspaceCountArgs>(
      args?: Subset<T, WorkspaceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkspaceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Workspace.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkspaceAggregateArgs>(args: Subset<T, WorkspaceAggregateArgs>): Prisma.PrismaPromise<GetWorkspaceAggregateType<T>>

    /**
     * Group by Workspace.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkspaceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkspaceGroupByArgs['orderBy'] }
        : { orderBy?: WorkspaceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkspaceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkspaceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Workspace model
   */
  readonly fields: WorkspaceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Workspace.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkspaceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    companies<T extends Workspace$companiesArgs<ExtArgs> = {}>(args?: Subset<T, Workspace$companiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sites<T extends Workspace$sitesArgs<ExtArgs> = {}>(args?: Subset<T, Workspace$sitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    talentPools<T extends Workspace$talentPoolsArgs<ExtArgs> = {}>(args?: Subset<T, Workspace$talentPoolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TalentPoolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workspaceMembers<T extends Workspace$workspaceMembersArgs<ExtArgs> = {}>(args?: Subset<T, Workspace$workspaceMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workspaceOwners<T extends Workspace$workspaceOwnersArgs<ExtArgs> = {}>(args?: Subset<T, Workspace$workspaceOwnersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceOwnerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    projects<T extends Workspace$projectsArgs<ExtArgs> = {}>(args?: Subset<T, Workspace$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Workspace model
   */
  interface WorkspaceFieldRefs {
    readonly id: FieldRef<"Workspace", 'Int'>
    readonly name: FieldRef<"Workspace", 'String'>
    readonly createdAt: FieldRef<"Workspace", 'DateTime'>
    readonly updatedAt: FieldRef<"Workspace", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Workspace findUnique
   */
  export type WorkspaceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * Filter, which Workspace to fetch.
     */
    where: WorkspaceWhereUniqueInput
  }

  /**
   * Workspace findUniqueOrThrow
   */
  export type WorkspaceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * Filter, which Workspace to fetch.
     */
    where: WorkspaceWhereUniqueInput
  }

  /**
   * Workspace findFirst
   */
  export type WorkspaceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * Filter, which Workspace to fetch.
     */
    where?: WorkspaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workspaces to fetch.
     */
    orderBy?: WorkspaceOrderByWithRelationInput | WorkspaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workspaces.
     */
    cursor?: WorkspaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workspaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workspaces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workspaces.
     */
    distinct?: WorkspaceScalarFieldEnum | WorkspaceScalarFieldEnum[]
  }

  /**
   * Workspace findFirstOrThrow
   */
  export type WorkspaceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * Filter, which Workspace to fetch.
     */
    where?: WorkspaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workspaces to fetch.
     */
    orderBy?: WorkspaceOrderByWithRelationInput | WorkspaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workspaces.
     */
    cursor?: WorkspaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workspaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workspaces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workspaces.
     */
    distinct?: WorkspaceScalarFieldEnum | WorkspaceScalarFieldEnum[]
  }

  /**
   * Workspace findMany
   */
  export type WorkspaceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * Filter, which Workspaces to fetch.
     */
    where?: WorkspaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workspaces to fetch.
     */
    orderBy?: WorkspaceOrderByWithRelationInput | WorkspaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Workspaces.
     */
    cursor?: WorkspaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workspaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workspaces.
     */
    skip?: number
    distinct?: WorkspaceScalarFieldEnum | WorkspaceScalarFieldEnum[]
  }

  /**
   * Workspace create
   */
  export type WorkspaceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * The data needed to create a Workspace.
     */
    data: XOR<WorkspaceCreateInput, WorkspaceUncheckedCreateInput>
  }

  /**
   * Workspace createMany
   */
  export type WorkspaceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Workspaces.
     */
    data: WorkspaceCreateManyInput | WorkspaceCreateManyInput[]
  }

  /**
   * Workspace createManyAndReturn
   */
  export type WorkspaceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * The data used to create many Workspaces.
     */
    data: WorkspaceCreateManyInput | WorkspaceCreateManyInput[]
  }

  /**
   * Workspace update
   */
  export type WorkspaceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * The data needed to update a Workspace.
     */
    data: XOR<WorkspaceUpdateInput, WorkspaceUncheckedUpdateInput>
    /**
     * Choose, which Workspace to update.
     */
    where: WorkspaceWhereUniqueInput
  }

  /**
   * Workspace updateMany
   */
  export type WorkspaceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Workspaces.
     */
    data: XOR<WorkspaceUpdateManyMutationInput, WorkspaceUncheckedUpdateManyInput>
    /**
     * Filter which Workspaces to update
     */
    where?: WorkspaceWhereInput
    /**
     * Limit how many Workspaces to update.
     */
    limit?: number
  }

  /**
   * Workspace updateManyAndReturn
   */
  export type WorkspaceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * The data used to update Workspaces.
     */
    data: XOR<WorkspaceUpdateManyMutationInput, WorkspaceUncheckedUpdateManyInput>
    /**
     * Filter which Workspaces to update
     */
    where?: WorkspaceWhereInput
    /**
     * Limit how many Workspaces to update.
     */
    limit?: number
  }

  /**
   * Workspace upsert
   */
  export type WorkspaceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * The filter to search for the Workspace to update in case it exists.
     */
    where: WorkspaceWhereUniqueInput
    /**
     * In case the Workspace found by the `where` argument doesn't exist, create a new Workspace with this data.
     */
    create: XOR<WorkspaceCreateInput, WorkspaceUncheckedCreateInput>
    /**
     * In case the Workspace was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkspaceUpdateInput, WorkspaceUncheckedUpdateInput>
  }

  /**
   * Workspace delete
   */
  export type WorkspaceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * Filter which Workspace to delete.
     */
    where: WorkspaceWhereUniqueInput
  }

  /**
   * Workspace deleteMany
   */
  export type WorkspaceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workspaces to delete
     */
    where?: WorkspaceWhereInput
    /**
     * Limit how many Workspaces to delete.
     */
    limit?: number
  }

  /**
   * Workspace.companies
   */
  export type Workspace$companiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    cursor?: CompanyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Workspace.sites
   */
  export type Workspace$sitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    where?: SiteWhereInput
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    cursor?: SiteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SiteScalarFieldEnum | SiteScalarFieldEnum[]
  }

  /**
   * Workspace.talentPools
   */
  export type Workspace$talentPoolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TalentPool
     */
    select?: TalentPoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TalentPool
     */
    omit?: TalentPoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TalentPoolInclude<ExtArgs> | null
    where?: TalentPoolWhereInput
    orderBy?: TalentPoolOrderByWithRelationInput | TalentPoolOrderByWithRelationInput[]
    cursor?: TalentPoolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TalentPoolScalarFieldEnum | TalentPoolScalarFieldEnum[]
  }

  /**
   * Workspace.workspaceMembers
   */
  export type Workspace$workspaceMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    where?: WorkspaceMemberWhereInput
    orderBy?: WorkspaceMemberOrderByWithRelationInput | WorkspaceMemberOrderByWithRelationInput[]
    cursor?: WorkspaceMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkspaceMemberScalarFieldEnum | WorkspaceMemberScalarFieldEnum[]
  }

  /**
   * Workspace.workspaceOwners
   */
  export type Workspace$workspaceOwnersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceOwner
     */
    select?: WorkspaceOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceOwner
     */
    omit?: WorkspaceOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceOwnerInclude<ExtArgs> | null
    where?: WorkspaceOwnerWhereInput
    orderBy?: WorkspaceOwnerOrderByWithRelationInput | WorkspaceOwnerOrderByWithRelationInput[]
    cursor?: WorkspaceOwnerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkspaceOwnerScalarFieldEnum | WorkspaceOwnerScalarFieldEnum[]
  }

  /**
   * Workspace.projects
   */
  export type Workspace$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Workspace without action
   */
  export type WorkspaceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
  }


  /**
   * Model WorkspaceMember
   */

  export type AggregateWorkspaceMember = {
    _count: WorkspaceMemberCountAggregateOutputType | null
    _avg: WorkspaceMemberAvgAggregateOutputType | null
    _sum: WorkspaceMemberSumAggregateOutputType | null
    _min: WorkspaceMemberMinAggregateOutputType | null
    _max: WorkspaceMemberMaxAggregateOutputType | null
  }

  export type WorkspaceMemberAvgAggregateOutputType = {
    id: number | null
    workspaceId: number | null
    userId: number | null
    profileId: number | null
    inviterId: number | null
  }

  export type WorkspaceMemberSumAggregateOutputType = {
    id: number | null
    workspaceId: number | null
    userId: number | null
    profileId: number | null
    inviterId: number | null
  }

  export type WorkspaceMemberMinAggregateOutputType = {
    id: number | null
    workspaceId: number | null
    userId: number | null
    profileId: number | null
    inviterId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkspaceMemberMaxAggregateOutputType = {
    id: number | null
    workspaceId: number | null
    userId: number | null
    profileId: number | null
    inviterId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkspaceMemberCountAggregateOutputType = {
    id: number
    workspaceId: number
    userId: number
    profileId: number
    inviterId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkspaceMemberAvgAggregateInputType = {
    id?: true
    workspaceId?: true
    userId?: true
    profileId?: true
    inviterId?: true
  }

  export type WorkspaceMemberSumAggregateInputType = {
    id?: true
    workspaceId?: true
    userId?: true
    profileId?: true
    inviterId?: true
  }

  export type WorkspaceMemberMinAggregateInputType = {
    id?: true
    workspaceId?: true
    userId?: true
    profileId?: true
    inviterId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkspaceMemberMaxAggregateInputType = {
    id?: true
    workspaceId?: true
    userId?: true
    profileId?: true
    inviterId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkspaceMemberCountAggregateInputType = {
    id?: true
    workspaceId?: true
    userId?: true
    profileId?: true
    inviterId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkspaceMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkspaceMember to aggregate.
     */
    where?: WorkspaceMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceMembers to fetch.
     */
    orderBy?: WorkspaceMemberOrderByWithRelationInput | WorkspaceMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkspaceMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkspaceMembers
    **/
    _count?: true | WorkspaceMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkspaceMemberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkspaceMemberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkspaceMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkspaceMemberMaxAggregateInputType
  }

  export type GetWorkspaceMemberAggregateType<T extends WorkspaceMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkspaceMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkspaceMember[P]>
      : GetScalarType<T[P], AggregateWorkspaceMember[P]>
  }




  export type WorkspaceMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceMemberWhereInput
    orderBy?: WorkspaceMemberOrderByWithAggregationInput | WorkspaceMemberOrderByWithAggregationInput[]
    by: WorkspaceMemberScalarFieldEnum[] | WorkspaceMemberScalarFieldEnum
    having?: WorkspaceMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkspaceMemberCountAggregateInputType | true
    _avg?: WorkspaceMemberAvgAggregateInputType
    _sum?: WorkspaceMemberSumAggregateInputType
    _min?: WorkspaceMemberMinAggregateInputType
    _max?: WorkspaceMemberMaxAggregateInputType
  }

  export type WorkspaceMemberGroupByOutputType = {
    id: number
    workspaceId: number
    userId: number
    profileId: number
    inviterId: number | null
    createdAt: Date
    updatedAt: Date
    _count: WorkspaceMemberCountAggregateOutputType | null
    _avg: WorkspaceMemberAvgAggregateOutputType | null
    _sum: WorkspaceMemberSumAggregateOutputType | null
    _min: WorkspaceMemberMinAggregateOutputType | null
    _max: WorkspaceMemberMaxAggregateOutputType | null
  }

  type GetWorkspaceMemberGroupByPayload<T extends WorkspaceMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkspaceMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkspaceMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkspaceMemberGroupByOutputType[P]>
            : GetScalarType<T[P], WorkspaceMemberGroupByOutputType[P]>
        }
      >
    >


  export type WorkspaceMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    userId?: boolean
    profileId?: boolean
    inviterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    inviter?: boolean | WorkspaceMember$inviterArgs<ExtArgs>
    owners?: boolean | WorkspaceMember$ownersArgs<ExtArgs>
    companiesCreated?: boolean | WorkspaceMember$companiesCreatedArgs<ExtArgs>
    invitedMembers?: boolean | WorkspaceMember$invitedMembersArgs<ExtArgs>
    _count?: boolean | WorkspaceMemberCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspaceMember"]>

  export type WorkspaceMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    userId?: boolean
    profileId?: boolean
    inviterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    inviter?: boolean | WorkspaceMember$inviterArgs<ExtArgs>
  }, ExtArgs["result"]["workspaceMember"]>

  export type WorkspaceMemberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    userId?: boolean
    profileId?: boolean
    inviterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    inviter?: boolean | WorkspaceMember$inviterArgs<ExtArgs>
  }, ExtArgs["result"]["workspaceMember"]>

  export type WorkspaceMemberSelectScalar = {
    id?: boolean
    workspaceId?: boolean
    userId?: boolean
    profileId?: boolean
    inviterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkspaceMemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workspaceId" | "userId" | "profileId" | "inviterId" | "createdAt" | "updatedAt", ExtArgs["result"]["workspaceMember"]>
  export type WorkspaceMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    inviter?: boolean | WorkspaceMember$inviterArgs<ExtArgs>
    owners?: boolean | WorkspaceMember$ownersArgs<ExtArgs>
    companiesCreated?: boolean | WorkspaceMember$companiesCreatedArgs<ExtArgs>
    invitedMembers?: boolean | WorkspaceMember$invitedMembersArgs<ExtArgs>
    _count?: boolean | WorkspaceMemberCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkspaceMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    inviter?: boolean | WorkspaceMember$inviterArgs<ExtArgs>
  }
  export type WorkspaceMemberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    inviter?: boolean | WorkspaceMember$inviterArgs<ExtArgs>
  }

  export type $WorkspaceMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkspaceMember"
    objects: {
      workspace: Prisma.$WorkspacePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      profile: Prisma.$ProfilePayload<ExtArgs>
      inviter: Prisma.$WorkspaceMemberPayload<ExtArgs> | null
      owners: Prisma.$WorkspaceOwnerPayload<ExtArgs>[]
      companiesCreated: Prisma.$CompanyPayload<ExtArgs>[]
      invitedMembers: Prisma.$WorkspaceMemberPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      workspaceId: number
      userId: number
      profileId: number
      inviterId: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workspaceMember"]>
    composites: {}
  }

  type WorkspaceMemberGetPayload<S extends boolean | null | undefined | WorkspaceMemberDefaultArgs> = $Result.GetResult<Prisma.$WorkspaceMemberPayload, S>

  type WorkspaceMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkspaceMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkspaceMemberCountAggregateInputType | true
    }

  export interface WorkspaceMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkspaceMember'], meta: { name: 'WorkspaceMember' } }
    /**
     * Find zero or one WorkspaceMember that matches the filter.
     * @param {WorkspaceMemberFindUniqueArgs} args - Arguments to find a WorkspaceMember
     * @example
     * // Get one WorkspaceMember
     * const workspaceMember = await prisma.workspaceMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkspaceMemberFindUniqueArgs>(args: SelectSubset<T, WorkspaceMemberFindUniqueArgs<ExtArgs>>): Prisma__WorkspaceMemberClient<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkspaceMember that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkspaceMemberFindUniqueOrThrowArgs} args - Arguments to find a WorkspaceMember
     * @example
     * // Get one WorkspaceMember
     * const workspaceMember = await prisma.workspaceMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkspaceMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkspaceMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkspaceMemberClient<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkspaceMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceMemberFindFirstArgs} args - Arguments to find a WorkspaceMember
     * @example
     * // Get one WorkspaceMember
     * const workspaceMember = await prisma.workspaceMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkspaceMemberFindFirstArgs>(args?: SelectSubset<T, WorkspaceMemberFindFirstArgs<ExtArgs>>): Prisma__WorkspaceMemberClient<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkspaceMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceMemberFindFirstOrThrowArgs} args - Arguments to find a WorkspaceMember
     * @example
     * // Get one WorkspaceMember
     * const workspaceMember = await prisma.workspaceMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkspaceMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkspaceMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkspaceMemberClient<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkspaceMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkspaceMembers
     * const workspaceMembers = await prisma.workspaceMember.findMany()
     * 
     * // Get first 10 WorkspaceMembers
     * const workspaceMembers = await prisma.workspaceMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workspaceMemberWithIdOnly = await prisma.workspaceMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkspaceMemberFindManyArgs>(args?: SelectSubset<T, WorkspaceMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkspaceMember.
     * @param {WorkspaceMemberCreateArgs} args - Arguments to create a WorkspaceMember.
     * @example
     * // Create one WorkspaceMember
     * const WorkspaceMember = await prisma.workspaceMember.create({
     *   data: {
     *     // ... data to create a WorkspaceMember
     *   }
     * })
     * 
     */
    create<T extends WorkspaceMemberCreateArgs>(args: SelectSubset<T, WorkspaceMemberCreateArgs<ExtArgs>>): Prisma__WorkspaceMemberClient<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkspaceMembers.
     * @param {WorkspaceMemberCreateManyArgs} args - Arguments to create many WorkspaceMembers.
     * @example
     * // Create many WorkspaceMembers
     * const workspaceMember = await prisma.workspaceMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkspaceMemberCreateManyArgs>(args?: SelectSubset<T, WorkspaceMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkspaceMembers and returns the data saved in the database.
     * @param {WorkspaceMemberCreateManyAndReturnArgs} args - Arguments to create many WorkspaceMembers.
     * @example
     * // Create many WorkspaceMembers
     * const workspaceMember = await prisma.workspaceMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkspaceMembers and only return the `id`
     * const workspaceMemberWithIdOnly = await prisma.workspaceMember.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkspaceMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkspaceMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkspaceMember.
     * @param {WorkspaceMemberDeleteArgs} args - Arguments to delete one WorkspaceMember.
     * @example
     * // Delete one WorkspaceMember
     * const WorkspaceMember = await prisma.workspaceMember.delete({
     *   where: {
     *     // ... filter to delete one WorkspaceMember
     *   }
     * })
     * 
     */
    delete<T extends WorkspaceMemberDeleteArgs>(args: SelectSubset<T, WorkspaceMemberDeleteArgs<ExtArgs>>): Prisma__WorkspaceMemberClient<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkspaceMember.
     * @param {WorkspaceMemberUpdateArgs} args - Arguments to update one WorkspaceMember.
     * @example
     * // Update one WorkspaceMember
     * const workspaceMember = await prisma.workspaceMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkspaceMemberUpdateArgs>(args: SelectSubset<T, WorkspaceMemberUpdateArgs<ExtArgs>>): Prisma__WorkspaceMemberClient<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkspaceMembers.
     * @param {WorkspaceMemberDeleteManyArgs} args - Arguments to filter WorkspaceMembers to delete.
     * @example
     * // Delete a few WorkspaceMembers
     * const { count } = await prisma.workspaceMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkspaceMemberDeleteManyArgs>(args?: SelectSubset<T, WorkspaceMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkspaceMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkspaceMembers
     * const workspaceMember = await prisma.workspaceMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkspaceMemberUpdateManyArgs>(args: SelectSubset<T, WorkspaceMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkspaceMembers and returns the data updated in the database.
     * @param {WorkspaceMemberUpdateManyAndReturnArgs} args - Arguments to update many WorkspaceMembers.
     * @example
     * // Update many WorkspaceMembers
     * const workspaceMember = await prisma.workspaceMember.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkspaceMembers and only return the `id`
     * const workspaceMemberWithIdOnly = await prisma.workspaceMember.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkspaceMemberUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkspaceMemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkspaceMember.
     * @param {WorkspaceMemberUpsertArgs} args - Arguments to update or create a WorkspaceMember.
     * @example
     * // Update or create a WorkspaceMember
     * const workspaceMember = await prisma.workspaceMember.upsert({
     *   create: {
     *     // ... data to create a WorkspaceMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkspaceMember we want to update
     *   }
     * })
     */
    upsert<T extends WorkspaceMemberUpsertArgs>(args: SelectSubset<T, WorkspaceMemberUpsertArgs<ExtArgs>>): Prisma__WorkspaceMemberClient<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkspaceMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceMemberCountArgs} args - Arguments to filter WorkspaceMembers to count.
     * @example
     * // Count the number of WorkspaceMembers
     * const count = await prisma.workspaceMember.count({
     *   where: {
     *     // ... the filter for the WorkspaceMembers we want to count
     *   }
     * })
    **/
    count<T extends WorkspaceMemberCountArgs>(
      args?: Subset<T, WorkspaceMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkspaceMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkspaceMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkspaceMemberAggregateArgs>(args: Subset<T, WorkspaceMemberAggregateArgs>): Prisma.PrismaPromise<GetWorkspaceMemberAggregateType<T>>

    /**
     * Group by WorkspaceMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkspaceMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkspaceMemberGroupByArgs['orderBy'] }
        : { orderBy?: WorkspaceMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkspaceMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkspaceMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkspaceMember model
   */
  readonly fields: WorkspaceMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkspaceMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkspaceMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workspace<T extends WorkspaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceDefaultArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    profile<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    inviter<T extends WorkspaceMember$inviterArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceMember$inviterArgs<ExtArgs>>): Prisma__WorkspaceMemberClient<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    owners<T extends WorkspaceMember$ownersArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceMember$ownersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceOwnerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    companiesCreated<T extends WorkspaceMember$companiesCreatedArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceMember$companiesCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    invitedMembers<T extends WorkspaceMember$invitedMembersArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceMember$invitedMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkspaceMember model
   */
  interface WorkspaceMemberFieldRefs {
    readonly id: FieldRef<"WorkspaceMember", 'Int'>
    readonly workspaceId: FieldRef<"WorkspaceMember", 'Int'>
    readonly userId: FieldRef<"WorkspaceMember", 'Int'>
    readonly profileId: FieldRef<"WorkspaceMember", 'Int'>
    readonly inviterId: FieldRef<"WorkspaceMember", 'Int'>
    readonly createdAt: FieldRef<"WorkspaceMember", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkspaceMember", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkspaceMember findUnique
   */
  export type WorkspaceMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceMember to fetch.
     */
    where: WorkspaceMemberWhereUniqueInput
  }

  /**
   * WorkspaceMember findUniqueOrThrow
   */
  export type WorkspaceMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceMember to fetch.
     */
    where: WorkspaceMemberWhereUniqueInput
  }

  /**
   * WorkspaceMember findFirst
   */
  export type WorkspaceMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceMember to fetch.
     */
    where?: WorkspaceMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceMembers to fetch.
     */
    orderBy?: WorkspaceMemberOrderByWithRelationInput | WorkspaceMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkspaceMembers.
     */
    cursor?: WorkspaceMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkspaceMembers.
     */
    distinct?: WorkspaceMemberScalarFieldEnum | WorkspaceMemberScalarFieldEnum[]
  }

  /**
   * WorkspaceMember findFirstOrThrow
   */
  export type WorkspaceMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceMember to fetch.
     */
    where?: WorkspaceMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceMembers to fetch.
     */
    orderBy?: WorkspaceMemberOrderByWithRelationInput | WorkspaceMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkspaceMembers.
     */
    cursor?: WorkspaceMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkspaceMembers.
     */
    distinct?: WorkspaceMemberScalarFieldEnum | WorkspaceMemberScalarFieldEnum[]
  }

  /**
   * WorkspaceMember findMany
   */
  export type WorkspaceMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceMembers to fetch.
     */
    where?: WorkspaceMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceMembers to fetch.
     */
    orderBy?: WorkspaceMemberOrderByWithRelationInput | WorkspaceMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkspaceMembers.
     */
    cursor?: WorkspaceMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceMembers.
     */
    skip?: number
    distinct?: WorkspaceMemberScalarFieldEnum | WorkspaceMemberScalarFieldEnum[]
  }

  /**
   * WorkspaceMember create
   */
  export type WorkspaceMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkspaceMember.
     */
    data: XOR<WorkspaceMemberCreateInput, WorkspaceMemberUncheckedCreateInput>
  }

  /**
   * WorkspaceMember createMany
   */
  export type WorkspaceMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkspaceMembers.
     */
    data: WorkspaceMemberCreateManyInput | WorkspaceMemberCreateManyInput[]
  }

  /**
   * WorkspaceMember createManyAndReturn
   */
  export type WorkspaceMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * The data used to create many WorkspaceMembers.
     */
    data: WorkspaceMemberCreateManyInput | WorkspaceMemberCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkspaceMember update
   */
  export type WorkspaceMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkspaceMember.
     */
    data: XOR<WorkspaceMemberUpdateInput, WorkspaceMemberUncheckedUpdateInput>
    /**
     * Choose, which WorkspaceMember to update.
     */
    where: WorkspaceMemberWhereUniqueInput
  }

  /**
   * WorkspaceMember updateMany
   */
  export type WorkspaceMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkspaceMembers.
     */
    data: XOR<WorkspaceMemberUpdateManyMutationInput, WorkspaceMemberUncheckedUpdateManyInput>
    /**
     * Filter which WorkspaceMembers to update
     */
    where?: WorkspaceMemberWhereInput
    /**
     * Limit how many WorkspaceMembers to update.
     */
    limit?: number
  }

  /**
   * WorkspaceMember updateManyAndReturn
   */
  export type WorkspaceMemberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * The data used to update WorkspaceMembers.
     */
    data: XOR<WorkspaceMemberUpdateManyMutationInput, WorkspaceMemberUncheckedUpdateManyInput>
    /**
     * Filter which WorkspaceMembers to update
     */
    where?: WorkspaceMemberWhereInput
    /**
     * Limit how many WorkspaceMembers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkspaceMember upsert
   */
  export type WorkspaceMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkspaceMember to update in case it exists.
     */
    where: WorkspaceMemberWhereUniqueInput
    /**
     * In case the WorkspaceMember found by the `where` argument doesn't exist, create a new WorkspaceMember with this data.
     */
    create: XOR<WorkspaceMemberCreateInput, WorkspaceMemberUncheckedCreateInput>
    /**
     * In case the WorkspaceMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkspaceMemberUpdateInput, WorkspaceMemberUncheckedUpdateInput>
  }

  /**
   * WorkspaceMember delete
   */
  export type WorkspaceMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    /**
     * Filter which WorkspaceMember to delete.
     */
    where: WorkspaceMemberWhereUniqueInput
  }

  /**
   * WorkspaceMember deleteMany
   */
  export type WorkspaceMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkspaceMembers to delete
     */
    where?: WorkspaceMemberWhereInput
    /**
     * Limit how many WorkspaceMembers to delete.
     */
    limit?: number
  }

  /**
   * WorkspaceMember.inviter
   */
  export type WorkspaceMember$inviterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    where?: WorkspaceMemberWhereInput
  }

  /**
   * WorkspaceMember.owners
   */
  export type WorkspaceMember$ownersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceOwner
     */
    select?: WorkspaceOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceOwner
     */
    omit?: WorkspaceOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceOwnerInclude<ExtArgs> | null
    where?: WorkspaceOwnerWhereInput
    orderBy?: WorkspaceOwnerOrderByWithRelationInput | WorkspaceOwnerOrderByWithRelationInput[]
    cursor?: WorkspaceOwnerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkspaceOwnerScalarFieldEnum | WorkspaceOwnerScalarFieldEnum[]
  }

  /**
   * WorkspaceMember.companiesCreated
   */
  export type WorkspaceMember$companiesCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    cursor?: CompanyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * WorkspaceMember.invitedMembers
   */
  export type WorkspaceMember$invitedMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    where?: WorkspaceMemberWhereInput
    orderBy?: WorkspaceMemberOrderByWithRelationInput | WorkspaceMemberOrderByWithRelationInput[]
    cursor?: WorkspaceMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkspaceMemberScalarFieldEnum | WorkspaceMemberScalarFieldEnum[]
  }

  /**
   * WorkspaceMember without action
   */
  export type WorkspaceMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
  }


  /**
   * Model WorkspaceOwner
   */

  export type AggregateWorkspaceOwner = {
    _count: WorkspaceOwnerCountAggregateOutputType | null
    _avg: WorkspaceOwnerAvgAggregateOutputType | null
    _sum: WorkspaceOwnerSumAggregateOutputType | null
    _min: WorkspaceOwnerMinAggregateOutputType | null
    _max: WorkspaceOwnerMaxAggregateOutputType | null
  }

  export type WorkspaceOwnerAvgAggregateOutputType = {
    id: number | null
    workspaceId: number | null
    workspaceMemberId: number | null
  }

  export type WorkspaceOwnerSumAggregateOutputType = {
    id: number | null
    workspaceId: number | null
    workspaceMemberId: number | null
  }

  export type WorkspaceOwnerMinAggregateOutputType = {
    id: number | null
    workspaceId: number | null
    workspaceMemberId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkspaceOwnerMaxAggregateOutputType = {
    id: number | null
    workspaceId: number | null
    workspaceMemberId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkspaceOwnerCountAggregateOutputType = {
    id: number
    workspaceId: number
    workspaceMemberId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkspaceOwnerAvgAggregateInputType = {
    id?: true
    workspaceId?: true
    workspaceMemberId?: true
  }

  export type WorkspaceOwnerSumAggregateInputType = {
    id?: true
    workspaceId?: true
    workspaceMemberId?: true
  }

  export type WorkspaceOwnerMinAggregateInputType = {
    id?: true
    workspaceId?: true
    workspaceMemberId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkspaceOwnerMaxAggregateInputType = {
    id?: true
    workspaceId?: true
    workspaceMemberId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkspaceOwnerCountAggregateInputType = {
    id?: true
    workspaceId?: true
    workspaceMemberId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkspaceOwnerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkspaceOwner to aggregate.
     */
    where?: WorkspaceOwnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceOwners to fetch.
     */
    orderBy?: WorkspaceOwnerOrderByWithRelationInput | WorkspaceOwnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkspaceOwnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceOwners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceOwners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkspaceOwners
    **/
    _count?: true | WorkspaceOwnerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkspaceOwnerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkspaceOwnerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkspaceOwnerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkspaceOwnerMaxAggregateInputType
  }

  export type GetWorkspaceOwnerAggregateType<T extends WorkspaceOwnerAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkspaceOwner]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkspaceOwner[P]>
      : GetScalarType<T[P], AggregateWorkspaceOwner[P]>
  }




  export type WorkspaceOwnerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceOwnerWhereInput
    orderBy?: WorkspaceOwnerOrderByWithAggregationInput | WorkspaceOwnerOrderByWithAggregationInput[]
    by: WorkspaceOwnerScalarFieldEnum[] | WorkspaceOwnerScalarFieldEnum
    having?: WorkspaceOwnerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkspaceOwnerCountAggregateInputType | true
    _avg?: WorkspaceOwnerAvgAggregateInputType
    _sum?: WorkspaceOwnerSumAggregateInputType
    _min?: WorkspaceOwnerMinAggregateInputType
    _max?: WorkspaceOwnerMaxAggregateInputType
  }

  export type WorkspaceOwnerGroupByOutputType = {
    id: number
    workspaceId: number
    workspaceMemberId: number
    createdAt: Date
    updatedAt: Date
    _count: WorkspaceOwnerCountAggregateOutputType | null
    _avg: WorkspaceOwnerAvgAggregateOutputType | null
    _sum: WorkspaceOwnerSumAggregateOutputType | null
    _min: WorkspaceOwnerMinAggregateOutputType | null
    _max: WorkspaceOwnerMaxAggregateOutputType | null
  }

  type GetWorkspaceOwnerGroupByPayload<T extends WorkspaceOwnerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkspaceOwnerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkspaceOwnerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkspaceOwnerGroupByOutputType[P]>
            : GetScalarType<T[P], WorkspaceOwnerGroupByOutputType[P]>
        }
      >
    >


  export type WorkspaceOwnerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    workspaceMemberId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    workspaceMember?: boolean | WorkspaceMemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspaceOwner"]>

  export type WorkspaceOwnerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    workspaceMemberId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    workspaceMember?: boolean | WorkspaceMemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspaceOwner"]>

  export type WorkspaceOwnerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    workspaceMemberId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    workspaceMember?: boolean | WorkspaceMemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspaceOwner"]>

  export type WorkspaceOwnerSelectScalar = {
    id?: boolean
    workspaceId?: boolean
    workspaceMemberId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkspaceOwnerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workspaceId" | "workspaceMemberId" | "createdAt" | "updatedAt", ExtArgs["result"]["workspaceOwner"]>
  export type WorkspaceOwnerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    workspaceMember?: boolean | WorkspaceMemberDefaultArgs<ExtArgs>
  }
  export type WorkspaceOwnerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    workspaceMember?: boolean | WorkspaceMemberDefaultArgs<ExtArgs>
  }
  export type WorkspaceOwnerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    workspaceMember?: boolean | WorkspaceMemberDefaultArgs<ExtArgs>
  }

  export type $WorkspaceOwnerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkspaceOwner"
    objects: {
      workspace: Prisma.$WorkspacePayload<ExtArgs>
      workspaceMember: Prisma.$WorkspaceMemberPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      workspaceId: number
      workspaceMemberId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workspaceOwner"]>
    composites: {}
  }

  type WorkspaceOwnerGetPayload<S extends boolean | null | undefined | WorkspaceOwnerDefaultArgs> = $Result.GetResult<Prisma.$WorkspaceOwnerPayload, S>

  type WorkspaceOwnerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkspaceOwnerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkspaceOwnerCountAggregateInputType | true
    }

  export interface WorkspaceOwnerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkspaceOwner'], meta: { name: 'WorkspaceOwner' } }
    /**
     * Find zero or one WorkspaceOwner that matches the filter.
     * @param {WorkspaceOwnerFindUniqueArgs} args - Arguments to find a WorkspaceOwner
     * @example
     * // Get one WorkspaceOwner
     * const workspaceOwner = await prisma.workspaceOwner.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkspaceOwnerFindUniqueArgs>(args: SelectSubset<T, WorkspaceOwnerFindUniqueArgs<ExtArgs>>): Prisma__WorkspaceOwnerClient<$Result.GetResult<Prisma.$WorkspaceOwnerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkspaceOwner that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkspaceOwnerFindUniqueOrThrowArgs} args - Arguments to find a WorkspaceOwner
     * @example
     * // Get one WorkspaceOwner
     * const workspaceOwner = await prisma.workspaceOwner.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkspaceOwnerFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkspaceOwnerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkspaceOwnerClient<$Result.GetResult<Prisma.$WorkspaceOwnerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkspaceOwner that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceOwnerFindFirstArgs} args - Arguments to find a WorkspaceOwner
     * @example
     * // Get one WorkspaceOwner
     * const workspaceOwner = await prisma.workspaceOwner.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkspaceOwnerFindFirstArgs>(args?: SelectSubset<T, WorkspaceOwnerFindFirstArgs<ExtArgs>>): Prisma__WorkspaceOwnerClient<$Result.GetResult<Prisma.$WorkspaceOwnerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkspaceOwner that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceOwnerFindFirstOrThrowArgs} args - Arguments to find a WorkspaceOwner
     * @example
     * // Get one WorkspaceOwner
     * const workspaceOwner = await prisma.workspaceOwner.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkspaceOwnerFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkspaceOwnerFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkspaceOwnerClient<$Result.GetResult<Prisma.$WorkspaceOwnerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkspaceOwners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceOwnerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkspaceOwners
     * const workspaceOwners = await prisma.workspaceOwner.findMany()
     * 
     * // Get first 10 WorkspaceOwners
     * const workspaceOwners = await prisma.workspaceOwner.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workspaceOwnerWithIdOnly = await prisma.workspaceOwner.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkspaceOwnerFindManyArgs>(args?: SelectSubset<T, WorkspaceOwnerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceOwnerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkspaceOwner.
     * @param {WorkspaceOwnerCreateArgs} args - Arguments to create a WorkspaceOwner.
     * @example
     * // Create one WorkspaceOwner
     * const WorkspaceOwner = await prisma.workspaceOwner.create({
     *   data: {
     *     // ... data to create a WorkspaceOwner
     *   }
     * })
     * 
     */
    create<T extends WorkspaceOwnerCreateArgs>(args: SelectSubset<T, WorkspaceOwnerCreateArgs<ExtArgs>>): Prisma__WorkspaceOwnerClient<$Result.GetResult<Prisma.$WorkspaceOwnerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkspaceOwners.
     * @param {WorkspaceOwnerCreateManyArgs} args - Arguments to create many WorkspaceOwners.
     * @example
     * // Create many WorkspaceOwners
     * const workspaceOwner = await prisma.workspaceOwner.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkspaceOwnerCreateManyArgs>(args?: SelectSubset<T, WorkspaceOwnerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkspaceOwners and returns the data saved in the database.
     * @param {WorkspaceOwnerCreateManyAndReturnArgs} args - Arguments to create many WorkspaceOwners.
     * @example
     * // Create many WorkspaceOwners
     * const workspaceOwner = await prisma.workspaceOwner.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkspaceOwners and only return the `id`
     * const workspaceOwnerWithIdOnly = await prisma.workspaceOwner.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkspaceOwnerCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkspaceOwnerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceOwnerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkspaceOwner.
     * @param {WorkspaceOwnerDeleteArgs} args - Arguments to delete one WorkspaceOwner.
     * @example
     * // Delete one WorkspaceOwner
     * const WorkspaceOwner = await prisma.workspaceOwner.delete({
     *   where: {
     *     // ... filter to delete one WorkspaceOwner
     *   }
     * })
     * 
     */
    delete<T extends WorkspaceOwnerDeleteArgs>(args: SelectSubset<T, WorkspaceOwnerDeleteArgs<ExtArgs>>): Prisma__WorkspaceOwnerClient<$Result.GetResult<Prisma.$WorkspaceOwnerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkspaceOwner.
     * @param {WorkspaceOwnerUpdateArgs} args - Arguments to update one WorkspaceOwner.
     * @example
     * // Update one WorkspaceOwner
     * const workspaceOwner = await prisma.workspaceOwner.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkspaceOwnerUpdateArgs>(args: SelectSubset<T, WorkspaceOwnerUpdateArgs<ExtArgs>>): Prisma__WorkspaceOwnerClient<$Result.GetResult<Prisma.$WorkspaceOwnerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkspaceOwners.
     * @param {WorkspaceOwnerDeleteManyArgs} args - Arguments to filter WorkspaceOwners to delete.
     * @example
     * // Delete a few WorkspaceOwners
     * const { count } = await prisma.workspaceOwner.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkspaceOwnerDeleteManyArgs>(args?: SelectSubset<T, WorkspaceOwnerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkspaceOwners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceOwnerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkspaceOwners
     * const workspaceOwner = await prisma.workspaceOwner.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkspaceOwnerUpdateManyArgs>(args: SelectSubset<T, WorkspaceOwnerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkspaceOwners and returns the data updated in the database.
     * @param {WorkspaceOwnerUpdateManyAndReturnArgs} args - Arguments to update many WorkspaceOwners.
     * @example
     * // Update many WorkspaceOwners
     * const workspaceOwner = await prisma.workspaceOwner.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkspaceOwners and only return the `id`
     * const workspaceOwnerWithIdOnly = await prisma.workspaceOwner.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkspaceOwnerUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkspaceOwnerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceOwnerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkspaceOwner.
     * @param {WorkspaceOwnerUpsertArgs} args - Arguments to update or create a WorkspaceOwner.
     * @example
     * // Update or create a WorkspaceOwner
     * const workspaceOwner = await prisma.workspaceOwner.upsert({
     *   create: {
     *     // ... data to create a WorkspaceOwner
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkspaceOwner we want to update
     *   }
     * })
     */
    upsert<T extends WorkspaceOwnerUpsertArgs>(args: SelectSubset<T, WorkspaceOwnerUpsertArgs<ExtArgs>>): Prisma__WorkspaceOwnerClient<$Result.GetResult<Prisma.$WorkspaceOwnerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkspaceOwners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceOwnerCountArgs} args - Arguments to filter WorkspaceOwners to count.
     * @example
     * // Count the number of WorkspaceOwners
     * const count = await prisma.workspaceOwner.count({
     *   where: {
     *     // ... the filter for the WorkspaceOwners we want to count
     *   }
     * })
    **/
    count<T extends WorkspaceOwnerCountArgs>(
      args?: Subset<T, WorkspaceOwnerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkspaceOwnerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkspaceOwner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceOwnerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkspaceOwnerAggregateArgs>(args: Subset<T, WorkspaceOwnerAggregateArgs>): Prisma.PrismaPromise<GetWorkspaceOwnerAggregateType<T>>

    /**
     * Group by WorkspaceOwner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceOwnerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkspaceOwnerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkspaceOwnerGroupByArgs['orderBy'] }
        : { orderBy?: WorkspaceOwnerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkspaceOwnerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkspaceOwnerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkspaceOwner model
   */
  readonly fields: WorkspaceOwnerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkspaceOwner.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkspaceOwnerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workspace<T extends WorkspaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceDefaultArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    workspaceMember<T extends WorkspaceMemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceMemberDefaultArgs<ExtArgs>>): Prisma__WorkspaceMemberClient<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkspaceOwner model
   */
  interface WorkspaceOwnerFieldRefs {
    readonly id: FieldRef<"WorkspaceOwner", 'Int'>
    readonly workspaceId: FieldRef<"WorkspaceOwner", 'Int'>
    readonly workspaceMemberId: FieldRef<"WorkspaceOwner", 'Int'>
    readonly createdAt: FieldRef<"WorkspaceOwner", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkspaceOwner", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkspaceOwner findUnique
   */
  export type WorkspaceOwnerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceOwner
     */
    select?: WorkspaceOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceOwner
     */
    omit?: WorkspaceOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceOwnerInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceOwner to fetch.
     */
    where: WorkspaceOwnerWhereUniqueInput
  }

  /**
   * WorkspaceOwner findUniqueOrThrow
   */
  export type WorkspaceOwnerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceOwner
     */
    select?: WorkspaceOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceOwner
     */
    omit?: WorkspaceOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceOwnerInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceOwner to fetch.
     */
    where: WorkspaceOwnerWhereUniqueInput
  }

  /**
   * WorkspaceOwner findFirst
   */
  export type WorkspaceOwnerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceOwner
     */
    select?: WorkspaceOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceOwner
     */
    omit?: WorkspaceOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceOwnerInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceOwner to fetch.
     */
    where?: WorkspaceOwnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceOwners to fetch.
     */
    orderBy?: WorkspaceOwnerOrderByWithRelationInput | WorkspaceOwnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkspaceOwners.
     */
    cursor?: WorkspaceOwnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceOwners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceOwners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkspaceOwners.
     */
    distinct?: WorkspaceOwnerScalarFieldEnum | WorkspaceOwnerScalarFieldEnum[]
  }

  /**
   * WorkspaceOwner findFirstOrThrow
   */
  export type WorkspaceOwnerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceOwner
     */
    select?: WorkspaceOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceOwner
     */
    omit?: WorkspaceOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceOwnerInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceOwner to fetch.
     */
    where?: WorkspaceOwnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceOwners to fetch.
     */
    orderBy?: WorkspaceOwnerOrderByWithRelationInput | WorkspaceOwnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkspaceOwners.
     */
    cursor?: WorkspaceOwnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceOwners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceOwners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkspaceOwners.
     */
    distinct?: WorkspaceOwnerScalarFieldEnum | WorkspaceOwnerScalarFieldEnum[]
  }

  /**
   * WorkspaceOwner findMany
   */
  export type WorkspaceOwnerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceOwner
     */
    select?: WorkspaceOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceOwner
     */
    omit?: WorkspaceOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceOwnerInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceOwners to fetch.
     */
    where?: WorkspaceOwnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceOwners to fetch.
     */
    orderBy?: WorkspaceOwnerOrderByWithRelationInput | WorkspaceOwnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkspaceOwners.
     */
    cursor?: WorkspaceOwnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceOwners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceOwners.
     */
    skip?: number
    distinct?: WorkspaceOwnerScalarFieldEnum | WorkspaceOwnerScalarFieldEnum[]
  }

  /**
   * WorkspaceOwner create
   */
  export type WorkspaceOwnerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceOwner
     */
    select?: WorkspaceOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceOwner
     */
    omit?: WorkspaceOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceOwnerInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkspaceOwner.
     */
    data: XOR<WorkspaceOwnerCreateInput, WorkspaceOwnerUncheckedCreateInput>
  }

  /**
   * WorkspaceOwner createMany
   */
  export type WorkspaceOwnerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkspaceOwners.
     */
    data: WorkspaceOwnerCreateManyInput | WorkspaceOwnerCreateManyInput[]
  }

  /**
   * WorkspaceOwner createManyAndReturn
   */
  export type WorkspaceOwnerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceOwner
     */
    select?: WorkspaceOwnerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceOwner
     */
    omit?: WorkspaceOwnerOmit<ExtArgs> | null
    /**
     * The data used to create many WorkspaceOwners.
     */
    data: WorkspaceOwnerCreateManyInput | WorkspaceOwnerCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceOwnerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkspaceOwner update
   */
  export type WorkspaceOwnerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceOwner
     */
    select?: WorkspaceOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceOwner
     */
    omit?: WorkspaceOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceOwnerInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkspaceOwner.
     */
    data: XOR<WorkspaceOwnerUpdateInput, WorkspaceOwnerUncheckedUpdateInput>
    /**
     * Choose, which WorkspaceOwner to update.
     */
    where: WorkspaceOwnerWhereUniqueInput
  }

  /**
   * WorkspaceOwner updateMany
   */
  export type WorkspaceOwnerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkspaceOwners.
     */
    data: XOR<WorkspaceOwnerUpdateManyMutationInput, WorkspaceOwnerUncheckedUpdateManyInput>
    /**
     * Filter which WorkspaceOwners to update
     */
    where?: WorkspaceOwnerWhereInput
    /**
     * Limit how many WorkspaceOwners to update.
     */
    limit?: number
  }

  /**
   * WorkspaceOwner updateManyAndReturn
   */
  export type WorkspaceOwnerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceOwner
     */
    select?: WorkspaceOwnerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceOwner
     */
    omit?: WorkspaceOwnerOmit<ExtArgs> | null
    /**
     * The data used to update WorkspaceOwners.
     */
    data: XOR<WorkspaceOwnerUpdateManyMutationInput, WorkspaceOwnerUncheckedUpdateManyInput>
    /**
     * Filter which WorkspaceOwners to update
     */
    where?: WorkspaceOwnerWhereInput
    /**
     * Limit how many WorkspaceOwners to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceOwnerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkspaceOwner upsert
   */
  export type WorkspaceOwnerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceOwner
     */
    select?: WorkspaceOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceOwner
     */
    omit?: WorkspaceOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceOwnerInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkspaceOwner to update in case it exists.
     */
    where: WorkspaceOwnerWhereUniqueInput
    /**
     * In case the WorkspaceOwner found by the `where` argument doesn't exist, create a new WorkspaceOwner with this data.
     */
    create: XOR<WorkspaceOwnerCreateInput, WorkspaceOwnerUncheckedCreateInput>
    /**
     * In case the WorkspaceOwner was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkspaceOwnerUpdateInput, WorkspaceOwnerUncheckedUpdateInput>
  }

  /**
   * WorkspaceOwner delete
   */
  export type WorkspaceOwnerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceOwner
     */
    select?: WorkspaceOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceOwner
     */
    omit?: WorkspaceOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceOwnerInclude<ExtArgs> | null
    /**
     * Filter which WorkspaceOwner to delete.
     */
    where: WorkspaceOwnerWhereUniqueInput
  }

  /**
   * WorkspaceOwner deleteMany
   */
  export type WorkspaceOwnerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkspaceOwners to delete
     */
    where?: WorkspaceOwnerWhereInput
    /**
     * Limit how many WorkspaceOwners to delete.
     */
    limit?: number
  }

  /**
   * WorkspaceOwner without action
   */
  export type WorkspaceOwnerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceOwner
     */
    select?: WorkspaceOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceOwner
     */
    omit?: WorkspaceOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceOwnerInclude<ExtArgs> | null
  }


  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyAvgAggregateOutputType = {
    id: number | null
    workspaceId: number | null
    employeeCount: number | null
    createdBy: number | null
  }

  export type CompanySumAggregateOutputType = {
    id: number | null
    workspaceId: number | null
    employeeCount: number | null
    createdBy: number | null
  }

  export type CompanyMinAggregateOutputType = {
    id: number | null
    workspaceId: number | null
    name: string | null
    location: string | null
    businessNumber: string | null
    managementNumber: string | null
    employeeCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: number | null
    workspaceId: number | null
    name: string | null
    location: string | null
    businessNumber: string | null
    managementNumber: string | null
    employeeCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    workspaceId: number
    name: number
    location: number
    businessNumber: number
    managementNumber: number
    employeeCount: number
    createdAt: number
    updatedAt: number
    createdBy: number
    _all: number
  }


  export type CompanyAvgAggregateInputType = {
    id?: true
    workspaceId?: true
    employeeCount?: true
    createdBy?: true
  }

  export type CompanySumAggregateInputType = {
    id?: true
    workspaceId?: true
    employeeCount?: true
    createdBy?: true
  }

  export type CompanyMinAggregateInputType = {
    id?: true
    workspaceId?: true
    name?: true
    location?: true
    businessNumber?: true
    managementNumber?: true
    employeeCount?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    workspaceId?: true
    name?: true
    location?: true
    businessNumber?: true
    managementNumber?: true
    employeeCount?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    workspaceId?: true
    name?: true
    location?: true
    businessNumber?: true
    managementNumber?: true
    employeeCount?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _avg?: CompanyAvgAggregateInputType
    _sum?: CompanySumAggregateInputType
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    id: number
    workspaceId: number
    name: string
    location: string
    businessNumber: string | null
    managementNumber: string | null
    employeeCount: number
    createdAt: Date
    updatedAt: Date
    createdBy: number
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    name?: boolean
    location?: boolean
    businessNumber?: boolean
    managementNumber?: boolean
    employeeCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    companyIndustryCodes?: boolean | Company$companyIndustryCodesArgs<ExtArgs>
    dayLaborers?: boolean | Company$dayLaborersArgs<ExtArgs>
    employees?: boolean | Company$employeesArgs<ExtArgs>
    owners?: boolean | Company$ownersArgs<ExtArgs>
    sites?: boolean | Company$sitesArgs<ExtArgs>
    createdByMember?: boolean | WorkspaceMemberDefaultArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    name?: boolean
    location?: boolean
    businessNumber?: boolean
    managementNumber?: boolean
    employeeCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    createdByMember?: boolean | WorkspaceMemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    name?: boolean
    location?: boolean
    businessNumber?: boolean
    managementNumber?: boolean
    employeeCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    createdByMember?: boolean | WorkspaceMemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    id?: boolean
    workspaceId?: boolean
    name?: boolean
    location?: boolean
    businessNumber?: boolean
    managementNumber?: boolean
    employeeCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
  }

  export type CompanyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workspaceId" | "name" | "location" | "businessNumber" | "managementNumber" | "employeeCount" | "createdAt" | "updatedAt" | "createdBy", ExtArgs["result"]["company"]>
  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    companyIndustryCodes?: boolean | Company$companyIndustryCodesArgs<ExtArgs>
    dayLaborers?: boolean | Company$dayLaborersArgs<ExtArgs>
    employees?: boolean | Company$employeesArgs<ExtArgs>
    owners?: boolean | Company$ownersArgs<ExtArgs>
    sites?: boolean | Company$sitesArgs<ExtArgs>
    createdByMember?: boolean | WorkspaceMemberDefaultArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompanyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    createdByMember?: boolean | WorkspaceMemberDefaultArgs<ExtArgs>
  }
  export type CompanyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    createdByMember?: boolean | WorkspaceMemberDefaultArgs<ExtArgs>
  }

  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      workspace: Prisma.$WorkspacePayload<ExtArgs>
      companyIndustryCodes: Prisma.$CompanyIndustryCodePayload<ExtArgs>[]
      dayLaborers: Prisma.$DayLaborerPayload<ExtArgs>[]
      employees: Prisma.$EmployeePayload<ExtArgs>[]
      owners: Prisma.$OwnerPayload<ExtArgs>[]
      sites: Prisma.$SitePayload<ExtArgs>[]
      createdByMember: Prisma.$WorkspaceMemberPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      workspaceId: number
      name: string
      location: string
      businessNumber: string | null
      managementNumber: string | null
      employeeCount: number
      createdAt: Date
      updatedAt: Date
      createdBy: number
    }, ExtArgs["result"]["company"]>
    composites: {}
  }

  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyFindUniqueArgs>(args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Company that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyFindFirstArgs>(args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyFindManyArgs>(args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
     */
    create<T extends CompanyCreateArgs>(args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Companies.
     * @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyCreateManyArgs>(args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Companies and returns the data saved in the database.
     * @param {CompanyCreateManyAndReturnArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
     */
    delete<T extends CompanyDeleteArgs>(args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyUpdateArgs>(args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyDeleteManyArgs>(args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyUpdateManyArgs>(args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies and returns the data updated in the database.
     * @param {CompanyUpdateManyAndReturnArgs} args - Arguments to update many Companies.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompanyUpdateManyAndReturnArgs>(args: SelectSubset<T, CompanyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
     */
    upsert<T extends CompanyUpsertArgs>(args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workspace<T extends WorkspaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceDefaultArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    companyIndustryCodes<T extends Company$companyIndustryCodesArgs<ExtArgs> = {}>(args?: Subset<T, Company$companyIndustryCodesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyIndustryCodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    dayLaborers<T extends Company$dayLaborersArgs<ExtArgs> = {}>(args?: Subset<T, Company$dayLaborersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DayLaborerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    employees<T extends Company$employeesArgs<ExtArgs> = {}>(args?: Subset<T, Company$employeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    owners<T extends Company$ownersArgs<ExtArgs> = {}>(args?: Subset<T, Company$ownersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sites<T extends Company$sitesArgs<ExtArgs> = {}>(args?: Subset<T, Company$sitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdByMember<T extends WorkspaceMemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceMemberDefaultArgs<ExtArgs>>): Prisma__WorkspaceMemberClient<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Company model
   */
  interface CompanyFieldRefs {
    readonly id: FieldRef<"Company", 'Int'>
    readonly workspaceId: FieldRef<"Company", 'Int'>
    readonly name: FieldRef<"Company", 'String'>
    readonly location: FieldRef<"Company", 'String'>
    readonly businessNumber: FieldRef<"Company", 'String'>
    readonly managementNumber: FieldRef<"Company", 'String'>
    readonly employeeCount: FieldRef<"Company", 'Int'>
    readonly createdAt: FieldRef<"Company", 'DateTime'>
    readonly updatedAt: FieldRef<"Company", 'DateTime'>
    readonly createdBy: FieldRef<"Company", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }

  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
  }

  /**
   * Company createManyAndReturn
   */
  export type CompanyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
  }

  /**
   * Company updateManyAndReturn
   */
  export type CompanyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }

  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to delete.
     */
    limit?: number
  }

  /**
   * Company.companyIndustryCodes
   */
  export type Company$companyIndustryCodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyIndustryCode
     */
    select?: CompanyIndustryCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyIndustryCode
     */
    omit?: CompanyIndustryCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIndustryCodeInclude<ExtArgs> | null
    where?: CompanyIndustryCodeWhereInput
    orderBy?: CompanyIndustryCodeOrderByWithRelationInput | CompanyIndustryCodeOrderByWithRelationInput[]
    cursor?: CompanyIndustryCodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyIndustryCodeScalarFieldEnum | CompanyIndustryCodeScalarFieldEnum[]
  }

  /**
   * Company.dayLaborers
   */
  export type Company$dayLaborersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayLaborer
     */
    select?: DayLaborerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DayLaborer
     */
    omit?: DayLaborerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayLaborerInclude<ExtArgs> | null
    where?: DayLaborerWhereInput
    orderBy?: DayLaborerOrderByWithRelationInput | DayLaborerOrderByWithRelationInput[]
    cursor?: DayLaborerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DayLaborerScalarFieldEnum | DayLaborerScalarFieldEnum[]
  }

  /**
   * Company.employees
   */
  export type Company$employeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    cursor?: EmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Company.owners
   */
  export type Company$ownersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerInclude<ExtArgs> | null
    where?: OwnerWhereInput
    orderBy?: OwnerOrderByWithRelationInput | OwnerOrderByWithRelationInput[]
    cursor?: OwnerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OwnerScalarFieldEnum | OwnerScalarFieldEnum[]
  }

  /**
   * Company.sites
   */
  export type Company$sitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    where?: SiteWhereInput
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    cursor?: SiteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SiteScalarFieldEnum | SiteScalarFieldEnum[]
  }

  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
  }


  /**
   * Model Employee
   */

  export type AggregateEmployee = {
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  export type EmployeeAvgAggregateOutputType = {
    id: number | null
    talentPoolId: number | null
    companyId: number | null
  }

  export type EmployeeSumAggregateOutputType = {
    id: number | null
    talentPoolId: number | null
    companyId: number | null
  }

  export type EmployeeMinAggregateOutputType = {
    id: number | null
    talentPoolId: number | null
    companyId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmployeeMaxAggregateOutputType = {
    id: number | null
    talentPoolId: number | null
    companyId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmployeeCountAggregateOutputType = {
    id: number
    talentPoolId: number
    companyId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmployeeAvgAggregateInputType = {
    id?: true
    talentPoolId?: true
    companyId?: true
  }

  export type EmployeeSumAggregateInputType = {
    id?: true
    talentPoolId?: true
    companyId?: true
  }

  export type EmployeeMinAggregateInputType = {
    id?: true
    talentPoolId?: true
    companyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmployeeMaxAggregateInputType = {
    id?: true
    talentPoolId?: true
    companyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmployeeCountAggregateInputType = {
    id?: true
    talentPoolId?: true
    companyId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmployeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employee to aggregate.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employees
    **/
    _count?: true | EmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeMaxAggregateInputType
  }

  export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployee[P]>
      : GetScalarType<T[P], AggregateEmployee[P]>
  }




  export type EmployeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithAggregationInput | EmployeeOrderByWithAggregationInput[]
    by: EmployeeScalarFieldEnum[] | EmployeeScalarFieldEnum
    having?: EmployeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeCountAggregateInputType | true
    _avg?: EmployeeAvgAggregateInputType
    _sum?: EmployeeSumAggregateInputType
    _min?: EmployeeMinAggregateInputType
    _max?: EmployeeMaxAggregateInputType
  }

  export type EmployeeGroupByOutputType = {
    id: number
    talentPoolId: number
    companyId: number
    createdAt: Date
    updatedAt: Date
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  type GetEmployeeGroupByPayload<T extends EmployeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    talentPoolId?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    talentPool?: boolean | TalentPoolDefaultArgs<ExtArgs>
    owners?: boolean | Employee$ownersArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    talentPoolId?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    talentPool?: boolean | TalentPoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    talentPoolId?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    talentPool?: boolean | TalentPoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectScalar = {
    id?: boolean
    talentPoolId?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmployeeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "talentPoolId" | "companyId" | "createdAt" | "updatedAt", ExtArgs["result"]["employee"]>
  export type EmployeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    talentPool?: boolean | TalentPoolDefaultArgs<ExtArgs>
    owners?: boolean | Employee$ownersArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EmployeeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    talentPool?: boolean | TalentPoolDefaultArgs<ExtArgs>
  }
  export type EmployeeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    talentPool?: boolean | TalentPoolDefaultArgs<ExtArgs>
  }

  export type $EmployeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Employee"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      talentPool: Prisma.$TalentPoolPayload<ExtArgs>
      owners: Prisma.$OwnerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      talentPoolId: number
      companyId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["employee"]>
    composites: {}
  }

  type EmployeeGetPayload<S extends boolean | null | undefined | EmployeeDefaultArgs> = $Result.GetResult<Prisma.$EmployeePayload, S>

  type EmployeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmployeeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmployeeCountAggregateInputType | true
    }

  export interface EmployeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employee'], meta: { name: 'Employee' } }
    /**
     * Find zero or one Employee that matches the filter.
     * @param {EmployeeFindUniqueArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeFindUniqueArgs>(args: SelectSubset<T, EmployeeFindUniqueArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Employee that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmployeeFindUniqueOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Employee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeFindFirstArgs>(args?: SelectSubset<T, EmployeeFindFirstArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Employee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employee.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeWithIdOnly = await prisma.employee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeeFindManyArgs>(args?: SelectSubset<T, EmployeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Employee.
     * @param {EmployeeCreateArgs} args - Arguments to create a Employee.
     * @example
     * // Create one Employee
     * const Employee = await prisma.employee.create({
     *   data: {
     *     // ... data to create a Employee
     *   }
     * })
     * 
     */
    create<T extends EmployeeCreateArgs>(args: SelectSubset<T, EmployeeCreateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Employees.
     * @param {EmployeeCreateManyArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeCreateManyArgs>(args?: SelectSubset<T, EmployeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Employees and returns the data saved in the database.
     * @param {EmployeeCreateManyAndReturnArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Employees and only return the `id`
     * const employeeWithIdOnly = await prisma.employee.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmployeeCreateManyAndReturnArgs>(args?: SelectSubset<T, EmployeeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Employee.
     * @param {EmployeeDeleteArgs} args - Arguments to delete one Employee.
     * @example
     * // Delete one Employee
     * const Employee = await prisma.employee.delete({
     *   where: {
     *     // ... filter to delete one Employee
     *   }
     * })
     * 
     */
    delete<T extends EmployeeDeleteArgs>(args: SelectSubset<T, EmployeeDeleteArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Employee.
     * @param {EmployeeUpdateArgs} args - Arguments to update one Employee.
     * @example
     * // Update one Employee
     * const employee = await prisma.employee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeUpdateArgs>(args: SelectSubset<T, EmployeeUpdateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Employees.
     * @param {EmployeeDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeDeleteManyArgs>(args?: SelectSubset<T, EmployeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeUpdateManyArgs>(args: SelectSubset<T, EmployeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees and returns the data updated in the database.
     * @param {EmployeeUpdateManyAndReturnArgs} args - Arguments to update many Employees.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Employees and only return the `id`
     * const employeeWithIdOnly = await prisma.employee.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmployeeUpdateManyAndReturnArgs>(args: SelectSubset<T, EmployeeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Employee.
     * @param {EmployeeUpsertArgs} args - Arguments to update or create a Employee.
     * @example
     * // Update or create a Employee
     * const employee = await prisma.employee.upsert({
     *   create: {
     *     // ... data to create a Employee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employee we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeUpsertArgs>(args: SelectSubset<T, EmployeeUpsertArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employee.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends EmployeeCountArgs>(
      args?: Subset<T, EmployeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeAggregateArgs>(args: Subset<T, EmployeeAggregateArgs>): Prisma.PrismaPromise<GetEmployeeAggregateType<T>>

    /**
     * Group by Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Employee model
   */
  readonly fields: EmployeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    talentPool<T extends TalentPoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TalentPoolDefaultArgs<ExtArgs>>): Prisma__TalentPoolClient<$Result.GetResult<Prisma.$TalentPoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    owners<T extends Employee$ownersArgs<ExtArgs> = {}>(args?: Subset<T, Employee$ownersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Employee model
   */
  interface EmployeeFieldRefs {
    readonly id: FieldRef<"Employee", 'Int'>
    readonly talentPoolId: FieldRef<"Employee", 'Int'>
    readonly companyId: FieldRef<"Employee", 'Int'>
    readonly createdAt: FieldRef<"Employee", 'DateTime'>
    readonly updatedAt: FieldRef<"Employee", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Employee findUnique
   */
  export type EmployeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findUniqueOrThrow
   */
  export type EmployeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findFirst
   */
  export type EmployeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findFirstOrThrow
   */
  export type EmployeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findMany
   */
  export type EmployeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employees to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee create
   */
  export type EmployeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to create a Employee.
     */
    data: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
  }

  /**
   * Employee createMany
   */
  export type EmployeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
  }

  /**
   * Employee createManyAndReturn
   */
  export type EmployeeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Employee update
   */
  export type EmployeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to update a Employee.
     */
    data: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
    /**
     * Choose, which Employee to update.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee updateMany
   */
  export type EmployeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to update.
     */
    limit?: number
  }

  /**
   * Employee updateManyAndReturn
   */
  export type EmployeeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Employee upsert
   */
  export type EmployeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The filter to search for the Employee to update in case it exists.
     */
    where: EmployeeWhereUniqueInput
    /**
     * In case the Employee found by the `where` argument doesn't exist, create a new Employee with this data.
     */
    create: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
    /**
     * In case the Employee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
  }

  /**
   * Employee delete
   */
  export type EmployeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter which Employee to delete.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee deleteMany
   */
  export type EmployeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employees to delete
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to delete.
     */
    limit?: number
  }

  /**
   * Employee.owners
   */
  export type Employee$ownersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerInclude<ExtArgs> | null
    where?: OwnerWhereInput
    orderBy?: OwnerOrderByWithRelationInput | OwnerOrderByWithRelationInput[]
    cursor?: OwnerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OwnerScalarFieldEnum | OwnerScalarFieldEnum[]
  }

  /**
   * Employee without action
   */
  export type EmployeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
  }


  /**
   * Model DayLaborer
   */

  export type AggregateDayLaborer = {
    _count: DayLaborerCountAggregateOutputType | null
    _avg: DayLaborerAvgAggregateOutputType | null
    _sum: DayLaborerSumAggregateOutputType | null
    _min: DayLaborerMinAggregateOutputType | null
    _max: DayLaborerMaxAggregateOutputType | null
  }

  export type DayLaborerAvgAggregateOutputType = {
    id: number | null
    talentPoolId: number | null
    companyId: number | null
  }

  export type DayLaborerSumAggregateOutputType = {
    id: number | null
    talentPoolId: number | null
    companyId: number | null
  }

  export type DayLaborerMinAggregateOutputType = {
    id: number | null
    talentPoolId: number | null
    companyId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DayLaborerMaxAggregateOutputType = {
    id: number | null
    talentPoolId: number | null
    companyId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DayLaborerCountAggregateOutputType = {
    id: number
    talentPoolId: number
    companyId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DayLaborerAvgAggregateInputType = {
    id?: true
    talentPoolId?: true
    companyId?: true
  }

  export type DayLaborerSumAggregateInputType = {
    id?: true
    talentPoolId?: true
    companyId?: true
  }

  export type DayLaborerMinAggregateInputType = {
    id?: true
    talentPoolId?: true
    companyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DayLaborerMaxAggregateInputType = {
    id?: true
    talentPoolId?: true
    companyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DayLaborerCountAggregateInputType = {
    id?: true
    talentPoolId?: true
    companyId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DayLaborerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DayLaborer to aggregate.
     */
    where?: DayLaborerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DayLaborers to fetch.
     */
    orderBy?: DayLaborerOrderByWithRelationInput | DayLaborerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DayLaborerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DayLaborers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DayLaborers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DayLaborers
    **/
    _count?: true | DayLaborerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DayLaborerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DayLaborerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DayLaborerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DayLaborerMaxAggregateInputType
  }

  export type GetDayLaborerAggregateType<T extends DayLaborerAggregateArgs> = {
        [P in keyof T & keyof AggregateDayLaborer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDayLaborer[P]>
      : GetScalarType<T[P], AggregateDayLaborer[P]>
  }




  export type DayLaborerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DayLaborerWhereInput
    orderBy?: DayLaborerOrderByWithAggregationInput | DayLaborerOrderByWithAggregationInput[]
    by: DayLaborerScalarFieldEnum[] | DayLaborerScalarFieldEnum
    having?: DayLaborerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DayLaborerCountAggregateInputType | true
    _avg?: DayLaborerAvgAggregateInputType
    _sum?: DayLaborerSumAggregateInputType
    _min?: DayLaborerMinAggregateInputType
    _max?: DayLaborerMaxAggregateInputType
  }

  export type DayLaborerGroupByOutputType = {
    id: number
    talentPoolId: number
    companyId: number
    createdAt: Date
    updatedAt: Date
    _count: DayLaborerCountAggregateOutputType | null
    _avg: DayLaborerAvgAggregateOutputType | null
    _sum: DayLaborerSumAggregateOutputType | null
    _min: DayLaborerMinAggregateOutputType | null
    _max: DayLaborerMaxAggregateOutputType | null
  }

  type GetDayLaborerGroupByPayload<T extends DayLaborerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DayLaborerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DayLaborerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DayLaborerGroupByOutputType[P]>
            : GetScalarType<T[P], DayLaborerGroupByOutputType[P]>
        }
      >
    >


  export type DayLaborerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    talentPoolId?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    talentPool?: boolean | TalentPoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dayLaborer"]>

  export type DayLaborerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    talentPoolId?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    talentPool?: boolean | TalentPoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dayLaborer"]>

  export type DayLaborerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    talentPoolId?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    talentPool?: boolean | TalentPoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dayLaborer"]>

  export type DayLaborerSelectScalar = {
    id?: boolean
    talentPoolId?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DayLaborerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "talentPoolId" | "companyId" | "createdAt" | "updatedAt", ExtArgs["result"]["dayLaborer"]>
  export type DayLaborerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    talentPool?: boolean | TalentPoolDefaultArgs<ExtArgs>
  }
  export type DayLaborerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    talentPool?: boolean | TalentPoolDefaultArgs<ExtArgs>
  }
  export type DayLaborerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    talentPool?: boolean | TalentPoolDefaultArgs<ExtArgs>
  }

  export type $DayLaborerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DayLaborer"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      talentPool: Prisma.$TalentPoolPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      talentPoolId: number
      companyId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["dayLaborer"]>
    composites: {}
  }

  type DayLaborerGetPayload<S extends boolean | null | undefined | DayLaborerDefaultArgs> = $Result.GetResult<Prisma.$DayLaborerPayload, S>

  type DayLaborerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DayLaborerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DayLaborerCountAggregateInputType | true
    }

  export interface DayLaborerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DayLaborer'], meta: { name: 'DayLaborer' } }
    /**
     * Find zero or one DayLaborer that matches the filter.
     * @param {DayLaborerFindUniqueArgs} args - Arguments to find a DayLaborer
     * @example
     * // Get one DayLaborer
     * const dayLaborer = await prisma.dayLaborer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DayLaborerFindUniqueArgs>(args: SelectSubset<T, DayLaborerFindUniqueArgs<ExtArgs>>): Prisma__DayLaborerClient<$Result.GetResult<Prisma.$DayLaborerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DayLaborer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DayLaborerFindUniqueOrThrowArgs} args - Arguments to find a DayLaborer
     * @example
     * // Get one DayLaborer
     * const dayLaborer = await prisma.dayLaborer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DayLaborerFindUniqueOrThrowArgs>(args: SelectSubset<T, DayLaborerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DayLaborerClient<$Result.GetResult<Prisma.$DayLaborerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DayLaborer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DayLaborerFindFirstArgs} args - Arguments to find a DayLaborer
     * @example
     * // Get one DayLaborer
     * const dayLaborer = await prisma.dayLaborer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DayLaborerFindFirstArgs>(args?: SelectSubset<T, DayLaborerFindFirstArgs<ExtArgs>>): Prisma__DayLaborerClient<$Result.GetResult<Prisma.$DayLaborerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DayLaborer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DayLaborerFindFirstOrThrowArgs} args - Arguments to find a DayLaborer
     * @example
     * // Get one DayLaborer
     * const dayLaborer = await prisma.dayLaborer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DayLaborerFindFirstOrThrowArgs>(args?: SelectSubset<T, DayLaborerFindFirstOrThrowArgs<ExtArgs>>): Prisma__DayLaborerClient<$Result.GetResult<Prisma.$DayLaborerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DayLaborers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DayLaborerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DayLaborers
     * const dayLaborers = await prisma.dayLaborer.findMany()
     * 
     * // Get first 10 DayLaborers
     * const dayLaborers = await prisma.dayLaborer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dayLaborerWithIdOnly = await prisma.dayLaborer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DayLaborerFindManyArgs>(args?: SelectSubset<T, DayLaborerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DayLaborerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DayLaborer.
     * @param {DayLaborerCreateArgs} args - Arguments to create a DayLaborer.
     * @example
     * // Create one DayLaborer
     * const DayLaborer = await prisma.dayLaborer.create({
     *   data: {
     *     // ... data to create a DayLaborer
     *   }
     * })
     * 
     */
    create<T extends DayLaborerCreateArgs>(args: SelectSubset<T, DayLaborerCreateArgs<ExtArgs>>): Prisma__DayLaborerClient<$Result.GetResult<Prisma.$DayLaborerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DayLaborers.
     * @param {DayLaborerCreateManyArgs} args - Arguments to create many DayLaborers.
     * @example
     * // Create many DayLaborers
     * const dayLaborer = await prisma.dayLaborer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DayLaborerCreateManyArgs>(args?: SelectSubset<T, DayLaborerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DayLaborers and returns the data saved in the database.
     * @param {DayLaborerCreateManyAndReturnArgs} args - Arguments to create many DayLaborers.
     * @example
     * // Create many DayLaborers
     * const dayLaborer = await prisma.dayLaborer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DayLaborers and only return the `id`
     * const dayLaborerWithIdOnly = await prisma.dayLaborer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DayLaborerCreateManyAndReturnArgs>(args?: SelectSubset<T, DayLaborerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DayLaborerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DayLaborer.
     * @param {DayLaborerDeleteArgs} args - Arguments to delete one DayLaborer.
     * @example
     * // Delete one DayLaborer
     * const DayLaborer = await prisma.dayLaborer.delete({
     *   where: {
     *     // ... filter to delete one DayLaborer
     *   }
     * })
     * 
     */
    delete<T extends DayLaborerDeleteArgs>(args: SelectSubset<T, DayLaborerDeleteArgs<ExtArgs>>): Prisma__DayLaborerClient<$Result.GetResult<Prisma.$DayLaborerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DayLaborer.
     * @param {DayLaborerUpdateArgs} args - Arguments to update one DayLaborer.
     * @example
     * // Update one DayLaborer
     * const dayLaborer = await prisma.dayLaborer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DayLaborerUpdateArgs>(args: SelectSubset<T, DayLaborerUpdateArgs<ExtArgs>>): Prisma__DayLaborerClient<$Result.GetResult<Prisma.$DayLaborerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DayLaborers.
     * @param {DayLaborerDeleteManyArgs} args - Arguments to filter DayLaborers to delete.
     * @example
     * // Delete a few DayLaborers
     * const { count } = await prisma.dayLaborer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DayLaborerDeleteManyArgs>(args?: SelectSubset<T, DayLaborerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DayLaborers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DayLaborerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DayLaborers
     * const dayLaborer = await prisma.dayLaborer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DayLaborerUpdateManyArgs>(args: SelectSubset<T, DayLaborerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DayLaborers and returns the data updated in the database.
     * @param {DayLaborerUpdateManyAndReturnArgs} args - Arguments to update many DayLaborers.
     * @example
     * // Update many DayLaborers
     * const dayLaborer = await prisma.dayLaborer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DayLaborers and only return the `id`
     * const dayLaborerWithIdOnly = await prisma.dayLaborer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DayLaborerUpdateManyAndReturnArgs>(args: SelectSubset<T, DayLaborerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DayLaborerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DayLaborer.
     * @param {DayLaborerUpsertArgs} args - Arguments to update or create a DayLaborer.
     * @example
     * // Update or create a DayLaborer
     * const dayLaborer = await prisma.dayLaborer.upsert({
     *   create: {
     *     // ... data to create a DayLaborer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DayLaborer we want to update
     *   }
     * })
     */
    upsert<T extends DayLaborerUpsertArgs>(args: SelectSubset<T, DayLaborerUpsertArgs<ExtArgs>>): Prisma__DayLaborerClient<$Result.GetResult<Prisma.$DayLaborerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DayLaborers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DayLaborerCountArgs} args - Arguments to filter DayLaborers to count.
     * @example
     * // Count the number of DayLaborers
     * const count = await prisma.dayLaborer.count({
     *   where: {
     *     // ... the filter for the DayLaborers we want to count
     *   }
     * })
    **/
    count<T extends DayLaborerCountArgs>(
      args?: Subset<T, DayLaborerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DayLaborerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DayLaborer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DayLaborerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DayLaborerAggregateArgs>(args: Subset<T, DayLaborerAggregateArgs>): Prisma.PrismaPromise<GetDayLaborerAggregateType<T>>

    /**
     * Group by DayLaborer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DayLaborerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DayLaborerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DayLaborerGroupByArgs['orderBy'] }
        : { orderBy?: DayLaborerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DayLaborerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDayLaborerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DayLaborer model
   */
  readonly fields: DayLaborerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DayLaborer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DayLaborerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    talentPool<T extends TalentPoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TalentPoolDefaultArgs<ExtArgs>>): Prisma__TalentPoolClient<$Result.GetResult<Prisma.$TalentPoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DayLaborer model
   */
  interface DayLaborerFieldRefs {
    readonly id: FieldRef<"DayLaborer", 'Int'>
    readonly talentPoolId: FieldRef<"DayLaborer", 'Int'>
    readonly companyId: FieldRef<"DayLaborer", 'Int'>
    readonly createdAt: FieldRef<"DayLaborer", 'DateTime'>
    readonly updatedAt: FieldRef<"DayLaborer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DayLaborer findUnique
   */
  export type DayLaborerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayLaborer
     */
    select?: DayLaborerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DayLaborer
     */
    omit?: DayLaborerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayLaborerInclude<ExtArgs> | null
    /**
     * Filter, which DayLaborer to fetch.
     */
    where: DayLaborerWhereUniqueInput
  }

  /**
   * DayLaborer findUniqueOrThrow
   */
  export type DayLaborerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayLaborer
     */
    select?: DayLaborerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DayLaborer
     */
    omit?: DayLaborerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayLaborerInclude<ExtArgs> | null
    /**
     * Filter, which DayLaborer to fetch.
     */
    where: DayLaborerWhereUniqueInput
  }

  /**
   * DayLaborer findFirst
   */
  export type DayLaborerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayLaborer
     */
    select?: DayLaborerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DayLaborer
     */
    omit?: DayLaborerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayLaborerInclude<ExtArgs> | null
    /**
     * Filter, which DayLaborer to fetch.
     */
    where?: DayLaborerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DayLaborers to fetch.
     */
    orderBy?: DayLaborerOrderByWithRelationInput | DayLaborerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DayLaborers.
     */
    cursor?: DayLaborerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DayLaborers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DayLaborers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DayLaborers.
     */
    distinct?: DayLaborerScalarFieldEnum | DayLaborerScalarFieldEnum[]
  }

  /**
   * DayLaborer findFirstOrThrow
   */
  export type DayLaborerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayLaborer
     */
    select?: DayLaborerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DayLaborer
     */
    omit?: DayLaborerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayLaborerInclude<ExtArgs> | null
    /**
     * Filter, which DayLaborer to fetch.
     */
    where?: DayLaborerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DayLaborers to fetch.
     */
    orderBy?: DayLaborerOrderByWithRelationInput | DayLaborerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DayLaborers.
     */
    cursor?: DayLaborerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DayLaborers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DayLaborers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DayLaborers.
     */
    distinct?: DayLaborerScalarFieldEnum | DayLaborerScalarFieldEnum[]
  }

  /**
   * DayLaborer findMany
   */
  export type DayLaborerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayLaborer
     */
    select?: DayLaborerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DayLaborer
     */
    omit?: DayLaborerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayLaborerInclude<ExtArgs> | null
    /**
     * Filter, which DayLaborers to fetch.
     */
    where?: DayLaborerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DayLaborers to fetch.
     */
    orderBy?: DayLaborerOrderByWithRelationInput | DayLaborerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DayLaborers.
     */
    cursor?: DayLaborerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DayLaborers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DayLaborers.
     */
    skip?: number
    distinct?: DayLaborerScalarFieldEnum | DayLaborerScalarFieldEnum[]
  }

  /**
   * DayLaborer create
   */
  export type DayLaborerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayLaborer
     */
    select?: DayLaborerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DayLaborer
     */
    omit?: DayLaborerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayLaborerInclude<ExtArgs> | null
    /**
     * The data needed to create a DayLaborer.
     */
    data: XOR<DayLaborerCreateInput, DayLaborerUncheckedCreateInput>
  }

  /**
   * DayLaborer createMany
   */
  export type DayLaborerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DayLaborers.
     */
    data: DayLaborerCreateManyInput | DayLaborerCreateManyInput[]
  }

  /**
   * DayLaborer createManyAndReturn
   */
  export type DayLaborerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayLaborer
     */
    select?: DayLaborerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DayLaborer
     */
    omit?: DayLaborerOmit<ExtArgs> | null
    /**
     * The data used to create many DayLaborers.
     */
    data: DayLaborerCreateManyInput | DayLaborerCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayLaborerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DayLaborer update
   */
  export type DayLaborerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayLaborer
     */
    select?: DayLaborerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DayLaborer
     */
    omit?: DayLaborerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayLaborerInclude<ExtArgs> | null
    /**
     * The data needed to update a DayLaborer.
     */
    data: XOR<DayLaborerUpdateInput, DayLaborerUncheckedUpdateInput>
    /**
     * Choose, which DayLaborer to update.
     */
    where: DayLaborerWhereUniqueInput
  }

  /**
   * DayLaborer updateMany
   */
  export type DayLaborerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DayLaborers.
     */
    data: XOR<DayLaborerUpdateManyMutationInput, DayLaborerUncheckedUpdateManyInput>
    /**
     * Filter which DayLaborers to update
     */
    where?: DayLaborerWhereInput
    /**
     * Limit how many DayLaborers to update.
     */
    limit?: number
  }

  /**
   * DayLaborer updateManyAndReturn
   */
  export type DayLaborerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayLaborer
     */
    select?: DayLaborerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DayLaborer
     */
    omit?: DayLaborerOmit<ExtArgs> | null
    /**
     * The data used to update DayLaborers.
     */
    data: XOR<DayLaborerUpdateManyMutationInput, DayLaborerUncheckedUpdateManyInput>
    /**
     * Filter which DayLaborers to update
     */
    where?: DayLaborerWhereInput
    /**
     * Limit how many DayLaborers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayLaborerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DayLaborer upsert
   */
  export type DayLaborerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayLaborer
     */
    select?: DayLaborerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DayLaborer
     */
    omit?: DayLaborerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayLaborerInclude<ExtArgs> | null
    /**
     * The filter to search for the DayLaborer to update in case it exists.
     */
    where: DayLaborerWhereUniqueInput
    /**
     * In case the DayLaborer found by the `where` argument doesn't exist, create a new DayLaborer with this data.
     */
    create: XOR<DayLaborerCreateInput, DayLaborerUncheckedCreateInput>
    /**
     * In case the DayLaborer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DayLaborerUpdateInput, DayLaborerUncheckedUpdateInput>
  }

  /**
   * DayLaborer delete
   */
  export type DayLaborerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayLaborer
     */
    select?: DayLaborerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DayLaborer
     */
    omit?: DayLaborerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayLaborerInclude<ExtArgs> | null
    /**
     * Filter which DayLaborer to delete.
     */
    where: DayLaborerWhereUniqueInput
  }

  /**
   * DayLaborer deleteMany
   */
  export type DayLaborerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DayLaborers to delete
     */
    where?: DayLaborerWhereInput
    /**
     * Limit how many DayLaborers to delete.
     */
    limit?: number
  }

  /**
   * DayLaborer without action
   */
  export type DayLaborerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayLaborer
     */
    select?: DayLaborerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DayLaborer
     */
    omit?: DayLaborerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayLaborerInclude<ExtArgs> | null
  }


  /**
   * Model Owner
   */

  export type AggregateOwner = {
    _count: OwnerCountAggregateOutputType | null
    _avg: OwnerAvgAggregateOutputType | null
    _sum: OwnerSumAggregateOutputType | null
    _min: OwnerMinAggregateOutputType | null
    _max: OwnerMaxAggregateOutputType | null
  }

  export type OwnerAvgAggregateOutputType = {
    id: number | null
    employeeId: number | null
    companyId: number | null
  }

  export type OwnerSumAggregateOutputType = {
    id: number | null
    employeeId: number | null
    companyId: number | null
  }

  export type OwnerMinAggregateOutputType = {
    id: number | null
    employeeId: number | null
    companyId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OwnerMaxAggregateOutputType = {
    id: number | null
    employeeId: number | null
    companyId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OwnerCountAggregateOutputType = {
    id: number
    employeeId: number
    companyId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OwnerAvgAggregateInputType = {
    id?: true
    employeeId?: true
    companyId?: true
  }

  export type OwnerSumAggregateInputType = {
    id?: true
    employeeId?: true
    companyId?: true
  }

  export type OwnerMinAggregateInputType = {
    id?: true
    employeeId?: true
    companyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OwnerMaxAggregateInputType = {
    id?: true
    employeeId?: true
    companyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OwnerCountAggregateInputType = {
    id?: true
    employeeId?: true
    companyId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OwnerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Owner to aggregate.
     */
    where?: OwnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Owners to fetch.
     */
    orderBy?: OwnerOrderByWithRelationInput | OwnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OwnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Owners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Owners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Owners
    **/
    _count?: true | OwnerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OwnerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OwnerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OwnerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OwnerMaxAggregateInputType
  }

  export type GetOwnerAggregateType<T extends OwnerAggregateArgs> = {
        [P in keyof T & keyof AggregateOwner]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOwner[P]>
      : GetScalarType<T[P], AggregateOwner[P]>
  }




  export type OwnerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OwnerWhereInput
    orderBy?: OwnerOrderByWithAggregationInput | OwnerOrderByWithAggregationInput[]
    by: OwnerScalarFieldEnum[] | OwnerScalarFieldEnum
    having?: OwnerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OwnerCountAggregateInputType | true
    _avg?: OwnerAvgAggregateInputType
    _sum?: OwnerSumAggregateInputType
    _min?: OwnerMinAggregateInputType
    _max?: OwnerMaxAggregateInputType
  }

  export type OwnerGroupByOutputType = {
    id: number
    employeeId: number
    companyId: number
    createdAt: Date
    updatedAt: Date
    _count: OwnerCountAggregateOutputType | null
    _avg: OwnerAvgAggregateOutputType | null
    _sum: OwnerSumAggregateOutputType | null
    _min: OwnerMinAggregateOutputType | null
    _max: OwnerMaxAggregateOutputType | null
  }

  type GetOwnerGroupByPayload<T extends OwnerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OwnerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OwnerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OwnerGroupByOutputType[P]>
            : GetScalarType<T[P], OwnerGroupByOutputType[P]>
        }
      >
    >


  export type OwnerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["owner"]>

  export type OwnerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["owner"]>

  export type OwnerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["owner"]>

  export type OwnerSelectScalar = {
    id?: boolean
    employeeId?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OwnerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeId" | "companyId" | "createdAt" | "updatedAt", ExtArgs["result"]["owner"]>
  export type OwnerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type OwnerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type OwnerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $OwnerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Owner"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      employee: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      employeeId: number
      companyId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["owner"]>
    composites: {}
  }

  type OwnerGetPayload<S extends boolean | null | undefined | OwnerDefaultArgs> = $Result.GetResult<Prisma.$OwnerPayload, S>

  type OwnerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OwnerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OwnerCountAggregateInputType | true
    }

  export interface OwnerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Owner'], meta: { name: 'Owner' } }
    /**
     * Find zero or one Owner that matches the filter.
     * @param {OwnerFindUniqueArgs} args - Arguments to find a Owner
     * @example
     * // Get one Owner
     * const owner = await prisma.owner.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OwnerFindUniqueArgs>(args: SelectSubset<T, OwnerFindUniqueArgs<ExtArgs>>): Prisma__OwnerClient<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Owner that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OwnerFindUniqueOrThrowArgs} args - Arguments to find a Owner
     * @example
     * // Get one Owner
     * const owner = await prisma.owner.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OwnerFindUniqueOrThrowArgs>(args: SelectSubset<T, OwnerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OwnerClient<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Owner that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OwnerFindFirstArgs} args - Arguments to find a Owner
     * @example
     * // Get one Owner
     * const owner = await prisma.owner.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OwnerFindFirstArgs>(args?: SelectSubset<T, OwnerFindFirstArgs<ExtArgs>>): Prisma__OwnerClient<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Owner that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OwnerFindFirstOrThrowArgs} args - Arguments to find a Owner
     * @example
     * // Get one Owner
     * const owner = await prisma.owner.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OwnerFindFirstOrThrowArgs>(args?: SelectSubset<T, OwnerFindFirstOrThrowArgs<ExtArgs>>): Prisma__OwnerClient<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Owners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OwnerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Owners
     * const owners = await prisma.owner.findMany()
     * 
     * // Get first 10 Owners
     * const owners = await prisma.owner.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ownerWithIdOnly = await prisma.owner.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OwnerFindManyArgs>(args?: SelectSubset<T, OwnerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Owner.
     * @param {OwnerCreateArgs} args - Arguments to create a Owner.
     * @example
     * // Create one Owner
     * const Owner = await prisma.owner.create({
     *   data: {
     *     // ... data to create a Owner
     *   }
     * })
     * 
     */
    create<T extends OwnerCreateArgs>(args: SelectSubset<T, OwnerCreateArgs<ExtArgs>>): Prisma__OwnerClient<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Owners.
     * @param {OwnerCreateManyArgs} args - Arguments to create many Owners.
     * @example
     * // Create many Owners
     * const owner = await prisma.owner.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OwnerCreateManyArgs>(args?: SelectSubset<T, OwnerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Owners and returns the data saved in the database.
     * @param {OwnerCreateManyAndReturnArgs} args - Arguments to create many Owners.
     * @example
     * // Create many Owners
     * const owner = await prisma.owner.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Owners and only return the `id`
     * const ownerWithIdOnly = await prisma.owner.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OwnerCreateManyAndReturnArgs>(args?: SelectSubset<T, OwnerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Owner.
     * @param {OwnerDeleteArgs} args - Arguments to delete one Owner.
     * @example
     * // Delete one Owner
     * const Owner = await prisma.owner.delete({
     *   where: {
     *     // ... filter to delete one Owner
     *   }
     * })
     * 
     */
    delete<T extends OwnerDeleteArgs>(args: SelectSubset<T, OwnerDeleteArgs<ExtArgs>>): Prisma__OwnerClient<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Owner.
     * @param {OwnerUpdateArgs} args - Arguments to update one Owner.
     * @example
     * // Update one Owner
     * const owner = await prisma.owner.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OwnerUpdateArgs>(args: SelectSubset<T, OwnerUpdateArgs<ExtArgs>>): Prisma__OwnerClient<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Owners.
     * @param {OwnerDeleteManyArgs} args - Arguments to filter Owners to delete.
     * @example
     * // Delete a few Owners
     * const { count } = await prisma.owner.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OwnerDeleteManyArgs>(args?: SelectSubset<T, OwnerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Owners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OwnerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Owners
     * const owner = await prisma.owner.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OwnerUpdateManyArgs>(args: SelectSubset<T, OwnerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Owners and returns the data updated in the database.
     * @param {OwnerUpdateManyAndReturnArgs} args - Arguments to update many Owners.
     * @example
     * // Update many Owners
     * const owner = await prisma.owner.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Owners and only return the `id`
     * const ownerWithIdOnly = await prisma.owner.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OwnerUpdateManyAndReturnArgs>(args: SelectSubset<T, OwnerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Owner.
     * @param {OwnerUpsertArgs} args - Arguments to update or create a Owner.
     * @example
     * // Update or create a Owner
     * const owner = await prisma.owner.upsert({
     *   create: {
     *     // ... data to create a Owner
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Owner we want to update
     *   }
     * })
     */
    upsert<T extends OwnerUpsertArgs>(args: SelectSubset<T, OwnerUpsertArgs<ExtArgs>>): Prisma__OwnerClient<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Owners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OwnerCountArgs} args - Arguments to filter Owners to count.
     * @example
     * // Count the number of Owners
     * const count = await prisma.owner.count({
     *   where: {
     *     // ... the filter for the Owners we want to count
     *   }
     * })
    **/
    count<T extends OwnerCountArgs>(
      args?: Subset<T, OwnerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OwnerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Owner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OwnerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OwnerAggregateArgs>(args: Subset<T, OwnerAggregateArgs>): Prisma.PrismaPromise<GetOwnerAggregateType<T>>

    /**
     * Group by Owner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OwnerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OwnerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OwnerGroupByArgs['orderBy'] }
        : { orderBy?: OwnerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OwnerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOwnerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Owner model
   */
  readonly fields: OwnerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Owner.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OwnerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Owner model
   */
  interface OwnerFieldRefs {
    readonly id: FieldRef<"Owner", 'Int'>
    readonly employeeId: FieldRef<"Owner", 'Int'>
    readonly companyId: FieldRef<"Owner", 'Int'>
    readonly createdAt: FieldRef<"Owner", 'DateTime'>
    readonly updatedAt: FieldRef<"Owner", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Owner findUnique
   */
  export type OwnerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerInclude<ExtArgs> | null
    /**
     * Filter, which Owner to fetch.
     */
    where: OwnerWhereUniqueInput
  }

  /**
   * Owner findUniqueOrThrow
   */
  export type OwnerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerInclude<ExtArgs> | null
    /**
     * Filter, which Owner to fetch.
     */
    where: OwnerWhereUniqueInput
  }

  /**
   * Owner findFirst
   */
  export type OwnerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerInclude<ExtArgs> | null
    /**
     * Filter, which Owner to fetch.
     */
    where?: OwnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Owners to fetch.
     */
    orderBy?: OwnerOrderByWithRelationInput | OwnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Owners.
     */
    cursor?: OwnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Owners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Owners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Owners.
     */
    distinct?: OwnerScalarFieldEnum | OwnerScalarFieldEnum[]
  }

  /**
   * Owner findFirstOrThrow
   */
  export type OwnerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerInclude<ExtArgs> | null
    /**
     * Filter, which Owner to fetch.
     */
    where?: OwnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Owners to fetch.
     */
    orderBy?: OwnerOrderByWithRelationInput | OwnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Owners.
     */
    cursor?: OwnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Owners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Owners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Owners.
     */
    distinct?: OwnerScalarFieldEnum | OwnerScalarFieldEnum[]
  }

  /**
   * Owner findMany
   */
  export type OwnerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerInclude<ExtArgs> | null
    /**
     * Filter, which Owners to fetch.
     */
    where?: OwnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Owners to fetch.
     */
    orderBy?: OwnerOrderByWithRelationInput | OwnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Owners.
     */
    cursor?: OwnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Owners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Owners.
     */
    skip?: number
    distinct?: OwnerScalarFieldEnum | OwnerScalarFieldEnum[]
  }

  /**
   * Owner create
   */
  export type OwnerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerInclude<ExtArgs> | null
    /**
     * The data needed to create a Owner.
     */
    data: XOR<OwnerCreateInput, OwnerUncheckedCreateInput>
  }

  /**
   * Owner createMany
   */
  export type OwnerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Owners.
     */
    data: OwnerCreateManyInput | OwnerCreateManyInput[]
  }

  /**
   * Owner createManyAndReturn
   */
  export type OwnerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * The data used to create many Owners.
     */
    data: OwnerCreateManyInput | OwnerCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Owner update
   */
  export type OwnerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerInclude<ExtArgs> | null
    /**
     * The data needed to update a Owner.
     */
    data: XOR<OwnerUpdateInput, OwnerUncheckedUpdateInput>
    /**
     * Choose, which Owner to update.
     */
    where: OwnerWhereUniqueInput
  }

  /**
   * Owner updateMany
   */
  export type OwnerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Owners.
     */
    data: XOR<OwnerUpdateManyMutationInput, OwnerUncheckedUpdateManyInput>
    /**
     * Filter which Owners to update
     */
    where?: OwnerWhereInput
    /**
     * Limit how many Owners to update.
     */
    limit?: number
  }

  /**
   * Owner updateManyAndReturn
   */
  export type OwnerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * The data used to update Owners.
     */
    data: XOR<OwnerUpdateManyMutationInput, OwnerUncheckedUpdateManyInput>
    /**
     * Filter which Owners to update
     */
    where?: OwnerWhereInput
    /**
     * Limit how many Owners to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Owner upsert
   */
  export type OwnerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerInclude<ExtArgs> | null
    /**
     * The filter to search for the Owner to update in case it exists.
     */
    where: OwnerWhereUniqueInput
    /**
     * In case the Owner found by the `where` argument doesn't exist, create a new Owner with this data.
     */
    create: XOR<OwnerCreateInput, OwnerUncheckedCreateInput>
    /**
     * In case the Owner was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OwnerUpdateInput, OwnerUncheckedUpdateInput>
  }

  /**
   * Owner delete
   */
  export type OwnerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerInclude<ExtArgs> | null
    /**
     * Filter which Owner to delete.
     */
    where: OwnerWhereUniqueInput
  }

  /**
   * Owner deleteMany
   */
  export type OwnerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Owners to delete
     */
    where?: OwnerWhereInput
    /**
     * Limit how many Owners to delete.
     */
    limit?: number
  }

  /**
   * Owner without action
   */
  export type OwnerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerInclude<ExtArgs> | null
  }


  /**
   * Model ProjectOwner
   */

  export type AggregateProjectOwner = {
    _count: ProjectOwnerCountAggregateOutputType | null
    _avg: ProjectOwnerAvgAggregateOutputType | null
    _sum: ProjectOwnerSumAggregateOutputType | null
    _min: ProjectOwnerMinAggregateOutputType | null
    _max: ProjectOwnerMaxAggregateOutputType | null
  }

  export type ProjectOwnerAvgAggregateOutputType = {
    id: number | null
    projectId: number | null
  }

  export type ProjectOwnerSumAggregateOutputType = {
    id: number | null
    projectId: number | null
  }

  export type ProjectOwnerMinAggregateOutputType = {
    id: number | null
    projectId: number | null
    name: string | null
    address: string | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectOwnerMaxAggregateOutputType = {
    id: number | null
    projectId: number | null
    name: string | null
    address: string | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectOwnerCountAggregateOutputType = {
    id: number
    projectId: number
    name: number
    address: number
    phone: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProjectOwnerAvgAggregateInputType = {
    id?: true
    projectId?: true
  }

  export type ProjectOwnerSumAggregateInputType = {
    id?: true
    projectId?: true
  }

  export type ProjectOwnerMinAggregateInputType = {
    id?: true
    projectId?: true
    name?: true
    address?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectOwnerMaxAggregateInputType = {
    id?: true
    projectId?: true
    name?: true
    address?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectOwnerCountAggregateInputType = {
    id?: true
    projectId?: true
    name?: true
    address?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProjectOwnerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectOwner to aggregate.
     */
    where?: ProjectOwnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectOwners to fetch.
     */
    orderBy?: ProjectOwnerOrderByWithRelationInput | ProjectOwnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectOwnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectOwners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectOwners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProjectOwners
    **/
    _count?: true | ProjectOwnerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectOwnerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectOwnerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectOwnerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectOwnerMaxAggregateInputType
  }

  export type GetProjectOwnerAggregateType<T extends ProjectOwnerAggregateArgs> = {
        [P in keyof T & keyof AggregateProjectOwner]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectOwner[P]>
      : GetScalarType<T[P], AggregateProjectOwner[P]>
  }




  export type ProjectOwnerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectOwnerWhereInput
    orderBy?: ProjectOwnerOrderByWithAggregationInput | ProjectOwnerOrderByWithAggregationInput[]
    by: ProjectOwnerScalarFieldEnum[] | ProjectOwnerScalarFieldEnum
    having?: ProjectOwnerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectOwnerCountAggregateInputType | true
    _avg?: ProjectOwnerAvgAggregateInputType
    _sum?: ProjectOwnerSumAggregateInputType
    _min?: ProjectOwnerMinAggregateInputType
    _max?: ProjectOwnerMaxAggregateInputType
  }

  export type ProjectOwnerGroupByOutputType = {
    id: number
    projectId: number
    name: string
    address: string
    phone: string
    createdAt: Date
    updatedAt: Date
    _count: ProjectOwnerCountAggregateOutputType | null
    _avg: ProjectOwnerAvgAggregateOutputType | null
    _sum: ProjectOwnerSumAggregateOutputType | null
    _min: ProjectOwnerMinAggregateOutputType | null
    _max: ProjectOwnerMaxAggregateOutputType | null
  }

  type GetProjectOwnerGroupByPayload<T extends ProjectOwnerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectOwnerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectOwnerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectOwnerGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectOwnerGroupByOutputType[P]>
        }
      >
    >


  export type ProjectOwnerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectOwner"]>

  export type ProjectOwnerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectOwner"]>

  export type ProjectOwnerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectOwner"]>

  export type ProjectOwnerSelectScalar = {
    id?: boolean
    projectId?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProjectOwnerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "projectId" | "name" | "address" | "phone" | "createdAt" | "updatedAt", ExtArgs["result"]["projectOwner"]>
  export type ProjectOwnerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type ProjectOwnerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type ProjectOwnerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $ProjectOwnerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProjectOwner"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      projectId: number
      name: string
      address: string
      phone: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["projectOwner"]>
    composites: {}
  }

  type ProjectOwnerGetPayload<S extends boolean | null | undefined | ProjectOwnerDefaultArgs> = $Result.GetResult<Prisma.$ProjectOwnerPayload, S>

  type ProjectOwnerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProjectOwnerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectOwnerCountAggregateInputType | true
    }

  export interface ProjectOwnerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectOwner'], meta: { name: 'ProjectOwner' } }
    /**
     * Find zero or one ProjectOwner that matches the filter.
     * @param {ProjectOwnerFindUniqueArgs} args - Arguments to find a ProjectOwner
     * @example
     * // Get one ProjectOwner
     * const projectOwner = await prisma.projectOwner.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectOwnerFindUniqueArgs>(args: SelectSubset<T, ProjectOwnerFindUniqueArgs<ExtArgs>>): Prisma__ProjectOwnerClient<$Result.GetResult<Prisma.$ProjectOwnerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProjectOwner that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjectOwnerFindUniqueOrThrowArgs} args - Arguments to find a ProjectOwner
     * @example
     * // Get one ProjectOwner
     * const projectOwner = await prisma.projectOwner.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectOwnerFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectOwnerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectOwnerClient<$Result.GetResult<Prisma.$ProjectOwnerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProjectOwner that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectOwnerFindFirstArgs} args - Arguments to find a ProjectOwner
     * @example
     * // Get one ProjectOwner
     * const projectOwner = await prisma.projectOwner.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectOwnerFindFirstArgs>(args?: SelectSubset<T, ProjectOwnerFindFirstArgs<ExtArgs>>): Prisma__ProjectOwnerClient<$Result.GetResult<Prisma.$ProjectOwnerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProjectOwner that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectOwnerFindFirstOrThrowArgs} args - Arguments to find a ProjectOwner
     * @example
     * // Get one ProjectOwner
     * const projectOwner = await prisma.projectOwner.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectOwnerFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectOwnerFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectOwnerClient<$Result.GetResult<Prisma.$ProjectOwnerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProjectOwners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectOwnerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProjectOwners
     * const projectOwners = await prisma.projectOwner.findMany()
     * 
     * // Get first 10 ProjectOwners
     * const projectOwners = await prisma.projectOwner.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectOwnerWithIdOnly = await prisma.projectOwner.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectOwnerFindManyArgs>(args?: SelectSubset<T, ProjectOwnerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectOwnerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProjectOwner.
     * @param {ProjectOwnerCreateArgs} args - Arguments to create a ProjectOwner.
     * @example
     * // Create one ProjectOwner
     * const ProjectOwner = await prisma.projectOwner.create({
     *   data: {
     *     // ... data to create a ProjectOwner
     *   }
     * })
     * 
     */
    create<T extends ProjectOwnerCreateArgs>(args: SelectSubset<T, ProjectOwnerCreateArgs<ExtArgs>>): Prisma__ProjectOwnerClient<$Result.GetResult<Prisma.$ProjectOwnerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProjectOwners.
     * @param {ProjectOwnerCreateManyArgs} args - Arguments to create many ProjectOwners.
     * @example
     * // Create many ProjectOwners
     * const projectOwner = await prisma.projectOwner.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectOwnerCreateManyArgs>(args?: SelectSubset<T, ProjectOwnerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProjectOwners and returns the data saved in the database.
     * @param {ProjectOwnerCreateManyAndReturnArgs} args - Arguments to create many ProjectOwners.
     * @example
     * // Create many ProjectOwners
     * const projectOwner = await prisma.projectOwner.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProjectOwners and only return the `id`
     * const projectOwnerWithIdOnly = await prisma.projectOwner.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectOwnerCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectOwnerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectOwnerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProjectOwner.
     * @param {ProjectOwnerDeleteArgs} args - Arguments to delete one ProjectOwner.
     * @example
     * // Delete one ProjectOwner
     * const ProjectOwner = await prisma.projectOwner.delete({
     *   where: {
     *     // ... filter to delete one ProjectOwner
     *   }
     * })
     * 
     */
    delete<T extends ProjectOwnerDeleteArgs>(args: SelectSubset<T, ProjectOwnerDeleteArgs<ExtArgs>>): Prisma__ProjectOwnerClient<$Result.GetResult<Prisma.$ProjectOwnerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProjectOwner.
     * @param {ProjectOwnerUpdateArgs} args - Arguments to update one ProjectOwner.
     * @example
     * // Update one ProjectOwner
     * const projectOwner = await prisma.projectOwner.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectOwnerUpdateArgs>(args: SelectSubset<T, ProjectOwnerUpdateArgs<ExtArgs>>): Prisma__ProjectOwnerClient<$Result.GetResult<Prisma.$ProjectOwnerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProjectOwners.
     * @param {ProjectOwnerDeleteManyArgs} args - Arguments to filter ProjectOwners to delete.
     * @example
     * // Delete a few ProjectOwners
     * const { count } = await prisma.projectOwner.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectOwnerDeleteManyArgs>(args?: SelectSubset<T, ProjectOwnerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectOwners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectOwnerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProjectOwners
     * const projectOwner = await prisma.projectOwner.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectOwnerUpdateManyArgs>(args: SelectSubset<T, ProjectOwnerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectOwners and returns the data updated in the database.
     * @param {ProjectOwnerUpdateManyAndReturnArgs} args - Arguments to update many ProjectOwners.
     * @example
     * // Update many ProjectOwners
     * const projectOwner = await prisma.projectOwner.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProjectOwners and only return the `id`
     * const projectOwnerWithIdOnly = await prisma.projectOwner.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProjectOwnerUpdateManyAndReturnArgs>(args: SelectSubset<T, ProjectOwnerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectOwnerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProjectOwner.
     * @param {ProjectOwnerUpsertArgs} args - Arguments to update or create a ProjectOwner.
     * @example
     * // Update or create a ProjectOwner
     * const projectOwner = await prisma.projectOwner.upsert({
     *   create: {
     *     // ... data to create a ProjectOwner
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProjectOwner we want to update
     *   }
     * })
     */
    upsert<T extends ProjectOwnerUpsertArgs>(args: SelectSubset<T, ProjectOwnerUpsertArgs<ExtArgs>>): Prisma__ProjectOwnerClient<$Result.GetResult<Prisma.$ProjectOwnerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProjectOwners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectOwnerCountArgs} args - Arguments to filter ProjectOwners to count.
     * @example
     * // Count the number of ProjectOwners
     * const count = await prisma.projectOwner.count({
     *   where: {
     *     // ... the filter for the ProjectOwners we want to count
     *   }
     * })
    **/
    count<T extends ProjectOwnerCountArgs>(
      args?: Subset<T, ProjectOwnerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectOwnerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProjectOwner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectOwnerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectOwnerAggregateArgs>(args: Subset<T, ProjectOwnerAggregateArgs>): Prisma.PrismaPromise<GetProjectOwnerAggregateType<T>>

    /**
     * Group by ProjectOwner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectOwnerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectOwnerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectOwnerGroupByArgs['orderBy'] }
        : { orderBy?: ProjectOwnerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectOwnerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectOwnerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProjectOwner model
   */
  readonly fields: ProjectOwnerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProjectOwner.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectOwnerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProjectOwner model
   */
  interface ProjectOwnerFieldRefs {
    readonly id: FieldRef<"ProjectOwner", 'Int'>
    readonly projectId: FieldRef<"ProjectOwner", 'Int'>
    readonly name: FieldRef<"ProjectOwner", 'String'>
    readonly address: FieldRef<"ProjectOwner", 'String'>
    readonly phone: FieldRef<"ProjectOwner", 'String'>
    readonly createdAt: FieldRef<"ProjectOwner", 'DateTime'>
    readonly updatedAt: FieldRef<"ProjectOwner", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProjectOwner findUnique
   */
  export type ProjectOwnerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectOwner
     */
    select?: ProjectOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectOwner
     */
    omit?: ProjectOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectOwnerInclude<ExtArgs> | null
    /**
     * Filter, which ProjectOwner to fetch.
     */
    where: ProjectOwnerWhereUniqueInput
  }

  /**
   * ProjectOwner findUniqueOrThrow
   */
  export type ProjectOwnerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectOwner
     */
    select?: ProjectOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectOwner
     */
    omit?: ProjectOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectOwnerInclude<ExtArgs> | null
    /**
     * Filter, which ProjectOwner to fetch.
     */
    where: ProjectOwnerWhereUniqueInput
  }

  /**
   * ProjectOwner findFirst
   */
  export type ProjectOwnerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectOwner
     */
    select?: ProjectOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectOwner
     */
    omit?: ProjectOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectOwnerInclude<ExtArgs> | null
    /**
     * Filter, which ProjectOwner to fetch.
     */
    where?: ProjectOwnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectOwners to fetch.
     */
    orderBy?: ProjectOwnerOrderByWithRelationInput | ProjectOwnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectOwners.
     */
    cursor?: ProjectOwnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectOwners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectOwners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectOwners.
     */
    distinct?: ProjectOwnerScalarFieldEnum | ProjectOwnerScalarFieldEnum[]
  }

  /**
   * ProjectOwner findFirstOrThrow
   */
  export type ProjectOwnerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectOwner
     */
    select?: ProjectOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectOwner
     */
    omit?: ProjectOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectOwnerInclude<ExtArgs> | null
    /**
     * Filter, which ProjectOwner to fetch.
     */
    where?: ProjectOwnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectOwners to fetch.
     */
    orderBy?: ProjectOwnerOrderByWithRelationInput | ProjectOwnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectOwners.
     */
    cursor?: ProjectOwnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectOwners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectOwners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectOwners.
     */
    distinct?: ProjectOwnerScalarFieldEnum | ProjectOwnerScalarFieldEnum[]
  }

  /**
   * ProjectOwner findMany
   */
  export type ProjectOwnerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectOwner
     */
    select?: ProjectOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectOwner
     */
    omit?: ProjectOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectOwnerInclude<ExtArgs> | null
    /**
     * Filter, which ProjectOwners to fetch.
     */
    where?: ProjectOwnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectOwners to fetch.
     */
    orderBy?: ProjectOwnerOrderByWithRelationInput | ProjectOwnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProjectOwners.
     */
    cursor?: ProjectOwnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectOwners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectOwners.
     */
    skip?: number
    distinct?: ProjectOwnerScalarFieldEnum | ProjectOwnerScalarFieldEnum[]
  }

  /**
   * ProjectOwner create
   */
  export type ProjectOwnerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectOwner
     */
    select?: ProjectOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectOwner
     */
    omit?: ProjectOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectOwnerInclude<ExtArgs> | null
    /**
     * The data needed to create a ProjectOwner.
     */
    data: XOR<ProjectOwnerCreateInput, ProjectOwnerUncheckedCreateInput>
  }

  /**
   * ProjectOwner createMany
   */
  export type ProjectOwnerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProjectOwners.
     */
    data: ProjectOwnerCreateManyInput | ProjectOwnerCreateManyInput[]
  }

  /**
   * ProjectOwner createManyAndReturn
   */
  export type ProjectOwnerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectOwner
     */
    select?: ProjectOwnerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectOwner
     */
    omit?: ProjectOwnerOmit<ExtArgs> | null
    /**
     * The data used to create many ProjectOwners.
     */
    data: ProjectOwnerCreateManyInput | ProjectOwnerCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectOwnerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProjectOwner update
   */
  export type ProjectOwnerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectOwner
     */
    select?: ProjectOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectOwner
     */
    omit?: ProjectOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectOwnerInclude<ExtArgs> | null
    /**
     * The data needed to update a ProjectOwner.
     */
    data: XOR<ProjectOwnerUpdateInput, ProjectOwnerUncheckedUpdateInput>
    /**
     * Choose, which ProjectOwner to update.
     */
    where: ProjectOwnerWhereUniqueInput
  }

  /**
   * ProjectOwner updateMany
   */
  export type ProjectOwnerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProjectOwners.
     */
    data: XOR<ProjectOwnerUpdateManyMutationInput, ProjectOwnerUncheckedUpdateManyInput>
    /**
     * Filter which ProjectOwners to update
     */
    where?: ProjectOwnerWhereInput
    /**
     * Limit how many ProjectOwners to update.
     */
    limit?: number
  }

  /**
   * ProjectOwner updateManyAndReturn
   */
  export type ProjectOwnerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectOwner
     */
    select?: ProjectOwnerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectOwner
     */
    omit?: ProjectOwnerOmit<ExtArgs> | null
    /**
     * The data used to update ProjectOwners.
     */
    data: XOR<ProjectOwnerUpdateManyMutationInput, ProjectOwnerUncheckedUpdateManyInput>
    /**
     * Filter which ProjectOwners to update
     */
    where?: ProjectOwnerWhereInput
    /**
     * Limit how many ProjectOwners to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectOwnerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProjectOwner upsert
   */
  export type ProjectOwnerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectOwner
     */
    select?: ProjectOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectOwner
     */
    omit?: ProjectOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectOwnerInclude<ExtArgs> | null
    /**
     * The filter to search for the ProjectOwner to update in case it exists.
     */
    where: ProjectOwnerWhereUniqueInput
    /**
     * In case the ProjectOwner found by the `where` argument doesn't exist, create a new ProjectOwner with this data.
     */
    create: XOR<ProjectOwnerCreateInput, ProjectOwnerUncheckedCreateInput>
    /**
     * In case the ProjectOwner was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectOwnerUpdateInput, ProjectOwnerUncheckedUpdateInput>
  }

  /**
   * ProjectOwner delete
   */
  export type ProjectOwnerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectOwner
     */
    select?: ProjectOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectOwner
     */
    omit?: ProjectOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectOwnerInclude<ExtArgs> | null
    /**
     * Filter which ProjectOwner to delete.
     */
    where: ProjectOwnerWhereUniqueInput
  }

  /**
   * ProjectOwner deleteMany
   */
  export type ProjectOwnerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectOwners to delete
     */
    where?: ProjectOwnerWhereInput
    /**
     * Limit how many ProjectOwners to delete.
     */
    limit?: number
  }

  /**
   * ProjectOwner without action
   */
  export type ProjectOwnerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectOwner
     */
    select?: ProjectOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectOwner
     */
    omit?: ProjectOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectOwnerInclude<ExtArgs> | null
  }


  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    id: number | null
    workspaceId: number | null
  }

  export type ProjectSumAggregateOutputType = {
    id: number | null
    workspaceId: number | null
  }

  export type ProjectMinAggregateOutputType = {
    id: number | null
    workspaceId: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: number | null
    workspaceId: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    workspaceId: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    id?: true
    workspaceId?: true
  }

  export type ProjectSumAggregateInputType = {
    id?: true
    workspaceId?: true
  }

  export type ProjectMinAggregateInputType = {
    id?: true
    workspaceId?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    workspaceId?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    workspaceId?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: number
    workspaceId: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    projectOwners?: boolean | Project$projectOwnersArgs<ExtArgs>
    sites?: boolean | Project$sitesArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    id?: boolean
    workspaceId?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workspaceId" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["project"]>
  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    projectOwners?: boolean | Project$projectOwnersArgs<ExtArgs>
    sites?: boolean | Project$sitesArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      workspace: Prisma.$WorkspacePayload<ExtArgs>
      projectOwners: Prisma.$ProjectOwnerPayload<ExtArgs>[]
      sites: Prisma.$SitePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      workspaceId: number
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Projects and returns the data saved in the database.
     * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects and returns the data updated in the database.
     * @param {ProjectUpdateManyAndReturnArgs} args - Arguments to update many Projects.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProjectUpdateManyAndReturnArgs>(args: SelectSubset<T, ProjectUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workspace<T extends WorkspaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceDefaultArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    projectOwners<T extends Project$projectOwnersArgs<ExtArgs> = {}>(args?: Subset<T, Project$projectOwnersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectOwnerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sites<T extends Project$sitesArgs<ExtArgs> = {}>(args?: Subset<T, Project$sitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'Int'>
    readonly workspaceId: FieldRef<"Project", 'Int'>
    readonly name: FieldRef<"Project", 'String'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
  }

  /**
   * Project createManyAndReturn
   */
  export type ProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
  }

  /**
   * Project updateManyAndReturn
   */
  export type ProjectUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to delete.
     */
    limit?: number
  }

  /**
   * Project.projectOwners
   */
  export type Project$projectOwnersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectOwner
     */
    select?: ProjectOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectOwner
     */
    omit?: ProjectOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectOwnerInclude<ExtArgs> | null
    where?: ProjectOwnerWhereInput
    orderBy?: ProjectOwnerOrderByWithRelationInput | ProjectOwnerOrderByWithRelationInput[]
    cursor?: ProjectOwnerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectOwnerScalarFieldEnum | ProjectOwnerScalarFieldEnum[]
  }

  /**
   * Project.sites
   */
  export type Project$sitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    where?: SiteWhereInput
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    cursor?: SiteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SiteScalarFieldEnum | SiteScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model Site
   */

  export type AggregateSite = {
    _count: SiteCountAggregateOutputType | null
    _avg: SiteAvgAggregateOutputType | null
    _sum: SiteSumAggregateOutputType | null
    _min: SiteMinAggregateOutputType | null
    _max: SiteMaxAggregateOutputType | null
  }

  export type SiteAvgAggregateOutputType = {
    id: number | null
    workspaceId: number | null
    projectId: number | null
    companyId: number | null
  }

  export type SiteSumAggregateOutputType = {
    id: number | null
    workspaceId: number | null
    projectId: number | null
    companyId: number | null
  }

  export type SiteMinAggregateOutputType = {
    id: number | null
    workspaceId: number | null
    projectId: number | null
    companyId: number | null
    name: string | null
    location: string | null
    startDate: Date | null
    endDate: Date | null
    managementNumber: string | null
    memo: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SiteMaxAggregateOutputType = {
    id: number | null
    workspaceId: number | null
    projectId: number | null
    companyId: number | null
    name: string | null
    location: string | null
    startDate: Date | null
    endDate: Date | null
    managementNumber: string | null
    memo: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SiteCountAggregateOutputType = {
    id: number
    workspaceId: number
    projectId: number
    companyId: number
    name: number
    location: number
    startDate: number
    endDate: number
    managementNumber: number
    memo: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SiteAvgAggregateInputType = {
    id?: true
    workspaceId?: true
    projectId?: true
    companyId?: true
  }

  export type SiteSumAggregateInputType = {
    id?: true
    workspaceId?: true
    projectId?: true
    companyId?: true
  }

  export type SiteMinAggregateInputType = {
    id?: true
    workspaceId?: true
    projectId?: true
    companyId?: true
    name?: true
    location?: true
    startDate?: true
    endDate?: true
    managementNumber?: true
    memo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SiteMaxAggregateInputType = {
    id?: true
    workspaceId?: true
    projectId?: true
    companyId?: true
    name?: true
    location?: true
    startDate?: true
    endDate?: true
    managementNumber?: true
    memo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SiteCountAggregateInputType = {
    id?: true
    workspaceId?: true
    projectId?: true
    companyId?: true
    name?: true
    location?: true
    startDate?: true
    endDate?: true
    managementNumber?: true
    memo?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SiteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Site to aggregate.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sites
    **/
    _count?: true | SiteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SiteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SiteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SiteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SiteMaxAggregateInputType
  }

  export type GetSiteAggregateType<T extends SiteAggregateArgs> = {
        [P in keyof T & keyof AggregateSite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSite[P]>
      : GetScalarType<T[P], AggregateSite[P]>
  }




  export type SiteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SiteWhereInput
    orderBy?: SiteOrderByWithAggregationInput | SiteOrderByWithAggregationInput[]
    by: SiteScalarFieldEnum[] | SiteScalarFieldEnum
    having?: SiteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SiteCountAggregateInputType | true
    _avg?: SiteAvgAggregateInputType
    _sum?: SiteSumAggregateInputType
    _min?: SiteMinAggregateInputType
    _max?: SiteMaxAggregateInputType
  }

  export type SiteGroupByOutputType = {
    id: number
    workspaceId: number
    projectId: number | null
    companyId: number
    name: string
    location: string
    startDate: Date
    endDate: Date
    managementNumber: string | null
    memo: string | null
    createdAt: Date
    updatedAt: Date
    _count: SiteCountAggregateOutputType | null
    _avg: SiteAvgAggregateOutputType | null
    _sum: SiteSumAggregateOutputType | null
    _min: SiteMinAggregateOutputType | null
    _max: SiteMaxAggregateOutputType | null
  }

  type GetSiteGroupByPayload<T extends SiteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SiteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SiteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SiteGroupByOutputType[P]>
            : GetScalarType<T[P], SiteGroupByOutputType[P]>
        }
      >
    >


  export type SiteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    projectId?: boolean
    companyId?: boolean
    name?: boolean
    location?: boolean
    startDate?: boolean
    endDate?: boolean
    managementNumber?: boolean
    memo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    project?: boolean | Site$projectArgs<ExtArgs>
    siteAttendances?: boolean | Site$siteAttendancesArgs<ExtArgs>
    _count?: boolean | SiteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["site"]>

  export type SiteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    projectId?: boolean
    companyId?: boolean
    name?: boolean
    location?: boolean
    startDate?: boolean
    endDate?: boolean
    managementNumber?: boolean
    memo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    project?: boolean | Site$projectArgs<ExtArgs>
  }, ExtArgs["result"]["site"]>

  export type SiteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    projectId?: boolean
    companyId?: boolean
    name?: boolean
    location?: boolean
    startDate?: boolean
    endDate?: boolean
    managementNumber?: boolean
    memo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    project?: boolean | Site$projectArgs<ExtArgs>
  }, ExtArgs["result"]["site"]>

  export type SiteSelectScalar = {
    id?: boolean
    workspaceId?: boolean
    projectId?: boolean
    companyId?: boolean
    name?: boolean
    location?: boolean
    startDate?: boolean
    endDate?: boolean
    managementNumber?: boolean
    memo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SiteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workspaceId" | "projectId" | "companyId" | "name" | "location" | "startDate" | "endDate" | "managementNumber" | "memo" | "createdAt" | "updatedAt", ExtArgs["result"]["site"]>
  export type SiteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    project?: boolean | Site$projectArgs<ExtArgs>
    siteAttendances?: boolean | Site$siteAttendancesArgs<ExtArgs>
    _count?: boolean | SiteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SiteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    project?: boolean | Site$projectArgs<ExtArgs>
  }
  export type SiteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    project?: boolean | Site$projectArgs<ExtArgs>
  }

  export type $SitePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Site"
    objects: {
      workspace: Prisma.$WorkspacePayload<ExtArgs>
      company: Prisma.$CompanyPayload<ExtArgs>
      project: Prisma.$ProjectPayload<ExtArgs> | null
      siteAttendances: Prisma.$SiteAttendancePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      workspaceId: number
      projectId: number | null
      companyId: number
      name: string
      location: string
      startDate: Date
      endDate: Date
      managementNumber: string | null
      memo: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["site"]>
    composites: {}
  }

  type SiteGetPayload<S extends boolean | null | undefined | SiteDefaultArgs> = $Result.GetResult<Prisma.$SitePayload, S>

  type SiteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SiteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SiteCountAggregateInputType | true
    }

  export interface SiteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Site'], meta: { name: 'Site' } }
    /**
     * Find zero or one Site that matches the filter.
     * @param {SiteFindUniqueArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SiteFindUniqueArgs>(args: SelectSubset<T, SiteFindUniqueArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Site that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SiteFindUniqueOrThrowArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SiteFindUniqueOrThrowArgs>(args: SelectSubset<T, SiteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Site that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindFirstArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SiteFindFirstArgs>(args?: SelectSubset<T, SiteFindFirstArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Site that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindFirstOrThrowArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SiteFindFirstOrThrowArgs>(args?: SelectSubset<T, SiteFindFirstOrThrowArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sites
     * const sites = await prisma.site.findMany()
     * 
     * // Get first 10 Sites
     * const sites = await prisma.site.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const siteWithIdOnly = await prisma.site.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SiteFindManyArgs>(args?: SelectSubset<T, SiteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Site.
     * @param {SiteCreateArgs} args - Arguments to create a Site.
     * @example
     * // Create one Site
     * const Site = await prisma.site.create({
     *   data: {
     *     // ... data to create a Site
     *   }
     * })
     * 
     */
    create<T extends SiteCreateArgs>(args: SelectSubset<T, SiteCreateArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sites.
     * @param {SiteCreateManyArgs} args - Arguments to create many Sites.
     * @example
     * // Create many Sites
     * const site = await prisma.site.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SiteCreateManyArgs>(args?: SelectSubset<T, SiteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sites and returns the data saved in the database.
     * @param {SiteCreateManyAndReturnArgs} args - Arguments to create many Sites.
     * @example
     * // Create many Sites
     * const site = await prisma.site.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sites and only return the `id`
     * const siteWithIdOnly = await prisma.site.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SiteCreateManyAndReturnArgs>(args?: SelectSubset<T, SiteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Site.
     * @param {SiteDeleteArgs} args - Arguments to delete one Site.
     * @example
     * // Delete one Site
     * const Site = await prisma.site.delete({
     *   where: {
     *     // ... filter to delete one Site
     *   }
     * })
     * 
     */
    delete<T extends SiteDeleteArgs>(args: SelectSubset<T, SiteDeleteArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Site.
     * @param {SiteUpdateArgs} args - Arguments to update one Site.
     * @example
     * // Update one Site
     * const site = await prisma.site.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SiteUpdateArgs>(args: SelectSubset<T, SiteUpdateArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sites.
     * @param {SiteDeleteManyArgs} args - Arguments to filter Sites to delete.
     * @example
     * // Delete a few Sites
     * const { count } = await prisma.site.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SiteDeleteManyArgs>(args?: SelectSubset<T, SiteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sites
     * const site = await prisma.site.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SiteUpdateManyArgs>(args: SelectSubset<T, SiteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sites and returns the data updated in the database.
     * @param {SiteUpdateManyAndReturnArgs} args - Arguments to update many Sites.
     * @example
     * // Update many Sites
     * const site = await prisma.site.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sites and only return the `id`
     * const siteWithIdOnly = await prisma.site.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SiteUpdateManyAndReturnArgs>(args: SelectSubset<T, SiteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Site.
     * @param {SiteUpsertArgs} args - Arguments to update or create a Site.
     * @example
     * // Update or create a Site
     * const site = await prisma.site.upsert({
     *   create: {
     *     // ... data to create a Site
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Site we want to update
     *   }
     * })
     */
    upsert<T extends SiteUpsertArgs>(args: SelectSubset<T, SiteUpsertArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteCountArgs} args - Arguments to filter Sites to count.
     * @example
     * // Count the number of Sites
     * const count = await prisma.site.count({
     *   where: {
     *     // ... the filter for the Sites we want to count
     *   }
     * })
    **/
    count<T extends SiteCountArgs>(
      args?: Subset<T, SiteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SiteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Site.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SiteAggregateArgs>(args: Subset<T, SiteAggregateArgs>): Prisma.PrismaPromise<GetSiteAggregateType<T>>

    /**
     * Group by Site.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SiteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SiteGroupByArgs['orderBy'] }
        : { orderBy?: SiteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SiteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSiteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Site model
   */
  readonly fields: SiteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Site.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SiteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workspace<T extends WorkspaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceDefaultArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    project<T extends Site$projectArgs<ExtArgs> = {}>(args?: Subset<T, Site$projectArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    siteAttendances<T extends Site$siteAttendancesArgs<ExtArgs> = {}>(args?: Subset<T, Site$siteAttendancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SiteAttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Site model
   */
  interface SiteFieldRefs {
    readonly id: FieldRef<"Site", 'Int'>
    readonly workspaceId: FieldRef<"Site", 'Int'>
    readonly projectId: FieldRef<"Site", 'Int'>
    readonly companyId: FieldRef<"Site", 'Int'>
    readonly name: FieldRef<"Site", 'String'>
    readonly location: FieldRef<"Site", 'String'>
    readonly startDate: FieldRef<"Site", 'DateTime'>
    readonly endDate: FieldRef<"Site", 'DateTime'>
    readonly managementNumber: FieldRef<"Site", 'String'>
    readonly memo: FieldRef<"Site", 'String'>
    readonly createdAt: FieldRef<"Site", 'DateTime'>
    readonly updatedAt: FieldRef<"Site", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Site findUnique
   */
  export type SiteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Site to fetch.
     */
    where: SiteWhereUniqueInput
  }

  /**
   * Site findUniqueOrThrow
   */
  export type SiteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Site to fetch.
     */
    where: SiteWhereUniqueInput
  }

  /**
   * Site findFirst
   */
  export type SiteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Site to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sites.
     */
    distinct?: SiteScalarFieldEnum | SiteScalarFieldEnum[]
  }

  /**
   * Site findFirstOrThrow
   */
  export type SiteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Site to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sites.
     */
    distinct?: SiteScalarFieldEnum | SiteScalarFieldEnum[]
  }

  /**
   * Site findMany
   */
  export type SiteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Sites to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    distinct?: SiteScalarFieldEnum | SiteScalarFieldEnum[]
  }

  /**
   * Site create
   */
  export type SiteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * The data needed to create a Site.
     */
    data: XOR<SiteCreateInput, SiteUncheckedCreateInput>
  }

  /**
   * Site createMany
   */
  export type SiteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sites.
     */
    data: SiteCreateManyInput | SiteCreateManyInput[]
  }

  /**
   * Site createManyAndReturn
   */
  export type SiteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * The data used to create many Sites.
     */
    data: SiteCreateManyInput | SiteCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Site update
   */
  export type SiteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * The data needed to update a Site.
     */
    data: XOR<SiteUpdateInput, SiteUncheckedUpdateInput>
    /**
     * Choose, which Site to update.
     */
    where: SiteWhereUniqueInput
  }

  /**
   * Site updateMany
   */
  export type SiteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sites.
     */
    data: XOR<SiteUpdateManyMutationInput, SiteUncheckedUpdateManyInput>
    /**
     * Filter which Sites to update
     */
    where?: SiteWhereInput
    /**
     * Limit how many Sites to update.
     */
    limit?: number
  }

  /**
   * Site updateManyAndReturn
   */
  export type SiteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * The data used to update Sites.
     */
    data: XOR<SiteUpdateManyMutationInput, SiteUncheckedUpdateManyInput>
    /**
     * Filter which Sites to update
     */
    where?: SiteWhereInput
    /**
     * Limit how many Sites to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Site upsert
   */
  export type SiteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * The filter to search for the Site to update in case it exists.
     */
    where: SiteWhereUniqueInput
    /**
     * In case the Site found by the `where` argument doesn't exist, create a new Site with this data.
     */
    create: XOR<SiteCreateInput, SiteUncheckedCreateInput>
    /**
     * In case the Site was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SiteUpdateInput, SiteUncheckedUpdateInput>
  }

  /**
   * Site delete
   */
  export type SiteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter which Site to delete.
     */
    where: SiteWhereUniqueInput
  }

  /**
   * Site deleteMany
   */
  export type SiteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sites to delete
     */
    where?: SiteWhereInput
    /**
     * Limit how many Sites to delete.
     */
    limit?: number
  }

  /**
   * Site.project
   */
  export type Site$projectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
  }

  /**
   * Site.siteAttendances
   */
  export type Site$siteAttendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteAttendance
     */
    select?: SiteAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SiteAttendance
     */
    omit?: SiteAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteAttendanceInclude<ExtArgs> | null
    where?: SiteAttendanceWhereInput
    orderBy?: SiteAttendanceOrderByWithRelationInput | SiteAttendanceOrderByWithRelationInput[]
    cursor?: SiteAttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SiteAttendanceScalarFieldEnum | SiteAttendanceScalarFieldEnum[]
  }

  /**
   * Site without action
   */
  export type SiteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
  }


  /**
   * Model SiteAttendance
   */

  export type AggregateSiteAttendance = {
    _count: SiteAttendanceCountAggregateOutputType | null
    _avg: SiteAttendanceAvgAggregateOutputType | null
    _sum: SiteAttendanceSumAggregateOutputType | null
    _min: SiteAttendanceMinAggregateOutputType | null
    _max: SiteAttendanceMaxAggregateOutputType | null
  }

  export type SiteAttendanceAvgAggregateOutputType = {
    id: number | null
    talentPoolId: number | null
    siteId: number | null
    amount: number | null
  }

  export type SiteAttendanceSumAggregateOutputType = {
    id: number | null
    talentPoolId: number | null
    siteId: number | null
    amount: number | null
  }

  export type SiteAttendanceMinAggregateOutputType = {
    id: number | null
    talentPoolId: number | null
    siteId: number | null
    date: Date | null
    startTime: Date | null
    endTime: Date | null
    amount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SiteAttendanceMaxAggregateOutputType = {
    id: number | null
    talentPoolId: number | null
    siteId: number | null
    date: Date | null
    startTime: Date | null
    endTime: Date | null
    amount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SiteAttendanceCountAggregateOutputType = {
    id: number
    talentPoolId: number
    siteId: number
    date: number
    startTime: number
    endTime: number
    amount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SiteAttendanceAvgAggregateInputType = {
    id?: true
    talentPoolId?: true
    siteId?: true
    amount?: true
  }

  export type SiteAttendanceSumAggregateInputType = {
    id?: true
    talentPoolId?: true
    siteId?: true
    amount?: true
  }

  export type SiteAttendanceMinAggregateInputType = {
    id?: true
    talentPoolId?: true
    siteId?: true
    date?: true
    startTime?: true
    endTime?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SiteAttendanceMaxAggregateInputType = {
    id?: true
    talentPoolId?: true
    siteId?: true
    date?: true
    startTime?: true
    endTime?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SiteAttendanceCountAggregateInputType = {
    id?: true
    talentPoolId?: true
    siteId?: true
    date?: true
    startTime?: true
    endTime?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SiteAttendanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SiteAttendance to aggregate.
     */
    where?: SiteAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteAttendances to fetch.
     */
    orderBy?: SiteAttendanceOrderByWithRelationInput | SiteAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SiteAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteAttendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SiteAttendances
    **/
    _count?: true | SiteAttendanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SiteAttendanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SiteAttendanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SiteAttendanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SiteAttendanceMaxAggregateInputType
  }

  export type GetSiteAttendanceAggregateType<T extends SiteAttendanceAggregateArgs> = {
        [P in keyof T & keyof AggregateSiteAttendance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSiteAttendance[P]>
      : GetScalarType<T[P], AggregateSiteAttendance[P]>
  }




  export type SiteAttendanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SiteAttendanceWhereInput
    orderBy?: SiteAttendanceOrderByWithAggregationInput | SiteAttendanceOrderByWithAggregationInput[]
    by: SiteAttendanceScalarFieldEnum[] | SiteAttendanceScalarFieldEnum
    having?: SiteAttendanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SiteAttendanceCountAggregateInputType | true
    _avg?: SiteAttendanceAvgAggregateInputType
    _sum?: SiteAttendanceSumAggregateInputType
    _min?: SiteAttendanceMinAggregateInputType
    _max?: SiteAttendanceMaxAggregateInputType
  }

  export type SiteAttendanceGroupByOutputType = {
    id: number
    talentPoolId: number
    siteId: number
    date: Date
    startTime: Date
    endTime: Date
    amount: number
    createdAt: Date
    updatedAt: Date
    _count: SiteAttendanceCountAggregateOutputType | null
    _avg: SiteAttendanceAvgAggregateOutputType | null
    _sum: SiteAttendanceSumAggregateOutputType | null
    _min: SiteAttendanceMinAggregateOutputType | null
    _max: SiteAttendanceMaxAggregateOutputType | null
  }

  type GetSiteAttendanceGroupByPayload<T extends SiteAttendanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SiteAttendanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SiteAttendanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SiteAttendanceGroupByOutputType[P]>
            : GetScalarType<T[P], SiteAttendanceGroupByOutputType[P]>
        }
      >
    >


  export type SiteAttendanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    talentPoolId?: boolean
    siteId?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    site?: boolean | SiteDefaultArgs<ExtArgs>
    talentPool?: boolean | TalentPoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["siteAttendance"]>

  export type SiteAttendanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    talentPoolId?: boolean
    siteId?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    site?: boolean | SiteDefaultArgs<ExtArgs>
    talentPool?: boolean | TalentPoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["siteAttendance"]>

  export type SiteAttendanceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    talentPoolId?: boolean
    siteId?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    site?: boolean | SiteDefaultArgs<ExtArgs>
    talentPool?: boolean | TalentPoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["siteAttendance"]>

  export type SiteAttendanceSelectScalar = {
    id?: boolean
    talentPoolId?: boolean
    siteId?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SiteAttendanceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "talentPoolId" | "siteId" | "date" | "startTime" | "endTime" | "amount" | "createdAt" | "updatedAt", ExtArgs["result"]["siteAttendance"]>
  export type SiteAttendanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    site?: boolean | SiteDefaultArgs<ExtArgs>
    talentPool?: boolean | TalentPoolDefaultArgs<ExtArgs>
  }
  export type SiteAttendanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    site?: boolean | SiteDefaultArgs<ExtArgs>
    talentPool?: boolean | TalentPoolDefaultArgs<ExtArgs>
  }
  export type SiteAttendanceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    site?: boolean | SiteDefaultArgs<ExtArgs>
    talentPool?: boolean | TalentPoolDefaultArgs<ExtArgs>
  }

  export type $SiteAttendancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SiteAttendance"
    objects: {
      site: Prisma.$SitePayload<ExtArgs>
      talentPool: Prisma.$TalentPoolPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      talentPoolId: number
      siteId: number
      date: Date
      startTime: Date
      endTime: Date
      amount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["siteAttendance"]>
    composites: {}
  }

  type SiteAttendanceGetPayload<S extends boolean | null | undefined | SiteAttendanceDefaultArgs> = $Result.GetResult<Prisma.$SiteAttendancePayload, S>

  type SiteAttendanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SiteAttendanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SiteAttendanceCountAggregateInputType | true
    }

  export interface SiteAttendanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SiteAttendance'], meta: { name: 'SiteAttendance' } }
    /**
     * Find zero or one SiteAttendance that matches the filter.
     * @param {SiteAttendanceFindUniqueArgs} args - Arguments to find a SiteAttendance
     * @example
     * // Get one SiteAttendance
     * const siteAttendance = await prisma.siteAttendance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SiteAttendanceFindUniqueArgs>(args: SelectSubset<T, SiteAttendanceFindUniqueArgs<ExtArgs>>): Prisma__SiteAttendanceClient<$Result.GetResult<Prisma.$SiteAttendancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SiteAttendance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SiteAttendanceFindUniqueOrThrowArgs} args - Arguments to find a SiteAttendance
     * @example
     * // Get one SiteAttendance
     * const siteAttendance = await prisma.siteAttendance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SiteAttendanceFindUniqueOrThrowArgs>(args: SelectSubset<T, SiteAttendanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SiteAttendanceClient<$Result.GetResult<Prisma.$SiteAttendancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SiteAttendance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteAttendanceFindFirstArgs} args - Arguments to find a SiteAttendance
     * @example
     * // Get one SiteAttendance
     * const siteAttendance = await prisma.siteAttendance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SiteAttendanceFindFirstArgs>(args?: SelectSubset<T, SiteAttendanceFindFirstArgs<ExtArgs>>): Prisma__SiteAttendanceClient<$Result.GetResult<Prisma.$SiteAttendancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SiteAttendance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteAttendanceFindFirstOrThrowArgs} args - Arguments to find a SiteAttendance
     * @example
     * // Get one SiteAttendance
     * const siteAttendance = await prisma.siteAttendance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SiteAttendanceFindFirstOrThrowArgs>(args?: SelectSubset<T, SiteAttendanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__SiteAttendanceClient<$Result.GetResult<Prisma.$SiteAttendancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SiteAttendances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteAttendanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SiteAttendances
     * const siteAttendances = await prisma.siteAttendance.findMany()
     * 
     * // Get first 10 SiteAttendances
     * const siteAttendances = await prisma.siteAttendance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const siteAttendanceWithIdOnly = await prisma.siteAttendance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SiteAttendanceFindManyArgs>(args?: SelectSubset<T, SiteAttendanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SiteAttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SiteAttendance.
     * @param {SiteAttendanceCreateArgs} args - Arguments to create a SiteAttendance.
     * @example
     * // Create one SiteAttendance
     * const SiteAttendance = await prisma.siteAttendance.create({
     *   data: {
     *     // ... data to create a SiteAttendance
     *   }
     * })
     * 
     */
    create<T extends SiteAttendanceCreateArgs>(args: SelectSubset<T, SiteAttendanceCreateArgs<ExtArgs>>): Prisma__SiteAttendanceClient<$Result.GetResult<Prisma.$SiteAttendancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SiteAttendances.
     * @param {SiteAttendanceCreateManyArgs} args - Arguments to create many SiteAttendances.
     * @example
     * // Create many SiteAttendances
     * const siteAttendance = await prisma.siteAttendance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SiteAttendanceCreateManyArgs>(args?: SelectSubset<T, SiteAttendanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SiteAttendances and returns the data saved in the database.
     * @param {SiteAttendanceCreateManyAndReturnArgs} args - Arguments to create many SiteAttendances.
     * @example
     * // Create many SiteAttendances
     * const siteAttendance = await prisma.siteAttendance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SiteAttendances and only return the `id`
     * const siteAttendanceWithIdOnly = await prisma.siteAttendance.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SiteAttendanceCreateManyAndReturnArgs>(args?: SelectSubset<T, SiteAttendanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SiteAttendancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SiteAttendance.
     * @param {SiteAttendanceDeleteArgs} args - Arguments to delete one SiteAttendance.
     * @example
     * // Delete one SiteAttendance
     * const SiteAttendance = await prisma.siteAttendance.delete({
     *   where: {
     *     // ... filter to delete one SiteAttendance
     *   }
     * })
     * 
     */
    delete<T extends SiteAttendanceDeleteArgs>(args: SelectSubset<T, SiteAttendanceDeleteArgs<ExtArgs>>): Prisma__SiteAttendanceClient<$Result.GetResult<Prisma.$SiteAttendancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SiteAttendance.
     * @param {SiteAttendanceUpdateArgs} args - Arguments to update one SiteAttendance.
     * @example
     * // Update one SiteAttendance
     * const siteAttendance = await prisma.siteAttendance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SiteAttendanceUpdateArgs>(args: SelectSubset<T, SiteAttendanceUpdateArgs<ExtArgs>>): Prisma__SiteAttendanceClient<$Result.GetResult<Prisma.$SiteAttendancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SiteAttendances.
     * @param {SiteAttendanceDeleteManyArgs} args - Arguments to filter SiteAttendances to delete.
     * @example
     * // Delete a few SiteAttendances
     * const { count } = await prisma.siteAttendance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SiteAttendanceDeleteManyArgs>(args?: SelectSubset<T, SiteAttendanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SiteAttendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteAttendanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SiteAttendances
     * const siteAttendance = await prisma.siteAttendance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SiteAttendanceUpdateManyArgs>(args: SelectSubset<T, SiteAttendanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SiteAttendances and returns the data updated in the database.
     * @param {SiteAttendanceUpdateManyAndReturnArgs} args - Arguments to update many SiteAttendances.
     * @example
     * // Update many SiteAttendances
     * const siteAttendance = await prisma.siteAttendance.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SiteAttendances and only return the `id`
     * const siteAttendanceWithIdOnly = await prisma.siteAttendance.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SiteAttendanceUpdateManyAndReturnArgs>(args: SelectSubset<T, SiteAttendanceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SiteAttendancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SiteAttendance.
     * @param {SiteAttendanceUpsertArgs} args - Arguments to update or create a SiteAttendance.
     * @example
     * // Update or create a SiteAttendance
     * const siteAttendance = await prisma.siteAttendance.upsert({
     *   create: {
     *     // ... data to create a SiteAttendance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SiteAttendance we want to update
     *   }
     * })
     */
    upsert<T extends SiteAttendanceUpsertArgs>(args: SelectSubset<T, SiteAttendanceUpsertArgs<ExtArgs>>): Prisma__SiteAttendanceClient<$Result.GetResult<Prisma.$SiteAttendancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SiteAttendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteAttendanceCountArgs} args - Arguments to filter SiteAttendances to count.
     * @example
     * // Count the number of SiteAttendances
     * const count = await prisma.siteAttendance.count({
     *   where: {
     *     // ... the filter for the SiteAttendances we want to count
     *   }
     * })
    **/
    count<T extends SiteAttendanceCountArgs>(
      args?: Subset<T, SiteAttendanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SiteAttendanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SiteAttendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteAttendanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SiteAttendanceAggregateArgs>(args: Subset<T, SiteAttendanceAggregateArgs>): Prisma.PrismaPromise<GetSiteAttendanceAggregateType<T>>

    /**
     * Group by SiteAttendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteAttendanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SiteAttendanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SiteAttendanceGroupByArgs['orderBy'] }
        : { orderBy?: SiteAttendanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SiteAttendanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSiteAttendanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SiteAttendance model
   */
  readonly fields: SiteAttendanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SiteAttendance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SiteAttendanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    site<T extends SiteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SiteDefaultArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    talentPool<T extends TalentPoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TalentPoolDefaultArgs<ExtArgs>>): Prisma__TalentPoolClient<$Result.GetResult<Prisma.$TalentPoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SiteAttendance model
   */
  interface SiteAttendanceFieldRefs {
    readonly id: FieldRef<"SiteAttendance", 'Int'>
    readonly talentPoolId: FieldRef<"SiteAttendance", 'Int'>
    readonly siteId: FieldRef<"SiteAttendance", 'Int'>
    readonly date: FieldRef<"SiteAttendance", 'DateTime'>
    readonly startTime: FieldRef<"SiteAttendance", 'DateTime'>
    readonly endTime: FieldRef<"SiteAttendance", 'DateTime'>
    readonly amount: FieldRef<"SiteAttendance", 'Int'>
    readonly createdAt: FieldRef<"SiteAttendance", 'DateTime'>
    readonly updatedAt: FieldRef<"SiteAttendance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SiteAttendance findUnique
   */
  export type SiteAttendanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteAttendance
     */
    select?: SiteAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SiteAttendance
     */
    omit?: SiteAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which SiteAttendance to fetch.
     */
    where: SiteAttendanceWhereUniqueInput
  }

  /**
   * SiteAttendance findUniqueOrThrow
   */
  export type SiteAttendanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteAttendance
     */
    select?: SiteAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SiteAttendance
     */
    omit?: SiteAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which SiteAttendance to fetch.
     */
    where: SiteAttendanceWhereUniqueInput
  }

  /**
   * SiteAttendance findFirst
   */
  export type SiteAttendanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteAttendance
     */
    select?: SiteAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SiteAttendance
     */
    omit?: SiteAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which SiteAttendance to fetch.
     */
    where?: SiteAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteAttendances to fetch.
     */
    orderBy?: SiteAttendanceOrderByWithRelationInput | SiteAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SiteAttendances.
     */
    cursor?: SiteAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteAttendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SiteAttendances.
     */
    distinct?: SiteAttendanceScalarFieldEnum | SiteAttendanceScalarFieldEnum[]
  }

  /**
   * SiteAttendance findFirstOrThrow
   */
  export type SiteAttendanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteAttendance
     */
    select?: SiteAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SiteAttendance
     */
    omit?: SiteAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which SiteAttendance to fetch.
     */
    where?: SiteAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteAttendances to fetch.
     */
    orderBy?: SiteAttendanceOrderByWithRelationInput | SiteAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SiteAttendances.
     */
    cursor?: SiteAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteAttendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SiteAttendances.
     */
    distinct?: SiteAttendanceScalarFieldEnum | SiteAttendanceScalarFieldEnum[]
  }

  /**
   * SiteAttendance findMany
   */
  export type SiteAttendanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteAttendance
     */
    select?: SiteAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SiteAttendance
     */
    omit?: SiteAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which SiteAttendances to fetch.
     */
    where?: SiteAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteAttendances to fetch.
     */
    orderBy?: SiteAttendanceOrderByWithRelationInput | SiteAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SiteAttendances.
     */
    cursor?: SiteAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteAttendances.
     */
    skip?: number
    distinct?: SiteAttendanceScalarFieldEnum | SiteAttendanceScalarFieldEnum[]
  }

  /**
   * SiteAttendance create
   */
  export type SiteAttendanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteAttendance
     */
    select?: SiteAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SiteAttendance
     */
    omit?: SiteAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteAttendanceInclude<ExtArgs> | null
    /**
     * The data needed to create a SiteAttendance.
     */
    data: XOR<SiteAttendanceCreateInput, SiteAttendanceUncheckedCreateInput>
  }

  /**
   * SiteAttendance createMany
   */
  export type SiteAttendanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SiteAttendances.
     */
    data: SiteAttendanceCreateManyInput | SiteAttendanceCreateManyInput[]
  }

  /**
   * SiteAttendance createManyAndReturn
   */
  export type SiteAttendanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteAttendance
     */
    select?: SiteAttendanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SiteAttendance
     */
    omit?: SiteAttendanceOmit<ExtArgs> | null
    /**
     * The data used to create many SiteAttendances.
     */
    data: SiteAttendanceCreateManyInput | SiteAttendanceCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteAttendanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SiteAttendance update
   */
  export type SiteAttendanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteAttendance
     */
    select?: SiteAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SiteAttendance
     */
    omit?: SiteAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteAttendanceInclude<ExtArgs> | null
    /**
     * The data needed to update a SiteAttendance.
     */
    data: XOR<SiteAttendanceUpdateInput, SiteAttendanceUncheckedUpdateInput>
    /**
     * Choose, which SiteAttendance to update.
     */
    where: SiteAttendanceWhereUniqueInput
  }

  /**
   * SiteAttendance updateMany
   */
  export type SiteAttendanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SiteAttendances.
     */
    data: XOR<SiteAttendanceUpdateManyMutationInput, SiteAttendanceUncheckedUpdateManyInput>
    /**
     * Filter which SiteAttendances to update
     */
    where?: SiteAttendanceWhereInput
    /**
     * Limit how many SiteAttendances to update.
     */
    limit?: number
  }

  /**
   * SiteAttendance updateManyAndReturn
   */
  export type SiteAttendanceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteAttendance
     */
    select?: SiteAttendanceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SiteAttendance
     */
    omit?: SiteAttendanceOmit<ExtArgs> | null
    /**
     * The data used to update SiteAttendances.
     */
    data: XOR<SiteAttendanceUpdateManyMutationInput, SiteAttendanceUncheckedUpdateManyInput>
    /**
     * Filter which SiteAttendances to update
     */
    where?: SiteAttendanceWhereInput
    /**
     * Limit how many SiteAttendances to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteAttendanceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SiteAttendance upsert
   */
  export type SiteAttendanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteAttendance
     */
    select?: SiteAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SiteAttendance
     */
    omit?: SiteAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteAttendanceInclude<ExtArgs> | null
    /**
     * The filter to search for the SiteAttendance to update in case it exists.
     */
    where: SiteAttendanceWhereUniqueInput
    /**
     * In case the SiteAttendance found by the `where` argument doesn't exist, create a new SiteAttendance with this data.
     */
    create: XOR<SiteAttendanceCreateInput, SiteAttendanceUncheckedCreateInput>
    /**
     * In case the SiteAttendance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SiteAttendanceUpdateInput, SiteAttendanceUncheckedUpdateInput>
  }

  /**
   * SiteAttendance delete
   */
  export type SiteAttendanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteAttendance
     */
    select?: SiteAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SiteAttendance
     */
    omit?: SiteAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteAttendanceInclude<ExtArgs> | null
    /**
     * Filter which SiteAttendance to delete.
     */
    where: SiteAttendanceWhereUniqueInput
  }

  /**
   * SiteAttendance deleteMany
   */
  export type SiteAttendanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SiteAttendances to delete
     */
    where?: SiteAttendanceWhereInput
    /**
     * Limit how many SiteAttendances to delete.
     */
    limit?: number
  }

  /**
   * SiteAttendance without action
   */
  export type SiteAttendanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteAttendance
     */
    select?: SiteAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SiteAttendance
     */
    omit?: SiteAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteAttendanceInclude<ExtArgs> | null
  }


  /**
   * Model TalentPool
   */

  export type AggregateTalentPool = {
    _count: TalentPoolCountAggregateOutputType | null
    _avg: TalentPoolAvgAggregateOutputType | null
    _sum: TalentPoolSumAggregateOutputType | null
    _min: TalentPoolMinAggregateOutputType | null
    _max: TalentPoolMaxAggregateOutputType | null
  }

  export type TalentPoolAvgAggregateOutputType = {
    id: number | null
    workspaceId: number | null
    profileId: number | null
  }

  export type TalentPoolSumAggregateOutputType = {
    id: number | null
    workspaceId: number | null
    profileId: number | null
  }

  export type TalentPoolMinAggregateOutputType = {
    id: number | null
    workspaceId: number | null
    profileId: number | null
    name: string | null
    birthday: Date | null
    phone: string | null
    address: string | null
    memo: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TalentPoolMaxAggregateOutputType = {
    id: number | null
    workspaceId: number | null
    profileId: number | null
    name: string | null
    birthday: Date | null
    phone: string | null
    address: string | null
    memo: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TalentPoolCountAggregateOutputType = {
    id: number
    workspaceId: number
    profileId: number
    name: number
    birthday: number
    phone: number
    address: number
    memo: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TalentPoolAvgAggregateInputType = {
    id?: true
    workspaceId?: true
    profileId?: true
  }

  export type TalentPoolSumAggregateInputType = {
    id?: true
    workspaceId?: true
    profileId?: true
  }

  export type TalentPoolMinAggregateInputType = {
    id?: true
    workspaceId?: true
    profileId?: true
    name?: true
    birthday?: true
    phone?: true
    address?: true
    memo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TalentPoolMaxAggregateInputType = {
    id?: true
    workspaceId?: true
    profileId?: true
    name?: true
    birthday?: true
    phone?: true
    address?: true
    memo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TalentPoolCountAggregateInputType = {
    id?: true
    workspaceId?: true
    profileId?: true
    name?: true
    birthday?: true
    phone?: true
    address?: true
    memo?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TalentPoolAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TalentPool to aggregate.
     */
    where?: TalentPoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TalentPools to fetch.
     */
    orderBy?: TalentPoolOrderByWithRelationInput | TalentPoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TalentPoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TalentPools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TalentPools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TalentPools
    **/
    _count?: true | TalentPoolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TalentPoolAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TalentPoolSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TalentPoolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TalentPoolMaxAggregateInputType
  }

  export type GetTalentPoolAggregateType<T extends TalentPoolAggregateArgs> = {
        [P in keyof T & keyof AggregateTalentPool]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTalentPool[P]>
      : GetScalarType<T[P], AggregateTalentPool[P]>
  }




  export type TalentPoolGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TalentPoolWhereInput
    orderBy?: TalentPoolOrderByWithAggregationInput | TalentPoolOrderByWithAggregationInput[]
    by: TalentPoolScalarFieldEnum[] | TalentPoolScalarFieldEnum
    having?: TalentPoolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TalentPoolCountAggregateInputType | true
    _avg?: TalentPoolAvgAggregateInputType
    _sum?: TalentPoolSumAggregateInputType
    _min?: TalentPoolMinAggregateInputType
    _max?: TalentPoolMaxAggregateInputType
  }

  export type TalentPoolGroupByOutputType = {
    id: number
    workspaceId: number
    profileId: number | null
    name: string
    birthday: Date
    phone: string
    address: string
    memo: string | null
    createdAt: Date
    updatedAt: Date
    _count: TalentPoolCountAggregateOutputType | null
    _avg: TalentPoolAvgAggregateOutputType | null
    _sum: TalentPoolSumAggregateOutputType | null
    _min: TalentPoolMinAggregateOutputType | null
    _max: TalentPoolMaxAggregateOutputType | null
  }

  type GetTalentPoolGroupByPayload<T extends TalentPoolGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TalentPoolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TalentPoolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TalentPoolGroupByOutputType[P]>
            : GetScalarType<T[P], TalentPoolGroupByOutputType[P]>
        }
      >
    >


  export type TalentPoolSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    profileId?: boolean
    name?: boolean
    birthday?: boolean
    phone?: boolean
    address?: boolean
    memo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    profile?: boolean | TalentPool$profileArgs<ExtArgs>
    employees?: boolean | TalentPool$employeesArgs<ExtArgs>
    dayLaborers?: boolean | TalentPool$dayLaborersArgs<ExtArgs>
    siteAttendances?: boolean | TalentPool$siteAttendancesArgs<ExtArgs>
    _count?: boolean | TalentPoolCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["talentPool"]>

  export type TalentPoolSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    profileId?: boolean
    name?: boolean
    birthday?: boolean
    phone?: boolean
    address?: boolean
    memo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    profile?: boolean | TalentPool$profileArgs<ExtArgs>
  }, ExtArgs["result"]["talentPool"]>

  export type TalentPoolSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    profileId?: boolean
    name?: boolean
    birthday?: boolean
    phone?: boolean
    address?: boolean
    memo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    profile?: boolean | TalentPool$profileArgs<ExtArgs>
  }, ExtArgs["result"]["talentPool"]>

  export type TalentPoolSelectScalar = {
    id?: boolean
    workspaceId?: boolean
    profileId?: boolean
    name?: boolean
    birthday?: boolean
    phone?: boolean
    address?: boolean
    memo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TalentPoolOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workspaceId" | "profileId" | "name" | "birthday" | "phone" | "address" | "memo" | "createdAt" | "updatedAt", ExtArgs["result"]["talentPool"]>
  export type TalentPoolInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    profile?: boolean | TalentPool$profileArgs<ExtArgs>
    employees?: boolean | TalentPool$employeesArgs<ExtArgs>
    dayLaborers?: boolean | TalentPool$dayLaborersArgs<ExtArgs>
    siteAttendances?: boolean | TalentPool$siteAttendancesArgs<ExtArgs>
    _count?: boolean | TalentPoolCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TalentPoolIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    profile?: boolean | TalentPool$profileArgs<ExtArgs>
  }
  export type TalentPoolIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    profile?: boolean | TalentPool$profileArgs<ExtArgs>
  }

  export type $TalentPoolPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TalentPool"
    objects: {
      workspace: Prisma.$WorkspacePayload<ExtArgs>
      profile: Prisma.$ProfilePayload<ExtArgs> | null
      employees: Prisma.$EmployeePayload<ExtArgs>[]
      dayLaborers: Prisma.$DayLaborerPayload<ExtArgs>[]
      siteAttendances: Prisma.$SiteAttendancePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      workspaceId: number
      profileId: number | null
      name: string
      birthday: Date
      phone: string
      address: string
      memo: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["talentPool"]>
    composites: {}
  }

  type TalentPoolGetPayload<S extends boolean | null | undefined | TalentPoolDefaultArgs> = $Result.GetResult<Prisma.$TalentPoolPayload, S>

  type TalentPoolCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TalentPoolFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TalentPoolCountAggregateInputType | true
    }

  export interface TalentPoolDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TalentPool'], meta: { name: 'TalentPool' } }
    /**
     * Find zero or one TalentPool that matches the filter.
     * @param {TalentPoolFindUniqueArgs} args - Arguments to find a TalentPool
     * @example
     * // Get one TalentPool
     * const talentPool = await prisma.talentPool.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TalentPoolFindUniqueArgs>(args: SelectSubset<T, TalentPoolFindUniqueArgs<ExtArgs>>): Prisma__TalentPoolClient<$Result.GetResult<Prisma.$TalentPoolPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TalentPool that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TalentPoolFindUniqueOrThrowArgs} args - Arguments to find a TalentPool
     * @example
     * // Get one TalentPool
     * const talentPool = await prisma.talentPool.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TalentPoolFindUniqueOrThrowArgs>(args: SelectSubset<T, TalentPoolFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TalentPoolClient<$Result.GetResult<Prisma.$TalentPoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TalentPool that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TalentPoolFindFirstArgs} args - Arguments to find a TalentPool
     * @example
     * // Get one TalentPool
     * const talentPool = await prisma.talentPool.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TalentPoolFindFirstArgs>(args?: SelectSubset<T, TalentPoolFindFirstArgs<ExtArgs>>): Prisma__TalentPoolClient<$Result.GetResult<Prisma.$TalentPoolPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TalentPool that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TalentPoolFindFirstOrThrowArgs} args - Arguments to find a TalentPool
     * @example
     * // Get one TalentPool
     * const talentPool = await prisma.talentPool.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TalentPoolFindFirstOrThrowArgs>(args?: SelectSubset<T, TalentPoolFindFirstOrThrowArgs<ExtArgs>>): Prisma__TalentPoolClient<$Result.GetResult<Prisma.$TalentPoolPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TalentPools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TalentPoolFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TalentPools
     * const talentPools = await prisma.talentPool.findMany()
     * 
     * // Get first 10 TalentPools
     * const talentPools = await prisma.talentPool.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const talentPoolWithIdOnly = await prisma.talentPool.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TalentPoolFindManyArgs>(args?: SelectSubset<T, TalentPoolFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TalentPoolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TalentPool.
     * @param {TalentPoolCreateArgs} args - Arguments to create a TalentPool.
     * @example
     * // Create one TalentPool
     * const TalentPool = await prisma.talentPool.create({
     *   data: {
     *     // ... data to create a TalentPool
     *   }
     * })
     * 
     */
    create<T extends TalentPoolCreateArgs>(args: SelectSubset<T, TalentPoolCreateArgs<ExtArgs>>): Prisma__TalentPoolClient<$Result.GetResult<Prisma.$TalentPoolPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TalentPools.
     * @param {TalentPoolCreateManyArgs} args - Arguments to create many TalentPools.
     * @example
     * // Create many TalentPools
     * const talentPool = await prisma.talentPool.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TalentPoolCreateManyArgs>(args?: SelectSubset<T, TalentPoolCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TalentPools and returns the data saved in the database.
     * @param {TalentPoolCreateManyAndReturnArgs} args - Arguments to create many TalentPools.
     * @example
     * // Create many TalentPools
     * const talentPool = await prisma.talentPool.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TalentPools and only return the `id`
     * const talentPoolWithIdOnly = await prisma.talentPool.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TalentPoolCreateManyAndReturnArgs>(args?: SelectSubset<T, TalentPoolCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TalentPoolPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TalentPool.
     * @param {TalentPoolDeleteArgs} args - Arguments to delete one TalentPool.
     * @example
     * // Delete one TalentPool
     * const TalentPool = await prisma.talentPool.delete({
     *   where: {
     *     // ... filter to delete one TalentPool
     *   }
     * })
     * 
     */
    delete<T extends TalentPoolDeleteArgs>(args: SelectSubset<T, TalentPoolDeleteArgs<ExtArgs>>): Prisma__TalentPoolClient<$Result.GetResult<Prisma.$TalentPoolPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TalentPool.
     * @param {TalentPoolUpdateArgs} args - Arguments to update one TalentPool.
     * @example
     * // Update one TalentPool
     * const talentPool = await prisma.talentPool.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TalentPoolUpdateArgs>(args: SelectSubset<T, TalentPoolUpdateArgs<ExtArgs>>): Prisma__TalentPoolClient<$Result.GetResult<Prisma.$TalentPoolPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TalentPools.
     * @param {TalentPoolDeleteManyArgs} args - Arguments to filter TalentPools to delete.
     * @example
     * // Delete a few TalentPools
     * const { count } = await prisma.talentPool.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TalentPoolDeleteManyArgs>(args?: SelectSubset<T, TalentPoolDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TalentPools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TalentPoolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TalentPools
     * const talentPool = await prisma.talentPool.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TalentPoolUpdateManyArgs>(args: SelectSubset<T, TalentPoolUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TalentPools and returns the data updated in the database.
     * @param {TalentPoolUpdateManyAndReturnArgs} args - Arguments to update many TalentPools.
     * @example
     * // Update many TalentPools
     * const talentPool = await prisma.talentPool.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TalentPools and only return the `id`
     * const talentPoolWithIdOnly = await prisma.talentPool.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TalentPoolUpdateManyAndReturnArgs>(args: SelectSubset<T, TalentPoolUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TalentPoolPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TalentPool.
     * @param {TalentPoolUpsertArgs} args - Arguments to update or create a TalentPool.
     * @example
     * // Update or create a TalentPool
     * const talentPool = await prisma.talentPool.upsert({
     *   create: {
     *     // ... data to create a TalentPool
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TalentPool we want to update
     *   }
     * })
     */
    upsert<T extends TalentPoolUpsertArgs>(args: SelectSubset<T, TalentPoolUpsertArgs<ExtArgs>>): Prisma__TalentPoolClient<$Result.GetResult<Prisma.$TalentPoolPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TalentPools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TalentPoolCountArgs} args - Arguments to filter TalentPools to count.
     * @example
     * // Count the number of TalentPools
     * const count = await prisma.talentPool.count({
     *   where: {
     *     // ... the filter for the TalentPools we want to count
     *   }
     * })
    **/
    count<T extends TalentPoolCountArgs>(
      args?: Subset<T, TalentPoolCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TalentPoolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TalentPool.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TalentPoolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TalentPoolAggregateArgs>(args: Subset<T, TalentPoolAggregateArgs>): Prisma.PrismaPromise<GetTalentPoolAggregateType<T>>

    /**
     * Group by TalentPool.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TalentPoolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TalentPoolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TalentPoolGroupByArgs['orderBy'] }
        : { orderBy?: TalentPoolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TalentPoolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTalentPoolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TalentPool model
   */
  readonly fields: TalentPoolFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TalentPool.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TalentPoolClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workspace<T extends WorkspaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceDefaultArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    profile<T extends TalentPool$profileArgs<ExtArgs> = {}>(args?: Subset<T, TalentPool$profileArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    employees<T extends TalentPool$employeesArgs<ExtArgs> = {}>(args?: Subset<T, TalentPool$employeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    dayLaborers<T extends TalentPool$dayLaborersArgs<ExtArgs> = {}>(args?: Subset<T, TalentPool$dayLaborersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DayLaborerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    siteAttendances<T extends TalentPool$siteAttendancesArgs<ExtArgs> = {}>(args?: Subset<T, TalentPool$siteAttendancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SiteAttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TalentPool model
   */
  interface TalentPoolFieldRefs {
    readonly id: FieldRef<"TalentPool", 'Int'>
    readonly workspaceId: FieldRef<"TalentPool", 'Int'>
    readonly profileId: FieldRef<"TalentPool", 'Int'>
    readonly name: FieldRef<"TalentPool", 'String'>
    readonly birthday: FieldRef<"TalentPool", 'DateTime'>
    readonly phone: FieldRef<"TalentPool", 'String'>
    readonly address: FieldRef<"TalentPool", 'String'>
    readonly memo: FieldRef<"TalentPool", 'String'>
    readonly createdAt: FieldRef<"TalentPool", 'DateTime'>
    readonly updatedAt: FieldRef<"TalentPool", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TalentPool findUnique
   */
  export type TalentPoolFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TalentPool
     */
    select?: TalentPoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TalentPool
     */
    omit?: TalentPoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TalentPoolInclude<ExtArgs> | null
    /**
     * Filter, which TalentPool to fetch.
     */
    where: TalentPoolWhereUniqueInput
  }

  /**
   * TalentPool findUniqueOrThrow
   */
  export type TalentPoolFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TalentPool
     */
    select?: TalentPoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TalentPool
     */
    omit?: TalentPoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TalentPoolInclude<ExtArgs> | null
    /**
     * Filter, which TalentPool to fetch.
     */
    where: TalentPoolWhereUniqueInput
  }

  /**
   * TalentPool findFirst
   */
  export type TalentPoolFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TalentPool
     */
    select?: TalentPoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TalentPool
     */
    omit?: TalentPoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TalentPoolInclude<ExtArgs> | null
    /**
     * Filter, which TalentPool to fetch.
     */
    where?: TalentPoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TalentPools to fetch.
     */
    orderBy?: TalentPoolOrderByWithRelationInput | TalentPoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TalentPools.
     */
    cursor?: TalentPoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TalentPools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TalentPools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TalentPools.
     */
    distinct?: TalentPoolScalarFieldEnum | TalentPoolScalarFieldEnum[]
  }

  /**
   * TalentPool findFirstOrThrow
   */
  export type TalentPoolFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TalentPool
     */
    select?: TalentPoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TalentPool
     */
    omit?: TalentPoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TalentPoolInclude<ExtArgs> | null
    /**
     * Filter, which TalentPool to fetch.
     */
    where?: TalentPoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TalentPools to fetch.
     */
    orderBy?: TalentPoolOrderByWithRelationInput | TalentPoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TalentPools.
     */
    cursor?: TalentPoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TalentPools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TalentPools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TalentPools.
     */
    distinct?: TalentPoolScalarFieldEnum | TalentPoolScalarFieldEnum[]
  }

  /**
   * TalentPool findMany
   */
  export type TalentPoolFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TalentPool
     */
    select?: TalentPoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TalentPool
     */
    omit?: TalentPoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TalentPoolInclude<ExtArgs> | null
    /**
     * Filter, which TalentPools to fetch.
     */
    where?: TalentPoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TalentPools to fetch.
     */
    orderBy?: TalentPoolOrderByWithRelationInput | TalentPoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TalentPools.
     */
    cursor?: TalentPoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TalentPools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TalentPools.
     */
    skip?: number
    distinct?: TalentPoolScalarFieldEnum | TalentPoolScalarFieldEnum[]
  }

  /**
   * TalentPool create
   */
  export type TalentPoolCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TalentPool
     */
    select?: TalentPoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TalentPool
     */
    omit?: TalentPoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TalentPoolInclude<ExtArgs> | null
    /**
     * The data needed to create a TalentPool.
     */
    data: XOR<TalentPoolCreateInput, TalentPoolUncheckedCreateInput>
  }

  /**
   * TalentPool createMany
   */
  export type TalentPoolCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TalentPools.
     */
    data: TalentPoolCreateManyInput | TalentPoolCreateManyInput[]
  }

  /**
   * TalentPool createManyAndReturn
   */
  export type TalentPoolCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TalentPool
     */
    select?: TalentPoolSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TalentPool
     */
    omit?: TalentPoolOmit<ExtArgs> | null
    /**
     * The data used to create many TalentPools.
     */
    data: TalentPoolCreateManyInput | TalentPoolCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TalentPoolIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TalentPool update
   */
  export type TalentPoolUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TalentPool
     */
    select?: TalentPoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TalentPool
     */
    omit?: TalentPoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TalentPoolInclude<ExtArgs> | null
    /**
     * The data needed to update a TalentPool.
     */
    data: XOR<TalentPoolUpdateInput, TalentPoolUncheckedUpdateInput>
    /**
     * Choose, which TalentPool to update.
     */
    where: TalentPoolWhereUniqueInput
  }

  /**
   * TalentPool updateMany
   */
  export type TalentPoolUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TalentPools.
     */
    data: XOR<TalentPoolUpdateManyMutationInput, TalentPoolUncheckedUpdateManyInput>
    /**
     * Filter which TalentPools to update
     */
    where?: TalentPoolWhereInput
    /**
     * Limit how many TalentPools to update.
     */
    limit?: number
  }

  /**
   * TalentPool updateManyAndReturn
   */
  export type TalentPoolUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TalentPool
     */
    select?: TalentPoolSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TalentPool
     */
    omit?: TalentPoolOmit<ExtArgs> | null
    /**
     * The data used to update TalentPools.
     */
    data: XOR<TalentPoolUpdateManyMutationInput, TalentPoolUncheckedUpdateManyInput>
    /**
     * Filter which TalentPools to update
     */
    where?: TalentPoolWhereInput
    /**
     * Limit how many TalentPools to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TalentPoolIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TalentPool upsert
   */
  export type TalentPoolUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TalentPool
     */
    select?: TalentPoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TalentPool
     */
    omit?: TalentPoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TalentPoolInclude<ExtArgs> | null
    /**
     * The filter to search for the TalentPool to update in case it exists.
     */
    where: TalentPoolWhereUniqueInput
    /**
     * In case the TalentPool found by the `where` argument doesn't exist, create a new TalentPool with this data.
     */
    create: XOR<TalentPoolCreateInput, TalentPoolUncheckedCreateInput>
    /**
     * In case the TalentPool was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TalentPoolUpdateInput, TalentPoolUncheckedUpdateInput>
  }

  /**
   * TalentPool delete
   */
  export type TalentPoolDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TalentPool
     */
    select?: TalentPoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TalentPool
     */
    omit?: TalentPoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TalentPoolInclude<ExtArgs> | null
    /**
     * Filter which TalentPool to delete.
     */
    where: TalentPoolWhereUniqueInput
  }

  /**
   * TalentPool deleteMany
   */
  export type TalentPoolDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TalentPools to delete
     */
    where?: TalentPoolWhereInput
    /**
     * Limit how many TalentPools to delete.
     */
    limit?: number
  }

  /**
   * TalentPool.profile
   */
  export type TalentPool$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
  }

  /**
   * TalentPool.employees
   */
  export type TalentPool$employeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    cursor?: EmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * TalentPool.dayLaborers
   */
  export type TalentPool$dayLaborersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayLaborer
     */
    select?: DayLaborerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DayLaborer
     */
    omit?: DayLaborerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayLaborerInclude<ExtArgs> | null
    where?: DayLaborerWhereInput
    orderBy?: DayLaborerOrderByWithRelationInput | DayLaborerOrderByWithRelationInput[]
    cursor?: DayLaborerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DayLaborerScalarFieldEnum | DayLaborerScalarFieldEnum[]
  }

  /**
   * TalentPool.siteAttendances
   */
  export type TalentPool$siteAttendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteAttendance
     */
    select?: SiteAttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SiteAttendance
     */
    omit?: SiteAttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteAttendanceInclude<ExtArgs> | null
    where?: SiteAttendanceWhereInput
    orderBy?: SiteAttendanceOrderByWithRelationInput | SiteAttendanceOrderByWithRelationInput[]
    cursor?: SiteAttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SiteAttendanceScalarFieldEnum | SiteAttendanceScalarFieldEnum[]
  }

  /**
   * TalentPool without action
   */
  export type TalentPoolDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TalentPool
     */
    select?: TalentPoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TalentPool
     */
    omit?: TalentPoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TalentPoolInclude<ExtArgs> | null
  }


  /**
   * Model IndustrialAccidentInsurancePremiumRate
   */

  export type AggregateIndustrialAccidentInsurancePremiumRate = {
    _count: IndustrialAccidentInsurancePremiumRateCountAggregateOutputType | null
    _avg: IndustrialAccidentInsurancePremiumRateAvgAggregateOutputType | null
    _sum: IndustrialAccidentInsurancePremiumRateSumAggregateOutputType | null
    _min: IndustrialAccidentInsurancePremiumRateMinAggregateOutputType | null
    _max: IndustrialAccidentInsurancePremiumRateMaxAggregateOutputType | null
  }

  export type IndustrialAccidentInsurancePremiumRateAvgAggregateOutputType = {
    id: number | null
    firstLevelCode: number | null
    secondLevelCode: number | null
    industryCode: number | null
    rate: number | null
  }

  export type IndustrialAccidentInsurancePremiumRateSumAggregateOutputType = {
    id: number | null
    firstLevelCode: number | null
    secondLevelCode: number | null
    industryCode: number | null
    rate: number | null
  }

  export type IndustrialAccidentInsurancePremiumRateMinAggregateOutputType = {
    id: number | null
    firstLevel: string | null
    firstLevelCode: number | null
    secondLevel: string | null
    secondLevelCode: number | null
    industryName: string | null
    industryCode: number | null
    date: string | null
    rate: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type IndustrialAccidentInsurancePremiumRateMaxAggregateOutputType = {
    id: number | null
    firstLevel: string | null
    firstLevelCode: number | null
    secondLevel: string | null
    secondLevelCode: number | null
    industryName: string | null
    industryCode: number | null
    date: string | null
    rate: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type IndustrialAccidentInsurancePremiumRateCountAggregateOutputType = {
    id: number
    firstLevel: number
    firstLevelCode: number
    secondLevel: number
    secondLevelCode: number
    industryName: number
    industryCode: number
    date: number
    rate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type IndustrialAccidentInsurancePremiumRateAvgAggregateInputType = {
    id?: true
    firstLevelCode?: true
    secondLevelCode?: true
    industryCode?: true
    rate?: true
  }

  export type IndustrialAccidentInsurancePremiumRateSumAggregateInputType = {
    id?: true
    firstLevelCode?: true
    secondLevelCode?: true
    industryCode?: true
    rate?: true
  }

  export type IndustrialAccidentInsurancePremiumRateMinAggregateInputType = {
    id?: true
    firstLevel?: true
    firstLevelCode?: true
    secondLevel?: true
    secondLevelCode?: true
    industryName?: true
    industryCode?: true
    date?: true
    rate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type IndustrialAccidentInsurancePremiumRateMaxAggregateInputType = {
    id?: true
    firstLevel?: true
    firstLevelCode?: true
    secondLevel?: true
    secondLevelCode?: true
    industryName?: true
    industryCode?: true
    date?: true
    rate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type IndustrialAccidentInsurancePremiumRateCountAggregateInputType = {
    id?: true
    firstLevel?: true
    firstLevelCode?: true
    secondLevel?: true
    secondLevelCode?: true
    industryName?: true
    industryCode?: true
    date?: true
    rate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type IndustrialAccidentInsurancePremiumRateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IndustrialAccidentInsurancePremiumRate to aggregate.
     */
    where?: IndustrialAccidentInsurancePremiumRateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IndustrialAccidentInsurancePremiumRates to fetch.
     */
    orderBy?: IndustrialAccidentInsurancePremiumRateOrderByWithRelationInput | IndustrialAccidentInsurancePremiumRateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IndustrialAccidentInsurancePremiumRateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IndustrialAccidentInsurancePremiumRates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IndustrialAccidentInsurancePremiumRates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IndustrialAccidentInsurancePremiumRates
    **/
    _count?: true | IndustrialAccidentInsurancePremiumRateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IndustrialAccidentInsurancePremiumRateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IndustrialAccidentInsurancePremiumRateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IndustrialAccidentInsurancePremiumRateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IndustrialAccidentInsurancePremiumRateMaxAggregateInputType
  }

  export type GetIndustrialAccidentInsurancePremiumRateAggregateType<T extends IndustrialAccidentInsurancePremiumRateAggregateArgs> = {
        [P in keyof T & keyof AggregateIndustrialAccidentInsurancePremiumRate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIndustrialAccidentInsurancePremiumRate[P]>
      : GetScalarType<T[P], AggregateIndustrialAccidentInsurancePremiumRate[P]>
  }




  export type IndustrialAccidentInsurancePremiumRateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IndustrialAccidentInsurancePremiumRateWhereInput
    orderBy?: IndustrialAccidentInsurancePremiumRateOrderByWithAggregationInput | IndustrialAccidentInsurancePremiumRateOrderByWithAggregationInput[]
    by: IndustrialAccidentInsurancePremiumRateScalarFieldEnum[] | IndustrialAccidentInsurancePremiumRateScalarFieldEnum
    having?: IndustrialAccidentInsurancePremiumRateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IndustrialAccidentInsurancePremiumRateCountAggregateInputType | true
    _avg?: IndustrialAccidentInsurancePremiumRateAvgAggregateInputType
    _sum?: IndustrialAccidentInsurancePremiumRateSumAggregateInputType
    _min?: IndustrialAccidentInsurancePremiumRateMinAggregateInputType
    _max?: IndustrialAccidentInsurancePremiumRateMaxAggregateInputType
  }

  export type IndustrialAccidentInsurancePremiumRateGroupByOutputType = {
    id: number
    firstLevel: string | null
    firstLevelCode: number | null
    secondLevel: string | null
    secondLevelCode: number | null
    industryName: string | null
    industryCode: number | null
    date: string | null
    rate: number | null
    createdAt: Date
    updatedAt: Date
    _count: IndustrialAccidentInsurancePremiumRateCountAggregateOutputType | null
    _avg: IndustrialAccidentInsurancePremiumRateAvgAggregateOutputType | null
    _sum: IndustrialAccidentInsurancePremiumRateSumAggregateOutputType | null
    _min: IndustrialAccidentInsurancePremiumRateMinAggregateOutputType | null
    _max: IndustrialAccidentInsurancePremiumRateMaxAggregateOutputType | null
  }

  type GetIndustrialAccidentInsurancePremiumRateGroupByPayload<T extends IndustrialAccidentInsurancePremiumRateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IndustrialAccidentInsurancePremiumRateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IndustrialAccidentInsurancePremiumRateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IndustrialAccidentInsurancePremiumRateGroupByOutputType[P]>
            : GetScalarType<T[P], IndustrialAccidentInsurancePremiumRateGroupByOutputType[P]>
        }
      >
    >


  export type IndustrialAccidentInsurancePremiumRateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstLevel?: boolean
    firstLevelCode?: boolean
    secondLevel?: boolean
    secondLevelCode?: boolean
    industryName?: boolean
    industryCode?: boolean
    date?: boolean
    rate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companyIndustryCodes?: boolean | IndustrialAccidentInsurancePremiumRate$companyIndustryCodesArgs<ExtArgs>
    _count?: boolean | IndustrialAccidentInsurancePremiumRateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["industrialAccidentInsurancePremiumRate"]>

  export type IndustrialAccidentInsurancePremiumRateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstLevel?: boolean
    firstLevelCode?: boolean
    secondLevel?: boolean
    secondLevelCode?: boolean
    industryName?: boolean
    industryCode?: boolean
    date?: boolean
    rate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["industrialAccidentInsurancePremiumRate"]>

  export type IndustrialAccidentInsurancePremiumRateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstLevel?: boolean
    firstLevelCode?: boolean
    secondLevel?: boolean
    secondLevelCode?: boolean
    industryName?: boolean
    industryCode?: boolean
    date?: boolean
    rate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["industrialAccidentInsurancePremiumRate"]>

  export type IndustrialAccidentInsurancePremiumRateSelectScalar = {
    id?: boolean
    firstLevel?: boolean
    firstLevelCode?: boolean
    secondLevel?: boolean
    secondLevelCode?: boolean
    industryName?: boolean
    industryCode?: boolean
    date?: boolean
    rate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type IndustrialAccidentInsurancePremiumRateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstLevel" | "firstLevelCode" | "secondLevel" | "secondLevelCode" | "industryName" | "industryCode" | "date" | "rate" | "createdAt" | "updatedAt", ExtArgs["result"]["industrialAccidentInsurancePremiumRate"]>
  export type IndustrialAccidentInsurancePremiumRateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companyIndustryCodes?: boolean | IndustrialAccidentInsurancePremiumRate$companyIndustryCodesArgs<ExtArgs>
    _count?: boolean | IndustrialAccidentInsurancePremiumRateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type IndustrialAccidentInsurancePremiumRateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type IndustrialAccidentInsurancePremiumRateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $IndustrialAccidentInsurancePremiumRatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "IndustrialAccidentInsurancePremiumRate"
    objects: {
      companyIndustryCodes: Prisma.$CompanyIndustryCodePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstLevel: string | null
      firstLevelCode: number | null
      secondLevel: string | null
      secondLevelCode: number | null
      industryName: string | null
      industryCode: number | null
      date: string | null
      rate: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["industrialAccidentInsurancePremiumRate"]>
    composites: {}
  }

  type IndustrialAccidentInsurancePremiumRateGetPayload<S extends boolean | null | undefined | IndustrialAccidentInsurancePremiumRateDefaultArgs> = $Result.GetResult<Prisma.$IndustrialAccidentInsurancePremiumRatePayload, S>

  type IndustrialAccidentInsurancePremiumRateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<IndustrialAccidentInsurancePremiumRateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IndustrialAccidentInsurancePremiumRateCountAggregateInputType | true
    }

  export interface IndustrialAccidentInsurancePremiumRateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IndustrialAccidentInsurancePremiumRate'], meta: { name: 'IndustrialAccidentInsurancePremiumRate' } }
    /**
     * Find zero or one IndustrialAccidentInsurancePremiumRate that matches the filter.
     * @param {IndustrialAccidentInsurancePremiumRateFindUniqueArgs} args - Arguments to find a IndustrialAccidentInsurancePremiumRate
     * @example
     * // Get one IndustrialAccidentInsurancePremiumRate
     * const industrialAccidentInsurancePremiumRate = await prisma.industrialAccidentInsurancePremiumRate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IndustrialAccidentInsurancePremiumRateFindUniqueArgs>(args: SelectSubset<T, IndustrialAccidentInsurancePremiumRateFindUniqueArgs<ExtArgs>>): Prisma__IndustrialAccidentInsurancePremiumRateClient<$Result.GetResult<Prisma.$IndustrialAccidentInsurancePremiumRatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one IndustrialAccidentInsurancePremiumRate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {IndustrialAccidentInsurancePremiumRateFindUniqueOrThrowArgs} args - Arguments to find a IndustrialAccidentInsurancePremiumRate
     * @example
     * // Get one IndustrialAccidentInsurancePremiumRate
     * const industrialAccidentInsurancePremiumRate = await prisma.industrialAccidentInsurancePremiumRate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IndustrialAccidentInsurancePremiumRateFindUniqueOrThrowArgs>(args: SelectSubset<T, IndustrialAccidentInsurancePremiumRateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IndustrialAccidentInsurancePremiumRateClient<$Result.GetResult<Prisma.$IndustrialAccidentInsurancePremiumRatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first IndustrialAccidentInsurancePremiumRate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndustrialAccidentInsurancePremiumRateFindFirstArgs} args - Arguments to find a IndustrialAccidentInsurancePremiumRate
     * @example
     * // Get one IndustrialAccidentInsurancePremiumRate
     * const industrialAccidentInsurancePremiumRate = await prisma.industrialAccidentInsurancePremiumRate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IndustrialAccidentInsurancePremiumRateFindFirstArgs>(args?: SelectSubset<T, IndustrialAccidentInsurancePremiumRateFindFirstArgs<ExtArgs>>): Prisma__IndustrialAccidentInsurancePremiumRateClient<$Result.GetResult<Prisma.$IndustrialAccidentInsurancePremiumRatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first IndustrialAccidentInsurancePremiumRate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndustrialAccidentInsurancePremiumRateFindFirstOrThrowArgs} args - Arguments to find a IndustrialAccidentInsurancePremiumRate
     * @example
     * // Get one IndustrialAccidentInsurancePremiumRate
     * const industrialAccidentInsurancePremiumRate = await prisma.industrialAccidentInsurancePremiumRate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IndustrialAccidentInsurancePremiumRateFindFirstOrThrowArgs>(args?: SelectSubset<T, IndustrialAccidentInsurancePremiumRateFindFirstOrThrowArgs<ExtArgs>>): Prisma__IndustrialAccidentInsurancePremiumRateClient<$Result.GetResult<Prisma.$IndustrialAccidentInsurancePremiumRatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more IndustrialAccidentInsurancePremiumRates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndustrialAccidentInsurancePremiumRateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IndustrialAccidentInsurancePremiumRates
     * const industrialAccidentInsurancePremiumRates = await prisma.industrialAccidentInsurancePremiumRate.findMany()
     * 
     * // Get first 10 IndustrialAccidentInsurancePremiumRates
     * const industrialAccidentInsurancePremiumRates = await prisma.industrialAccidentInsurancePremiumRate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const industrialAccidentInsurancePremiumRateWithIdOnly = await prisma.industrialAccidentInsurancePremiumRate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IndustrialAccidentInsurancePremiumRateFindManyArgs>(args?: SelectSubset<T, IndustrialAccidentInsurancePremiumRateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IndustrialAccidentInsurancePremiumRatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a IndustrialAccidentInsurancePremiumRate.
     * @param {IndustrialAccidentInsurancePremiumRateCreateArgs} args - Arguments to create a IndustrialAccidentInsurancePremiumRate.
     * @example
     * // Create one IndustrialAccidentInsurancePremiumRate
     * const IndustrialAccidentInsurancePremiumRate = await prisma.industrialAccidentInsurancePremiumRate.create({
     *   data: {
     *     // ... data to create a IndustrialAccidentInsurancePremiumRate
     *   }
     * })
     * 
     */
    create<T extends IndustrialAccidentInsurancePremiumRateCreateArgs>(args: SelectSubset<T, IndustrialAccidentInsurancePremiumRateCreateArgs<ExtArgs>>): Prisma__IndustrialAccidentInsurancePremiumRateClient<$Result.GetResult<Prisma.$IndustrialAccidentInsurancePremiumRatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many IndustrialAccidentInsurancePremiumRates.
     * @param {IndustrialAccidentInsurancePremiumRateCreateManyArgs} args - Arguments to create many IndustrialAccidentInsurancePremiumRates.
     * @example
     * // Create many IndustrialAccidentInsurancePremiumRates
     * const industrialAccidentInsurancePremiumRate = await prisma.industrialAccidentInsurancePremiumRate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IndustrialAccidentInsurancePremiumRateCreateManyArgs>(args?: SelectSubset<T, IndustrialAccidentInsurancePremiumRateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many IndustrialAccidentInsurancePremiumRates and returns the data saved in the database.
     * @param {IndustrialAccidentInsurancePremiumRateCreateManyAndReturnArgs} args - Arguments to create many IndustrialAccidentInsurancePremiumRates.
     * @example
     * // Create many IndustrialAccidentInsurancePremiumRates
     * const industrialAccidentInsurancePremiumRate = await prisma.industrialAccidentInsurancePremiumRate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many IndustrialAccidentInsurancePremiumRates and only return the `id`
     * const industrialAccidentInsurancePremiumRateWithIdOnly = await prisma.industrialAccidentInsurancePremiumRate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IndustrialAccidentInsurancePremiumRateCreateManyAndReturnArgs>(args?: SelectSubset<T, IndustrialAccidentInsurancePremiumRateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IndustrialAccidentInsurancePremiumRatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a IndustrialAccidentInsurancePremiumRate.
     * @param {IndustrialAccidentInsurancePremiumRateDeleteArgs} args - Arguments to delete one IndustrialAccidentInsurancePremiumRate.
     * @example
     * // Delete one IndustrialAccidentInsurancePremiumRate
     * const IndustrialAccidentInsurancePremiumRate = await prisma.industrialAccidentInsurancePremiumRate.delete({
     *   where: {
     *     // ... filter to delete one IndustrialAccidentInsurancePremiumRate
     *   }
     * })
     * 
     */
    delete<T extends IndustrialAccidentInsurancePremiumRateDeleteArgs>(args: SelectSubset<T, IndustrialAccidentInsurancePremiumRateDeleteArgs<ExtArgs>>): Prisma__IndustrialAccidentInsurancePremiumRateClient<$Result.GetResult<Prisma.$IndustrialAccidentInsurancePremiumRatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one IndustrialAccidentInsurancePremiumRate.
     * @param {IndustrialAccidentInsurancePremiumRateUpdateArgs} args - Arguments to update one IndustrialAccidentInsurancePremiumRate.
     * @example
     * // Update one IndustrialAccidentInsurancePremiumRate
     * const industrialAccidentInsurancePremiumRate = await prisma.industrialAccidentInsurancePremiumRate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IndustrialAccidentInsurancePremiumRateUpdateArgs>(args: SelectSubset<T, IndustrialAccidentInsurancePremiumRateUpdateArgs<ExtArgs>>): Prisma__IndustrialAccidentInsurancePremiumRateClient<$Result.GetResult<Prisma.$IndustrialAccidentInsurancePremiumRatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more IndustrialAccidentInsurancePremiumRates.
     * @param {IndustrialAccidentInsurancePremiumRateDeleteManyArgs} args - Arguments to filter IndustrialAccidentInsurancePremiumRates to delete.
     * @example
     * // Delete a few IndustrialAccidentInsurancePremiumRates
     * const { count } = await prisma.industrialAccidentInsurancePremiumRate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IndustrialAccidentInsurancePremiumRateDeleteManyArgs>(args?: SelectSubset<T, IndustrialAccidentInsurancePremiumRateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IndustrialAccidentInsurancePremiumRates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndustrialAccidentInsurancePremiumRateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IndustrialAccidentInsurancePremiumRates
     * const industrialAccidentInsurancePremiumRate = await prisma.industrialAccidentInsurancePremiumRate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IndustrialAccidentInsurancePremiumRateUpdateManyArgs>(args: SelectSubset<T, IndustrialAccidentInsurancePremiumRateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IndustrialAccidentInsurancePremiumRates and returns the data updated in the database.
     * @param {IndustrialAccidentInsurancePremiumRateUpdateManyAndReturnArgs} args - Arguments to update many IndustrialAccidentInsurancePremiumRates.
     * @example
     * // Update many IndustrialAccidentInsurancePremiumRates
     * const industrialAccidentInsurancePremiumRate = await prisma.industrialAccidentInsurancePremiumRate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more IndustrialAccidentInsurancePremiumRates and only return the `id`
     * const industrialAccidentInsurancePremiumRateWithIdOnly = await prisma.industrialAccidentInsurancePremiumRate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends IndustrialAccidentInsurancePremiumRateUpdateManyAndReturnArgs>(args: SelectSubset<T, IndustrialAccidentInsurancePremiumRateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IndustrialAccidentInsurancePremiumRatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one IndustrialAccidentInsurancePremiumRate.
     * @param {IndustrialAccidentInsurancePremiumRateUpsertArgs} args - Arguments to update or create a IndustrialAccidentInsurancePremiumRate.
     * @example
     * // Update or create a IndustrialAccidentInsurancePremiumRate
     * const industrialAccidentInsurancePremiumRate = await prisma.industrialAccidentInsurancePremiumRate.upsert({
     *   create: {
     *     // ... data to create a IndustrialAccidentInsurancePremiumRate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IndustrialAccidentInsurancePremiumRate we want to update
     *   }
     * })
     */
    upsert<T extends IndustrialAccidentInsurancePremiumRateUpsertArgs>(args: SelectSubset<T, IndustrialAccidentInsurancePremiumRateUpsertArgs<ExtArgs>>): Prisma__IndustrialAccidentInsurancePremiumRateClient<$Result.GetResult<Prisma.$IndustrialAccidentInsurancePremiumRatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of IndustrialAccidentInsurancePremiumRates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndustrialAccidentInsurancePremiumRateCountArgs} args - Arguments to filter IndustrialAccidentInsurancePremiumRates to count.
     * @example
     * // Count the number of IndustrialAccidentInsurancePremiumRates
     * const count = await prisma.industrialAccidentInsurancePremiumRate.count({
     *   where: {
     *     // ... the filter for the IndustrialAccidentInsurancePremiumRates we want to count
     *   }
     * })
    **/
    count<T extends IndustrialAccidentInsurancePremiumRateCountArgs>(
      args?: Subset<T, IndustrialAccidentInsurancePremiumRateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IndustrialAccidentInsurancePremiumRateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IndustrialAccidentInsurancePremiumRate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndustrialAccidentInsurancePremiumRateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IndustrialAccidentInsurancePremiumRateAggregateArgs>(args: Subset<T, IndustrialAccidentInsurancePremiumRateAggregateArgs>): Prisma.PrismaPromise<GetIndustrialAccidentInsurancePremiumRateAggregateType<T>>

    /**
     * Group by IndustrialAccidentInsurancePremiumRate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndustrialAccidentInsurancePremiumRateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IndustrialAccidentInsurancePremiumRateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IndustrialAccidentInsurancePremiumRateGroupByArgs['orderBy'] }
        : { orderBy?: IndustrialAccidentInsurancePremiumRateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IndustrialAccidentInsurancePremiumRateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIndustrialAccidentInsurancePremiumRateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the IndustrialAccidentInsurancePremiumRate model
   */
  readonly fields: IndustrialAccidentInsurancePremiumRateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for IndustrialAccidentInsurancePremiumRate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IndustrialAccidentInsurancePremiumRateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    companyIndustryCodes<T extends IndustrialAccidentInsurancePremiumRate$companyIndustryCodesArgs<ExtArgs> = {}>(args?: Subset<T, IndustrialAccidentInsurancePremiumRate$companyIndustryCodesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyIndustryCodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the IndustrialAccidentInsurancePremiumRate model
   */
  interface IndustrialAccidentInsurancePremiumRateFieldRefs {
    readonly id: FieldRef<"IndustrialAccidentInsurancePremiumRate", 'Int'>
    readonly firstLevel: FieldRef<"IndustrialAccidentInsurancePremiumRate", 'String'>
    readonly firstLevelCode: FieldRef<"IndustrialAccidentInsurancePremiumRate", 'Int'>
    readonly secondLevel: FieldRef<"IndustrialAccidentInsurancePremiumRate", 'String'>
    readonly secondLevelCode: FieldRef<"IndustrialAccidentInsurancePremiumRate", 'Int'>
    readonly industryName: FieldRef<"IndustrialAccidentInsurancePremiumRate", 'String'>
    readonly industryCode: FieldRef<"IndustrialAccidentInsurancePremiumRate", 'Int'>
    readonly date: FieldRef<"IndustrialAccidentInsurancePremiumRate", 'String'>
    readonly rate: FieldRef<"IndustrialAccidentInsurancePremiumRate", 'Int'>
    readonly createdAt: FieldRef<"IndustrialAccidentInsurancePremiumRate", 'DateTime'>
    readonly updatedAt: FieldRef<"IndustrialAccidentInsurancePremiumRate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * IndustrialAccidentInsurancePremiumRate findUnique
   */
  export type IndustrialAccidentInsurancePremiumRateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndustrialAccidentInsurancePremiumRate
     */
    select?: IndustrialAccidentInsurancePremiumRateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IndustrialAccidentInsurancePremiumRate
     */
    omit?: IndustrialAccidentInsurancePremiumRateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustrialAccidentInsurancePremiumRateInclude<ExtArgs> | null
    /**
     * Filter, which IndustrialAccidentInsurancePremiumRate to fetch.
     */
    where: IndustrialAccidentInsurancePremiumRateWhereUniqueInput
  }

  /**
   * IndustrialAccidentInsurancePremiumRate findUniqueOrThrow
   */
  export type IndustrialAccidentInsurancePremiumRateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndustrialAccidentInsurancePremiumRate
     */
    select?: IndustrialAccidentInsurancePremiumRateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IndustrialAccidentInsurancePremiumRate
     */
    omit?: IndustrialAccidentInsurancePremiumRateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustrialAccidentInsurancePremiumRateInclude<ExtArgs> | null
    /**
     * Filter, which IndustrialAccidentInsurancePremiumRate to fetch.
     */
    where: IndustrialAccidentInsurancePremiumRateWhereUniqueInput
  }

  /**
   * IndustrialAccidentInsurancePremiumRate findFirst
   */
  export type IndustrialAccidentInsurancePremiumRateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndustrialAccidentInsurancePremiumRate
     */
    select?: IndustrialAccidentInsurancePremiumRateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IndustrialAccidentInsurancePremiumRate
     */
    omit?: IndustrialAccidentInsurancePremiumRateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustrialAccidentInsurancePremiumRateInclude<ExtArgs> | null
    /**
     * Filter, which IndustrialAccidentInsurancePremiumRate to fetch.
     */
    where?: IndustrialAccidentInsurancePremiumRateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IndustrialAccidentInsurancePremiumRates to fetch.
     */
    orderBy?: IndustrialAccidentInsurancePremiumRateOrderByWithRelationInput | IndustrialAccidentInsurancePremiumRateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IndustrialAccidentInsurancePremiumRates.
     */
    cursor?: IndustrialAccidentInsurancePremiumRateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IndustrialAccidentInsurancePremiumRates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IndustrialAccidentInsurancePremiumRates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IndustrialAccidentInsurancePremiumRates.
     */
    distinct?: IndustrialAccidentInsurancePremiumRateScalarFieldEnum | IndustrialAccidentInsurancePremiumRateScalarFieldEnum[]
  }

  /**
   * IndustrialAccidentInsurancePremiumRate findFirstOrThrow
   */
  export type IndustrialAccidentInsurancePremiumRateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndustrialAccidentInsurancePremiumRate
     */
    select?: IndustrialAccidentInsurancePremiumRateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IndustrialAccidentInsurancePremiumRate
     */
    omit?: IndustrialAccidentInsurancePremiumRateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustrialAccidentInsurancePremiumRateInclude<ExtArgs> | null
    /**
     * Filter, which IndustrialAccidentInsurancePremiumRate to fetch.
     */
    where?: IndustrialAccidentInsurancePremiumRateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IndustrialAccidentInsurancePremiumRates to fetch.
     */
    orderBy?: IndustrialAccidentInsurancePremiumRateOrderByWithRelationInput | IndustrialAccidentInsurancePremiumRateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IndustrialAccidentInsurancePremiumRates.
     */
    cursor?: IndustrialAccidentInsurancePremiumRateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IndustrialAccidentInsurancePremiumRates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IndustrialAccidentInsurancePremiumRates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IndustrialAccidentInsurancePremiumRates.
     */
    distinct?: IndustrialAccidentInsurancePremiumRateScalarFieldEnum | IndustrialAccidentInsurancePremiumRateScalarFieldEnum[]
  }

  /**
   * IndustrialAccidentInsurancePremiumRate findMany
   */
  export type IndustrialAccidentInsurancePremiumRateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndustrialAccidentInsurancePremiumRate
     */
    select?: IndustrialAccidentInsurancePremiumRateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IndustrialAccidentInsurancePremiumRate
     */
    omit?: IndustrialAccidentInsurancePremiumRateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustrialAccidentInsurancePremiumRateInclude<ExtArgs> | null
    /**
     * Filter, which IndustrialAccidentInsurancePremiumRates to fetch.
     */
    where?: IndustrialAccidentInsurancePremiumRateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IndustrialAccidentInsurancePremiumRates to fetch.
     */
    orderBy?: IndustrialAccidentInsurancePremiumRateOrderByWithRelationInput | IndustrialAccidentInsurancePremiumRateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IndustrialAccidentInsurancePremiumRates.
     */
    cursor?: IndustrialAccidentInsurancePremiumRateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IndustrialAccidentInsurancePremiumRates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IndustrialAccidentInsurancePremiumRates.
     */
    skip?: number
    distinct?: IndustrialAccidentInsurancePremiumRateScalarFieldEnum | IndustrialAccidentInsurancePremiumRateScalarFieldEnum[]
  }

  /**
   * IndustrialAccidentInsurancePremiumRate create
   */
  export type IndustrialAccidentInsurancePremiumRateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndustrialAccidentInsurancePremiumRate
     */
    select?: IndustrialAccidentInsurancePremiumRateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IndustrialAccidentInsurancePremiumRate
     */
    omit?: IndustrialAccidentInsurancePremiumRateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustrialAccidentInsurancePremiumRateInclude<ExtArgs> | null
    /**
     * The data needed to create a IndustrialAccidentInsurancePremiumRate.
     */
    data: XOR<IndustrialAccidentInsurancePremiumRateCreateInput, IndustrialAccidentInsurancePremiumRateUncheckedCreateInput>
  }

  /**
   * IndustrialAccidentInsurancePremiumRate createMany
   */
  export type IndustrialAccidentInsurancePremiumRateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many IndustrialAccidentInsurancePremiumRates.
     */
    data: IndustrialAccidentInsurancePremiumRateCreateManyInput | IndustrialAccidentInsurancePremiumRateCreateManyInput[]
  }

  /**
   * IndustrialAccidentInsurancePremiumRate createManyAndReturn
   */
  export type IndustrialAccidentInsurancePremiumRateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndustrialAccidentInsurancePremiumRate
     */
    select?: IndustrialAccidentInsurancePremiumRateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the IndustrialAccidentInsurancePremiumRate
     */
    omit?: IndustrialAccidentInsurancePremiumRateOmit<ExtArgs> | null
    /**
     * The data used to create many IndustrialAccidentInsurancePremiumRates.
     */
    data: IndustrialAccidentInsurancePremiumRateCreateManyInput | IndustrialAccidentInsurancePremiumRateCreateManyInput[]
  }

  /**
   * IndustrialAccidentInsurancePremiumRate update
   */
  export type IndustrialAccidentInsurancePremiumRateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndustrialAccidentInsurancePremiumRate
     */
    select?: IndustrialAccidentInsurancePremiumRateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IndustrialAccidentInsurancePremiumRate
     */
    omit?: IndustrialAccidentInsurancePremiumRateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustrialAccidentInsurancePremiumRateInclude<ExtArgs> | null
    /**
     * The data needed to update a IndustrialAccidentInsurancePremiumRate.
     */
    data: XOR<IndustrialAccidentInsurancePremiumRateUpdateInput, IndustrialAccidentInsurancePremiumRateUncheckedUpdateInput>
    /**
     * Choose, which IndustrialAccidentInsurancePremiumRate to update.
     */
    where: IndustrialAccidentInsurancePremiumRateWhereUniqueInput
  }

  /**
   * IndustrialAccidentInsurancePremiumRate updateMany
   */
  export type IndustrialAccidentInsurancePremiumRateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update IndustrialAccidentInsurancePremiumRates.
     */
    data: XOR<IndustrialAccidentInsurancePremiumRateUpdateManyMutationInput, IndustrialAccidentInsurancePremiumRateUncheckedUpdateManyInput>
    /**
     * Filter which IndustrialAccidentInsurancePremiumRates to update
     */
    where?: IndustrialAccidentInsurancePremiumRateWhereInput
    /**
     * Limit how many IndustrialAccidentInsurancePremiumRates to update.
     */
    limit?: number
  }

  /**
   * IndustrialAccidentInsurancePremiumRate updateManyAndReturn
   */
  export type IndustrialAccidentInsurancePremiumRateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndustrialAccidentInsurancePremiumRate
     */
    select?: IndustrialAccidentInsurancePremiumRateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the IndustrialAccidentInsurancePremiumRate
     */
    omit?: IndustrialAccidentInsurancePremiumRateOmit<ExtArgs> | null
    /**
     * The data used to update IndustrialAccidentInsurancePremiumRates.
     */
    data: XOR<IndustrialAccidentInsurancePremiumRateUpdateManyMutationInput, IndustrialAccidentInsurancePremiumRateUncheckedUpdateManyInput>
    /**
     * Filter which IndustrialAccidentInsurancePremiumRates to update
     */
    where?: IndustrialAccidentInsurancePremiumRateWhereInput
    /**
     * Limit how many IndustrialAccidentInsurancePremiumRates to update.
     */
    limit?: number
  }

  /**
   * IndustrialAccidentInsurancePremiumRate upsert
   */
  export type IndustrialAccidentInsurancePremiumRateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndustrialAccidentInsurancePremiumRate
     */
    select?: IndustrialAccidentInsurancePremiumRateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IndustrialAccidentInsurancePremiumRate
     */
    omit?: IndustrialAccidentInsurancePremiumRateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustrialAccidentInsurancePremiumRateInclude<ExtArgs> | null
    /**
     * The filter to search for the IndustrialAccidentInsurancePremiumRate to update in case it exists.
     */
    where: IndustrialAccidentInsurancePremiumRateWhereUniqueInput
    /**
     * In case the IndustrialAccidentInsurancePremiumRate found by the `where` argument doesn't exist, create a new IndustrialAccidentInsurancePremiumRate with this data.
     */
    create: XOR<IndustrialAccidentInsurancePremiumRateCreateInput, IndustrialAccidentInsurancePremiumRateUncheckedCreateInput>
    /**
     * In case the IndustrialAccidentInsurancePremiumRate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IndustrialAccidentInsurancePremiumRateUpdateInput, IndustrialAccidentInsurancePremiumRateUncheckedUpdateInput>
  }

  /**
   * IndustrialAccidentInsurancePremiumRate delete
   */
  export type IndustrialAccidentInsurancePremiumRateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndustrialAccidentInsurancePremiumRate
     */
    select?: IndustrialAccidentInsurancePremiumRateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IndustrialAccidentInsurancePremiumRate
     */
    omit?: IndustrialAccidentInsurancePremiumRateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustrialAccidentInsurancePremiumRateInclude<ExtArgs> | null
    /**
     * Filter which IndustrialAccidentInsurancePremiumRate to delete.
     */
    where: IndustrialAccidentInsurancePremiumRateWhereUniqueInput
  }

  /**
   * IndustrialAccidentInsurancePremiumRate deleteMany
   */
  export type IndustrialAccidentInsurancePremiumRateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IndustrialAccidentInsurancePremiumRates to delete
     */
    where?: IndustrialAccidentInsurancePremiumRateWhereInput
    /**
     * Limit how many IndustrialAccidentInsurancePremiumRates to delete.
     */
    limit?: number
  }

  /**
   * IndustrialAccidentInsurancePremiumRate.companyIndustryCodes
   */
  export type IndustrialAccidentInsurancePremiumRate$companyIndustryCodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyIndustryCode
     */
    select?: CompanyIndustryCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyIndustryCode
     */
    omit?: CompanyIndustryCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIndustryCodeInclude<ExtArgs> | null
    where?: CompanyIndustryCodeWhereInput
    orderBy?: CompanyIndustryCodeOrderByWithRelationInput | CompanyIndustryCodeOrderByWithRelationInput[]
    cursor?: CompanyIndustryCodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyIndustryCodeScalarFieldEnum | CompanyIndustryCodeScalarFieldEnum[]
  }

  /**
   * IndustrialAccidentInsurancePremiumRate without action
   */
  export type IndustrialAccidentInsurancePremiumRateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndustrialAccidentInsurancePremiumRate
     */
    select?: IndustrialAccidentInsurancePremiumRateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IndustrialAccidentInsurancePremiumRate
     */
    omit?: IndustrialAccidentInsurancePremiumRateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustrialAccidentInsurancePremiumRateInclude<ExtArgs> | null
  }


  /**
   * Model CompanyIndustryCode
   */

  export type AggregateCompanyIndustryCode = {
    _count: CompanyIndustryCodeCountAggregateOutputType | null
    _avg: CompanyIndustryCodeAvgAggregateOutputType | null
    _sum: CompanyIndustryCodeSumAggregateOutputType | null
    _min: CompanyIndustryCodeMinAggregateOutputType | null
    _max: CompanyIndustryCodeMaxAggregateOutputType | null
  }

  export type CompanyIndustryCodeAvgAggregateOutputType = {
    id: number | null
    companyId: number | null
    industryCode: number | null
  }

  export type CompanyIndustryCodeSumAggregateOutputType = {
    id: number | null
    companyId: number | null
    industryCode: number | null
  }

  export type CompanyIndustryCodeMinAggregateOutputType = {
    id: number | null
    companyId: number | null
    industryCode: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyIndustryCodeMaxAggregateOutputType = {
    id: number | null
    companyId: number | null
    industryCode: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyIndustryCodeCountAggregateOutputType = {
    id: number
    companyId: number
    industryCode: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CompanyIndustryCodeAvgAggregateInputType = {
    id?: true
    companyId?: true
    industryCode?: true
  }

  export type CompanyIndustryCodeSumAggregateInputType = {
    id?: true
    companyId?: true
    industryCode?: true
  }

  export type CompanyIndustryCodeMinAggregateInputType = {
    id?: true
    companyId?: true
    industryCode?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyIndustryCodeMaxAggregateInputType = {
    id?: true
    companyId?: true
    industryCode?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyIndustryCodeCountAggregateInputType = {
    id?: true
    companyId?: true
    industryCode?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CompanyIndustryCodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanyIndustryCode to aggregate.
     */
    where?: CompanyIndustryCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyIndustryCodes to fetch.
     */
    orderBy?: CompanyIndustryCodeOrderByWithRelationInput | CompanyIndustryCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyIndustryCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyIndustryCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyIndustryCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompanyIndustryCodes
    **/
    _count?: true | CompanyIndustryCodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyIndustryCodeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanyIndustryCodeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyIndustryCodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyIndustryCodeMaxAggregateInputType
  }

  export type GetCompanyIndustryCodeAggregateType<T extends CompanyIndustryCodeAggregateArgs> = {
        [P in keyof T & keyof AggregateCompanyIndustryCode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompanyIndustryCode[P]>
      : GetScalarType<T[P], AggregateCompanyIndustryCode[P]>
  }




  export type CompanyIndustryCodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyIndustryCodeWhereInput
    orderBy?: CompanyIndustryCodeOrderByWithAggregationInput | CompanyIndustryCodeOrderByWithAggregationInput[]
    by: CompanyIndustryCodeScalarFieldEnum[] | CompanyIndustryCodeScalarFieldEnum
    having?: CompanyIndustryCodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyIndustryCodeCountAggregateInputType | true
    _avg?: CompanyIndustryCodeAvgAggregateInputType
    _sum?: CompanyIndustryCodeSumAggregateInputType
    _min?: CompanyIndustryCodeMinAggregateInputType
    _max?: CompanyIndustryCodeMaxAggregateInputType
  }

  export type CompanyIndustryCodeGroupByOutputType = {
    id: number
    companyId: number
    industryCode: number
    createdAt: Date
    updatedAt: Date
    _count: CompanyIndustryCodeCountAggregateOutputType | null
    _avg: CompanyIndustryCodeAvgAggregateOutputType | null
    _sum: CompanyIndustryCodeSumAggregateOutputType | null
    _min: CompanyIndustryCodeMinAggregateOutputType | null
    _max: CompanyIndustryCodeMaxAggregateOutputType | null
  }

  type GetCompanyIndustryCodeGroupByPayload<T extends CompanyIndustryCodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyIndustryCodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyIndustryCodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyIndustryCodeGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyIndustryCodeGroupByOutputType[P]>
        }
      >
    >


  export type CompanyIndustryCodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    industryCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    industrialAccidentInsurancePremiumRate?: boolean | IndustrialAccidentInsurancePremiumRateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyIndustryCode"]>

  export type CompanyIndustryCodeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    industryCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    industrialAccidentInsurancePremiumRate?: boolean | IndustrialAccidentInsurancePremiumRateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyIndustryCode"]>

  export type CompanyIndustryCodeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    industryCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    industrialAccidentInsurancePremiumRate?: boolean | IndustrialAccidentInsurancePremiumRateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyIndustryCode"]>

  export type CompanyIndustryCodeSelectScalar = {
    id?: boolean
    companyId?: boolean
    industryCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CompanyIndustryCodeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "industryCode" | "createdAt" | "updatedAt", ExtArgs["result"]["companyIndustryCode"]>
  export type CompanyIndustryCodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    industrialAccidentInsurancePremiumRate?: boolean | IndustrialAccidentInsurancePremiumRateDefaultArgs<ExtArgs>
  }
  export type CompanyIndustryCodeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    industrialAccidentInsurancePremiumRate?: boolean | IndustrialAccidentInsurancePremiumRateDefaultArgs<ExtArgs>
  }
  export type CompanyIndustryCodeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    industrialAccidentInsurancePremiumRate?: boolean | IndustrialAccidentInsurancePremiumRateDefaultArgs<ExtArgs>
  }

  export type $CompanyIndustryCodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CompanyIndustryCode"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      industrialAccidentInsurancePremiumRate: Prisma.$IndustrialAccidentInsurancePremiumRatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      companyId: number
      industryCode: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["companyIndustryCode"]>
    composites: {}
  }

  type CompanyIndustryCodeGetPayload<S extends boolean | null | undefined | CompanyIndustryCodeDefaultArgs> = $Result.GetResult<Prisma.$CompanyIndustryCodePayload, S>

  type CompanyIndustryCodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompanyIndustryCodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompanyIndustryCodeCountAggregateInputType | true
    }

  export interface CompanyIndustryCodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompanyIndustryCode'], meta: { name: 'CompanyIndustryCode' } }
    /**
     * Find zero or one CompanyIndustryCode that matches the filter.
     * @param {CompanyIndustryCodeFindUniqueArgs} args - Arguments to find a CompanyIndustryCode
     * @example
     * // Get one CompanyIndustryCode
     * const companyIndustryCode = await prisma.companyIndustryCode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyIndustryCodeFindUniqueArgs>(args: SelectSubset<T, CompanyIndustryCodeFindUniqueArgs<ExtArgs>>): Prisma__CompanyIndustryCodeClient<$Result.GetResult<Prisma.$CompanyIndustryCodePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CompanyIndustryCode that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompanyIndustryCodeFindUniqueOrThrowArgs} args - Arguments to find a CompanyIndustryCode
     * @example
     * // Get one CompanyIndustryCode
     * const companyIndustryCode = await prisma.companyIndustryCode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyIndustryCodeFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyIndustryCodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyIndustryCodeClient<$Result.GetResult<Prisma.$CompanyIndustryCodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompanyIndustryCode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyIndustryCodeFindFirstArgs} args - Arguments to find a CompanyIndustryCode
     * @example
     * // Get one CompanyIndustryCode
     * const companyIndustryCode = await prisma.companyIndustryCode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyIndustryCodeFindFirstArgs>(args?: SelectSubset<T, CompanyIndustryCodeFindFirstArgs<ExtArgs>>): Prisma__CompanyIndustryCodeClient<$Result.GetResult<Prisma.$CompanyIndustryCodePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompanyIndustryCode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyIndustryCodeFindFirstOrThrowArgs} args - Arguments to find a CompanyIndustryCode
     * @example
     * // Get one CompanyIndustryCode
     * const companyIndustryCode = await prisma.companyIndustryCode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyIndustryCodeFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyIndustryCodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyIndustryCodeClient<$Result.GetResult<Prisma.$CompanyIndustryCodePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CompanyIndustryCodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyIndustryCodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompanyIndustryCodes
     * const companyIndustryCodes = await prisma.companyIndustryCode.findMany()
     * 
     * // Get first 10 CompanyIndustryCodes
     * const companyIndustryCodes = await prisma.companyIndustryCode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyIndustryCodeWithIdOnly = await prisma.companyIndustryCode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyIndustryCodeFindManyArgs>(args?: SelectSubset<T, CompanyIndustryCodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyIndustryCodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CompanyIndustryCode.
     * @param {CompanyIndustryCodeCreateArgs} args - Arguments to create a CompanyIndustryCode.
     * @example
     * // Create one CompanyIndustryCode
     * const CompanyIndustryCode = await prisma.companyIndustryCode.create({
     *   data: {
     *     // ... data to create a CompanyIndustryCode
     *   }
     * })
     * 
     */
    create<T extends CompanyIndustryCodeCreateArgs>(args: SelectSubset<T, CompanyIndustryCodeCreateArgs<ExtArgs>>): Prisma__CompanyIndustryCodeClient<$Result.GetResult<Prisma.$CompanyIndustryCodePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CompanyIndustryCodes.
     * @param {CompanyIndustryCodeCreateManyArgs} args - Arguments to create many CompanyIndustryCodes.
     * @example
     * // Create many CompanyIndustryCodes
     * const companyIndustryCode = await prisma.companyIndustryCode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyIndustryCodeCreateManyArgs>(args?: SelectSubset<T, CompanyIndustryCodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CompanyIndustryCodes and returns the data saved in the database.
     * @param {CompanyIndustryCodeCreateManyAndReturnArgs} args - Arguments to create many CompanyIndustryCodes.
     * @example
     * // Create many CompanyIndustryCodes
     * const companyIndustryCode = await prisma.companyIndustryCode.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CompanyIndustryCodes and only return the `id`
     * const companyIndustryCodeWithIdOnly = await prisma.companyIndustryCode.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyIndustryCodeCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyIndustryCodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyIndustryCodePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CompanyIndustryCode.
     * @param {CompanyIndustryCodeDeleteArgs} args - Arguments to delete one CompanyIndustryCode.
     * @example
     * // Delete one CompanyIndustryCode
     * const CompanyIndustryCode = await prisma.companyIndustryCode.delete({
     *   where: {
     *     // ... filter to delete one CompanyIndustryCode
     *   }
     * })
     * 
     */
    delete<T extends CompanyIndustryCodeDeleteArgs>(args: SelectSubset<T, CompanyIndustryCodeDeleteArgs<ExtArgs>>): Prisma__CompanyIndustryCodeClient<$Result.GetResult<Prisma.$CompanyIndustryCodePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CompanyIndustryCode.
     * @param {CompanyIndustryCodeUpdateArgs} args - Arguments to update one CompanyIndustryCode.
     * @example
     * // Update one CompanyIndustryCode
     * const companyIndustryCode = await prisma.companyIndustryCode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyIndustryCodeUpdateArgs>(args: SelectSubset<T, CompanyIndustryCodeUpdateArgs<ExtArgs>>): Prisma__CompanyIndustryCodeClient<$Result.GetResult<Prisma.$CompanyIndustryCodePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CompanyIndustryCodes.
     * @param {CompanyIndustryCodeDeleteManyArgs} args - Arguments to filter CompanyIndustryCodes to delete.
     * @example
     * // Delete a few CompanyIndustryCodes
     * const { count } = await prisma.companyIndustryCode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyIndustryCodeDeleteManyArgs>(args?: SelectSubset<T, CompanyIndustryCodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompanyIndustryCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyIndustryCodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompanyIndustryCodes
     * const companyIndustryCode = await prisma.companyIndustryCode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyIndustryCodeUpdateManyArgs>(args: SelectSubset<T, CompanyIndustryCodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompanyIndustryCodes and returns the data updated in the database.
     * @param {CompanyIndustryCodeUpdateManyAndReturnArgs} args - Arguments to update many CompanyIndustryCodes.
     * @example
     * // Update many CompanyIndustryCodes
     * const companyIndustryCode = await prisma.companyIndustryCode.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CompanyIndustryCodes and only return the `id`
     * const companyIndustryCodeWithIdOnly = await prisma.companyIndustryCode.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompanyIndustryCodeUpdateManyAndReturnArgs>(args: SelectSubset<T, CompanyIndustryCodeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyIndustryCodePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CompanyIndustryCode.
     * @param {CompanyIndustryCodeUpsertArgs} args - Arguments to update or create a CompanyIndustryCode.
     * @example
     * // Update or create a CompanyIndustryCode
     * const companyIndustryCode = await prisma.companyIndustryCode.upsert({
     *   create: {
     *     // ... data to create a CompanyIndustryCode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompanyIndustryCode we want to update
     *   }
     * })
     */
    upsert<T extends CompanyIndustryCodeUpsertArgs>(args: SelectSubset<T, CompanyIndustryCodeUpsertArgs<ExtArgs>>): Prisma__CompanyIndustryCodeClient<$Result.GetResult<Prisma.$CompanyIndustryCodePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CompanyIndustryCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyIndustryCodeCountArgs} args - Arguments to filter CompanyIndustryCodes to count.
     * @example
     * // Count the number of CompanyIndustryCodes
     * const count = await prisma.companyIndustryCode.count({
     *   where: {
     *     // ... the filter for the CompanyIndustryCodes we want to count
     *   }
     * })
    **/
    count<T extends CompanyIndustryCodeCountArgs>(
      args?: Subset<T, CompanyIndustryCodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyIndustryCodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompanyIndustryCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyIndustryCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyIndustryCodeAggregateArgs>(args: Subset<T, CompanyIndustryCodeAggregateArgs>): Prisma.PrismaPromise<GetCompanyIndustryCodeAggregateType<T>>

    /**
     * Group by CompanyIndustryCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyIndustryCodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyIndustryCodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyIndustryCodeGroupByArgs['orderBy'] }
        : { orderBy?: CompanyIndustryCodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyIndustryCodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyIndustryCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CompanyIndustryCode model
   */
  readonly fields: CompanyIndustryCodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CompanyIndustryCode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyIndustryCodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    industrialAccidentInsurancePremiumRate<T extends IndustrialAccidentInsurancePremiumRateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IndustrialAccidentInsurancePremiumRateDefaultArgs<ExtArgs>>): Prisma__IndustrialAccidentInsurancePremiumRateClient<$Result.GetResult<Prisma.$IndustrialAccidentInsurancePremiumRatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CompanyIndustryCode model
   */
  interface CompanyIndustryCodeFieldRefs {
    readonly id: FieldRef<"CompanyIndustryCode", 'Int'>
    readonly companyId: FieldRef<"CompanyIndustryCode", 'Int'>
    readonly industryCode: FieldRef<"CompanyIndustryCode", 'Int'>
    readonly createdAt: FieldRef<"CompanyIndustryCode", 'DateTime'>
    readonly updatedAt: FieldRef<"CompanyIndustryCode", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CompanyIndustryCode findUnique
   */
  export type CompanyIndustryCodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyIndustryCode
     */
    select?: CompanyIndustryCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyIndustryCode
     */
    omit?: CompanyIndustryCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIndustryCodeInclude<ExtArgs> | null
    /**
     * Filter, which CompanyIndustryCode to fetch.
     */
    where: CompanyIndustryCodeWhereUniqueInput
  }

  /**
   * CompanyIndustryCode findUniqueOrThrow
   */
  export type CompanyIndustryCodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyIndustryCode
     */
    select?: CompanyIndustryCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyIndustryCode
     */
    omit?: CompanyIndustryCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIndustryCodeInclude<ExtArgs> | null
    /**
     * Filter, which CompanyIndustryCode to fetch.
     */
    where: CompanyIndustryCodeWhereUniqueInput
  }

  /**
   * CompanyIndustryCode findFirst
   */
  export type CompanyIndustryCodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyIndustryCode
     */
    select?: CompanyIndustryCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyIndustryCode
     */
    omit?: CompanyIndustryCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIndustryCodeInclude<ExtArgs> | null
    /**
     * Filter, which CompanyIndustryCode to fetch.
     */
    where?: CompanyIndustryCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyIndustryCodes to fetch.
     */
    orderBy?: CompanyIndustryCodeOrderByWithRelationInput | CompanyIndustryCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyIndustryCodes.
     */
    cursor?: CompanyIndustryCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyIndustryCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyIndustryCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyIndustryCodes.
     */
    distinct?: CompanyIndustryCodeScalarFieldEnum | CompanyIndustryCodeScalarFieldEnum[]
  }

  /**
   * CompanyIndustryCode findFirstOrThrow
   */
  export type CompanyIndustryCodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyIndustryCode
     */
    select?: CompanyIndustryCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyIndustryCode
     */
    omit?: CompanyIndustryCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIndustryCodeInclude<ExtArgs> | null
    /**
     * Filter, which CompanyIndustryCode to fetch.
     */
    where?: CompanyIndustryCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyIndustryCodes to fetch.
     */
    orderBy?: CompanyIndustryCodeOrderByWithRelationInput | CompanyIndustryCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyIndustryCodes.
     */
    cursor?: CompanyIndustryCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyIndustryCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyIndustryCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyIndustryCodes.
     */
    distinct?: CompanyIndustryCodeScalarFieldEnum | CompanyIndustryCodeScalarFieldEnum[]
  }

  /**
   * CompanyIndustryCode findMany
   */
  export type CompanyIndustryCodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyIndustryCode
     */
    select?: CompanyIndustryCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyIndustryCode
     */
    omit?: CompanyIndustryCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIndustryCodeInclude<ExtArgs> | null
    /**
     * Filter, which CompanyIndustryCodes to fetch.
     */
    where?: CompanyIndustryCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyIndustryCodes to fetch.
     */
    orderBy?: CompanyIndustryCodeOrderByWithRelationInput | CompanyIndustryCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompanyIndustryCodes.
     */
    cursor?: CompanyIndustryCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyIndustryCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyIndustryCodes.
     */
    skip?: number
    distinct?: CompanyIndustryCodeScalarFieldEnum | CompanyIndustryCodeScalarFieldEnum[]
  }

  /**
   * CompanyIndustryCode create
   */
  export type CompanyIndustryCodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyIndustryCode
     */
    select?: CompanyIndustryCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyIndustryCode
     */
    omit?: CompanyIndustryCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIndustryCodeInclude<ExtArgs> | null
    /**
     * The data needed to create a CompanyIndustryCode.
     */
    data: XOR<CompanyIndustryCodeCreateInput, CompanyIndustryCodeUncheckedCreateInput>
  }

  /**
   * CompanyIndustryCode createMany
   */
  export type CompanyIndustryCodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CompanyIndustryCodes.
     */
    data: CompanyIndustryCodeCreateManyInput | CompanyIndustryCodeCreateManyInput[]
  }

  /**
   * CompanyIndustryCode createManyAndReturn
   */
  export type CompanyIndustryCodeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyIndustryCode
     */
    select?: CompanyIndustryCodeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyIndustryCode
     */
    omit?: CompanyIndustryCodeOmit<ExtArgs> | null
    /**
     * The data used to create many CompanyIndustryCodes.
     */
    data: CompanyIndustryCodeCreateManyInput | CompanyIndustryCodeCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIndustryCodeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompanyIndustryCode update
   */
  export type CompanyIndustryCodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyIndustryCode
     */
    select?: CompanyIndustryCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyIndustryCode
     */
    omit?: CompanyIndustryCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIndustryCodeInclude<ExtArgs> | null
    /**
     * The data needed to update a CompanyIndustryCode.
     */
    data: XOR<CompanyIndustryCodeUpdateInput, CompanyIndustryCodeUncheckedUpdateInput>
    /**
     * Choose, which CompanyIndustryCode to update.
     */
    where: CompanyIndustryCodeWhereUniqueInput
  }

  /**
   * CompanyIndustryCode updateMany
   */
  export type CompanyIndustryCodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CompanyIndustryCodes.
     */
    data: XOR<CompanyIndustryCodeUpdateManyMutationInput, CompanyIndustryCodeUncheckedUpdateManyInput>
    /**
     * Filter which CompanyIndustryCodes to update
     */
    where?: CompanyIndustryCodeWhereInput
    /**
     * Limit how many CompanyIndustryCodes to update.
     */
    limit?: number
  }

  /**
   * CompanyIndustryCode updateManyAndReturn
   */
  export type CompanyIndustryCodeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyIndustryCode
     */
    select?: CompanyIndustryCodeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyIndustryCode
     */
    omit?: CompanyIndustryCodeOmit<ExtArgs> | null
    /**
     * The data used to update CompanyIndustryCodes.
     */
    data: XOR<CompanyIndustryCodeUpdateManyMutationInput, CompanyIndustryCodeUncheckedUpdateManyInput>
    /**
     * Filter which CompanyIndustryCodes to update
     */
    where?: CompanyIndustryCodeWhereInput
    /**
     * Limit how many CompanyIndustryCodes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIndustryCodeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompanyIndustryCode upsert
   */
  export type CompanyIndustryCodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyIndustryCode
     */
    select?: CompanyIndustryCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyIndustryCode
     */
    omit?: CompanyIndustryCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIndustryCodeInclude<ExtArgs> | null
    /**
     * The filter to search for the CompanyIndustryCode to update in case it exists.
     */
    where: CompanyIndustryCodeWhereUniqueInput
    /**
     * In case the CompanyIndustryCode found by the `where` argument doesn't exist, create a new CompanyIndustryCode with this data.
     */
    create: XOR<CompanyIndustryCodeCreateInput, CompanyIndustryCodeUncheckedCreateInput>
    /**
     * In case the CompanyIndustryCode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyIndustryCodeUpdateInput, CompanyIndustryCodeUncheckedUpdateInput>
  }

  /**
   * CompanyIndustryCode delete
   */
  export type CompanyIndustryCodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyIndustryCode
     */
    select?: CompanyIndustryCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyIndustryCode
     */
    omit?: CompanyIndustryCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIndustryCodeInclude<ExtArgs> | null
    /**
     * Filter which CompanyIndustryCode to delete.
     */
    where: CompanyIndustryCodeWhereUniqueInput
  }

  /**
   * CompanyIndustryCode deleteMany
   */
  export type CompanyIndustryCodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanyIndustryCodes to delete
     */
    where?: CompanyIndustryCodeWhereInput
    /**
     * Limit how many CompanyIndustryCodes to delete.
     */
    limit?: number
  }

  /**
   * CompanyIndustryCode without action
   */
  export type CompanyIndustryCodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyIndustryCode
     */
    select?: CompanyIndustryCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyIndustryCode
     */
    omit?: CompanyIndustryCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIndustryCodeInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    birthday: 'birthday',
    address: 'address',
    phone: 'phone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const PrimaryProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    profileId: 'profileId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PrimaryProfileScalarFieldEnum = (typeof PrimaryProfileScalarFieldEnum)[keyof typeof PrimaryProfileScalarFieldEnum]


  export const WorkspaceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkspaceScalarFieldEnum = (typeof WorkspaceScalarFieldEnum)[keyof typeof WorkspaceScalarFieldEnum]


  export const WorkspaceMemberScalarFieldEnum: {
    id: 'id',
    workspaceId: 'workspaceId',
    userId: 'userId',
    profileId: 'profileId',
    inviterId: 'inviterId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkspaceMemberScalarFieldEnum = (typeof WorkspaceMemberScalarFieldEnum)[keyof typeof WorkspaceMemberScalarFieldEnum]


  export const WorkspaceOwnerScalarFieldEnum: {
    id: 'id',
    workspaceId: 'workspaceId',
    workspaceMemberId: 'workspaceMemberId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkspaceOwnerScalarFieldEnum = (typeof WorkspaceOwnerScalarFieldEnum)[keyof typeof WorkspaceOwnerScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    workspaceId: 'workspaceId',
    name: 'name',
    location: 'location',
    businessNumber: 'businessNumber',
    managementNumber: 'managementNumber',
    employeeCount: 'employeeCount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdBy: 'createdBy'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const EmployeeScalarFieldEnum: {
    id: 'id',
    talentPoolId: 'talentPoolId',
    companyId: 'companyId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


  export const DayLaborerScalarFieldEnum: {
    id: 'id',
    talentPoolId: 'talentPoolId',
    companyId: 'companyId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DayLaborerScalarFieldEnum = (typeof DayLaborerScalarFieldEnum)[keyof typeof DayLaborerScalarFieldEnum]


  export const OwnerScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    companyId: 'companyId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OwnerScalarFieldEnum = (typeof OwnerScalarFieldEnum)[keyof typeof OwnerScalarFieldEnum]


  export const ProjectOwnerScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    name: 'name',
    address: 'address',
    phone: 'phone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProjectOwnerScalarFieldEnum = (typeof ProjectOwnerScalarFieldEnum)[keyof typeof ProjectOwnerScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    workspaceId: 'workspaceId',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const SiteScalarFieldEnum: {
    id: 'id',
    workspaceId: 'workspaceId',
    projectId: 'projectId',
    companyId: 'companyId',
    name: 'name',
    location: 'location',
    startDate: 'startDate',
    endDate: 'endDate',
    managementNumber: 'managementNumber',
    memo: 'memo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SiteScalarFieldEnum = (typeof SiteScalarFieldEnum)[keyof typeof SiteScalarFieldEnum]


  export const SiteAttendanceScalarFieldEnum: {
    id: 'id',
    talentPoolId: 'talentPoolId',
    siteId: 'siteId',
    date: 'date',
    startTime: 'startTime',
    endTime: 'endTime',
    amount: 'amount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SiteAttendanceScalarFieldEnum = (typeof SiteAttendanceScalarFieldEnum)[keyof typeof SiteAttendanceScalarFieldEnum]


  export const TalentPoolScalarFieldEnum: {
    id: 'id',
    workspaceId: 'workspaceId',
    profileId: 'profileId',
    name: 'name',
    birthday: 'birthday',
    phone: 'phone',
    address: 'address',
    memo: 'memo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TalentPoolScalarFieldEnum = (typeof TalentPoolScalarFieldEnum)[keyof typeof TalentPoolScalarFieldEnum]


  export const IndustrialAccidentInsurancePremiumRateScalarFieldEnum: {
    id: 'id',
    firstLevel: 'firstLevel',
    firstLevelCode: 'firstLevelCode',
    secondLevel: 'secondLevel',
    secondLevelCode: 'secondLevelCode',
    industryName: 'industryName',
    industryCode: 'industryCode',
    date: 'date',
    rate: 'rate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type IndustrialAccidentInsurancePremiumRateScalarFieldEnum = (typeof IndustrialAccidentInsurancePremiumRateScalarFieldEnum)[keyof typeof IndustrialAccidentInsurancePremiumRateScalarFieldEnum]


  export const CompanyIndustryCodeScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    industryCode: 'industryCode',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CompanyIndustryCodeScalarFieldEnum = (typeof CompanyIndustryCodeScalarFieldEnum)[keyof typeof CompanyIndustryCodeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    primaryProfile?: XOR<PrimaryProfileNullableScalarRelationFilter, PrimaryProfileWhereInput> | null
    profiles?: ProfileListRelationFilter
    workspaceMembers?: WorkspaceMemberListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    primaryProfile?: PrimaryProfileOrderByWithRelationInput
    profiles?: ProfileOrderByRelationAggregateInput
    workspaceMembers?: WorkspaceMemberOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    primaryProfile?: XOR<PrimaryProfileNullableScalarRelationFilter, PrimaryProfileWhereInput> | null
    profiles?: ProfileListRelationFilter
    workspaceMembers?: WorkspaceMemberListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ProfileWhereInput = {
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    id?: IntFilter<"Profile"> | number
    userId?: IntNullableFilter<"Profile"> | number | null
    name?: StringFilter<"Profile"> | string
    birthday?: DateTimeNullableFilter<"Profile"> | Date | string | null
    address?: StringNullableFilter<"Profile"> | string | null
    phone?: StringNullableFilter<"Profile"> | string | null
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    talentPools?: TalentPoolListRelationFilter
    primaryProfile?: XOR<PrimaryProfileNullableScalarRelationFilter, PrimaryProfileWhereInput> | null
    workspaceMembers?: WorkspaceMemberListRelationFilter
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    name?: SortOrder
    birthday?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    talentPools?: TalentPoolOrderByRelationAggregateInput
    primaryProfile?: PrimaryProfileOrderByWithRelationInput
    workspaceMembers?: WorkspaceMemberOrderByRelationAggregateInput
  }

  export type ProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    userId?: IntNullableFilter<"Profile"> | number | null
    name?: StringFilter<"Profile"> | string
    birthday?: DateTimeNullableFilter<"Profile"> | Date | string | null
    address?: StringNullableFilter<"Profile"> | string | null
    phone?: StringNullableFilter<"Profile"> | string | null
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    talentPools?: TalentPoolListRelationFilter
    primaryProfile?: XOR<PrimaryProfileNullableScalarRelationFilter, PrimaryProfileWhereInput> | null
    workspaceMembers?: WorkspaceMemberListRelationFilter
  }, "id">

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    name?: SortOrder
    birthday?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _avg?: ProfileAvgOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
    _sum?: ProfileSumOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    OR?: ProfileScalarWhereWithAggregatesInput[]
    NOT?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Profile"> | number
    userId?: IntNullableWithAggregatesFilter<"Profile"> | number | null
    name?: StringWithAggregatesFilter<"Profile"> | string
    birthday?: DateTimeNullableWithAggregatesFilter<"Profile"> | Date | string | null
    address?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
  }

  export type PrimaryProfileWhereInput = {
    AND?: PrimaryProfileWhereInput | PrimaryProfileWhereInput[]
    OR?: PrimaryProfileWhereInput[]
    NOT?: PrimaryProfileWhereInput | PrimaryProfileWhereInput[]
    id?: IntFilter<"PrimaryProfile"> | number
    userId?: IntFilter<"PrimaryProfile"> | number
    profileId?: IntFilter<"PrimaryProfile"> | number
    createdAt?: DateTimeFilter<"PrimaryProfile"> | Date | string
    updatedAt?: DateTimeFilter<"PrimaryProfile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    profile?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
  }

  export type PrimaryProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    profileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    profile?: ProfileOrderByWithRelationInput
  }

  export type PrimaryProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    profileId?: number
    AND?: PrimaryProfileWhereInput | PrimaryProfileWhereInput[]
    OR?: PrimaryProfileWhereInput[]
    NOT?: PrimaryProfileWhereInput | PrimaryProfileWhereInput[]
    createdAt?: DateTimeFilter<"PrimaryProfile"> | Date | string
    updatedAt?: DateTimeFilter<"PrimaryProfile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    profile?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
  }, "id" | "userId" | "profileId">

  export type PrimaryProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    profileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PrimaryProfileCountOrderByAggregateInput
    _avg?: PrimaryProfileAvgOrderByAggregateInput
    _max?: PrimaryProfileMaxOrderByAggregateInput
    _min?: PrimaryProfileMinOrderByAggregateInput
    _sum?: PrimaryProfileSumOrderByAggregateInput
  }

  export type PrimaryProfileScalarWhereWithAggregatesInput = {
    AND?: PrimaryProfileScalarWhereWithAggregatesInput | PrimaryProfileScalarWhereWithAggregatesInput[]
    OR?: PrimaryProfileScalarWhereWithAggregatesInput[]
    NOT?: PrimaryProfileScalarWhereWithAggregatesInput | PrimaryProfileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PrimaryProfile"> | number
    userId?: IntWithAggregatesFilter<"PrimaryProfile"> | number
    profileId?: IntWithAggregatesFilter<"PrimaryProfile"> | number
    createdAt?: DateTimeWithAggregatesFilter<"PrimaryProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PrimaryProfile"> | Date | string
  }

  export type WorkspaceWhereInput = {
    AND?: WorkspaceWhereInput | WorkspaceWhereInput[]
    OR?: WorkspaceWhereInput[]
    NOT?: WorkspaceWhereInput | WorkspaceWhereInput[]
    id?: IntFilter<"Workspace"> | number
    name?: StringFilter<"Workspace"> | string
    createdAt?: DateTimeFilter<"Workspace"> | Date | string
    updatedAt?: DateTimeFilter<"Workspace"> | Date | string
    companies?: CompanyListRelationFilter
    sites?: SiteListRelationFilter
    talentPools?: TalentPoolListRelationFilter
    workspaceMembers?: WorkspaceMemberListRelationFilter
    workspaceOwners?: WorkspaceOwnerListRelationFilter
    projects?: ProjectListRelationFilter
  }

  export type WorkspaceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companies?: CompanyOrderByRelationAggregateInput
    sites?: SiteOrderByRelationAggregateInput
    talentPools?: TalentPoolOrderByRelationAggregateInput
    workspaceMembers?: WorkspaceMemberOrderByRelationAggregateInput
    workspaceOwners?: WorkspaceOwnerOrderByRelationAggregateInput
    projects?: ProjectOrderByRelationAggregateInput
  }

  export type WorkspaceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WorkspaceWhereInput | WorkspaceWhereInput[]
    OR?: WorkspaceWhereInput[]
    NOT?: WorkspaceWhereInput | WorkspaceWhereInput[]
    name?: StringFilter<"Workspace"> | string
    createdAt?: DateTimeFilter<"Workspace"> | Date | string
    updatedAt?: DateTimeFilter<"Workspace"> | Date | string
    companies?: CompanyListRelationFilter
    sites?: SiteListRelationFilter
    talentPools?: TalentPoolListRelationFilter
    workspaceMembers?: WorkspaceMemberListRelationFilter
    workspaceOwners?: WorkspaceOwnerListRelationFilter
    projects?: ProjectListRelationFilter
  }, "id">

  export type WorkspaceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkspaceCountOrderByAggregateInput
    _avg?: WorkspaceAvgOrderByAggregateInput
    _max?: WorkspaceMaxOrderByAggregateInput
    _min?: WorkspaceMinOrderByAggregateInput
    _sum?: WorkspaceSumOrderByAggregateInput
  }

  export type WorkspaceScalarWhereWithAggregatesInput = {
    AND?: WorkspaceScalarWhereWithAggregatesInput | WorkspaceScalarWhereWithAggregatesInput[]
    OR?: WorkspaceScalarWhereWithAggregatesInput[]
    NOT?: WorkspaceScalarWhereWithAggregatesInput | WorkspaceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Workspace"> | number
    name?: StringWithAggregatesFilter<"Workspace"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Workspace"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Workspace"> | Date | string
  }

  export type WorkspaceMemberWhereInput = {
    AND?: WorkspaceMemberWhereInput | WorkspaceMemberWhereInput[]
    OR?: WorkspaceMemberWhereInput[]
    NOT?: WorkspaceMemberWhereInput | WorkspaceMemberWhereInput[]
    id?: IntFilter<"WorkspaceMember"> | number
    workspaceId?: IntFilter<"WorkspaceMember"> | number
    userId?: IntFilter<"WorkspaceMember"> | number
    profileId?: IntFilter<"WorkspaceMember"> | number
    inviterId?: IntNullableFilter<"WorkspaceMember"> | number | null
    createdAt?: DateTimeFilter<"WorkspaceMember"> | Date | string
    updatedAt?: DateTimeFilter<"WorkspaceMember"> | Date | string
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    profile?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
    inviter?: XOR<WorkspaceMemberNullableScalarRelationFilter, WorkspaceMemberWhereInput> | null
    owners?: WorkspaceOwnerListRelationFilter
    companiesCreated?: CompanyListRelationFilter
    invitedMembers?: WorkspaceMemberListRelationFilter
  }

  export type WorkspaceMemberOrderByWithRelationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    userId?: SortOrder
    profileId?: SortOrder
    inviterId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workspace?: WorkspaceOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    profile?: ProfileOrderByWithRelationInput
    inviter?: WorkspaceMemberOrderByWithRelationInput
    owners?: WorkspaceOwnerOrderByRelationAggregateInput
    companiesCreated?: CompanyOrderByRelationAggregateInput
    invitedMembers?: WorkspaceMemberOrderByRelationAggregateInput
  }

  export type WorkspaceMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    workspaceId_userId?: WorkspaceMemberWorkspaceIdUserIdCompoundUniqueInput
    AND?: WorkspaceMemberWhereInput | WorkspaceMemberWhereInput[]
    OR?: WorkspaceMemberWhereInput[]
    NOT?: WorkspaceMemberWhereInput | WorkspaceMemberWhereInput[]
    workspaceId?: IntFilter<"WorkspaceMember"> | number
    userId?: IntFilter<"WorkspaceMember"> | number
    profileId?: IntFilter<"WorkspaceMember"> | number
    inviterId?: IntNullableFilter<"WorkspaceMember"> | number | null
    createdAt?: DateTimeFilter<"WorkspaceMember"> | Date | string
    updatedAt?: DateTimeFilter<"WorkspaceMember"> | Date | string
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    profile?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
    inviter?: XOR<WorkspaceMemberNullableScalarRelationFilter, WorkspaceMemberWhereInput> | null
    owners?: WorkspaceOwnerListRelationFilter
    companiesCreated?: CompanyListRelationFilter
    invitedMembers?: WorkspaceMemberListRelationFilter
  }, "id" | "workspaceId_userId">

  export type WorkspaceMemberOrderByWithAggregationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    userId?: SortOrder
    profileId?: SortOrder
    inviterId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkspaceMemberCountOrderByAggregateInput
    _avg?: WorkspaceMemberAvgOrderByAggregateInput
    _max?: WorkspaceMemberMaxOrderByAggregateInput
    _min?: WorkspaceMemberMinOrderByAggregateInput
    _sum?: WorkspaceMemberSumOrderByAggregateInput
  }

  export type WorkspaceMemberScalarWhereWithAggregatesInput = {
    AND?: WorkspaceMemberScalarWhereWithAggregatesInput | WorkspaceMemberScalarWhereWithAggregatesInput[]
    OR?: WorkspaceMemberScalarWhereWithAggregatesInput[]
    NOT?: WorkspaceMemberScalarWhereWithAggregatesInput | WorkspaceMemberScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WorkspaceMember"> | number
    workspaceId?: IntWithAggregatesFilter<"WorkspaceMember"> | number
    userId?: IntWithAggregatesFilter<"WorkspaceMember"> | number
    profileId?: IntWithAggregatesFilter<"WorkspaceMember"> | number
    inviterId?: IntNullableWithAggregatesFilter<"WorkspaceMember"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"WorkspaceMember"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkspaceMember"> | Date | string
  }

  export type WorkspaceOwnerWhereInput = {
    AND?: WorkspaceOwnerWhereInput | WorkspaceOwnerWhereInput[]
    OR?: WorkspaceOwnerWhereInput[]
    NOT?: WorkspaceOwnerWhereInput | WorkspaceOwnerWhereInput[]
    id?: IntFilter<"WorkspaceOwner"> | number
    workspaceId?: IntFilter<"WorkspaceOwner"> | number
    workspaceMemberId?: IntFilter<"WorkspaceOwner"> | number
    createdAt?: DateTimeFilter<"WorkspaceOwner"> | Date | string
    updatedAt?: DateTimeFilter<"WorkspaceOwner"> | Date | string
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
    workspaceMember?: XOR<WorkspaceMemberScalarRelationFilter, WorkspaceMemberWhereInput>
  }

  export type WorkspaceOwnerOrderByWithRelationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    workspaceMemberId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workspace?: WorkspaceOrderByWithRelationInput
    workspaceMember?: WorkspaceMemberOrderByWithRelationInput
  }

  export type WorkspaceOwnerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WorkspaceOwnerWhereInput | WorkspaceOwnerWhereInput[]
    OR?: WorkspaceOwnerWhereInput[]
    NOT?: WorkspaceOwnerWhereInput | WorkspaceOwnerWhereInput[]
    workspaceId?: IntFilter<"WorkspaceOwner"> | number
    workspaceMemberId?: IntFilter<"WorkspaceOwner"> | number
    createdAt?: DateTimeFilter<"WorkspaceOwner"> | Date | string
    updatedAt?: DateTimeFilter<"WorkspaceOwner"> | Date | string
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
    workspaceMember?: XOR<WorkspaceMemberScalarRelationFilter, WorkspaceMemberWhereInput>
  }, "id">

  export type WorkspaceOwnerOrderByWithAggregationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    workspaceMemberId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkspaceOwnerCountOrderByAggregateInput
    _avg?: WorkspaceOwnerAvgOrderByAggregateInput
    _max?: WorkspaceOwnerMaxOrderByAggregateInput
    _min?: WorkspaceOwnerMinOrderByAggregateInput
    _sum?: WorkspaceOwnerSumOrderByAggregateInput
  }

  export type WorkspaceOwnerScalarWhereWithAggregatesInput = {
    AND?: WorkspaceOwnerScalarWhereWithAggregatesInput | WorkspaceOwnerScalarWhereWithAggregatesInput[]
    OR?: WorkspaceOwnerScalarWhereWithAggregatesInput[]
    NOT?: WorkspaceOwnerScalarWhereWithAggregatesInput | WorkspaceOwnerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WorkspaceOwner"> | number
    workspaceId?: IntWithAggregatesFilter<"WorkspaceOwner"> | number
    workspaceMemberId?: IntWithAggregatesFilter<"WorkspaceOwner"> | number
    createdAt?: DateTimeWithAggregatesFilter<"WorkspaceOwner"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkspaceOwner"> | Date | string
  }

  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    id?: IntFilter<"Company"> | number
    workspaceId?: IntFilter<"Company"> | number
    name?: StringFilter<"Company"> | string
    location?: StringFilter<"Company"> | string
    businessNumber?: StringNullableFilter<"Company"> | string | null
    managementNumber?: StringNullableFilter<"Company"> | string | null
    employeeCount?: IntFilter<"Company"> | number
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    createdBy?: IntFilter<"Company"> | number
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
    companyIndustryCodes?: CompanyIndustryCodeListRelationFilter
    dayLaborers?: DayLaborerListRelationFilter
    employees?: EmployeeListRelationFilter
    owners?: OwnerListRelationFilter
    sites?: SiteListRelationFilter
    createdByMember?: XOR<WorkspaceMemberScalarRelationFilter, WorkspaceMemberWhereInput>
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    name?: SortOrder
    location?: SortOrder
    businessNumber?: SortOrderInput | SortOrder
    managementNumber?: SortOrderInput | SortOrder
    employeeCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    workspace?: WorkspaceOrderByWithRelationInput
    companyIndustryCodes?: CompanyIndustryCodeOrderByRelationAggregateInput
    dayLaborers?: DayLaborerOrderByRelationAggregateInput
    employees?: EmployeeOrderByRelationAggregateInput
    owners?: OwnerOrderByRelationAggregateInput
    sites?: SiteOrderByRelationAggregateInput
    createdByMember?: WorkspaceMemberOrderByWithRelationInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    workspaceId?: IntFilter<"Company"> | number
    name?: StringFilter<"Company"> | string
    location?: StringFilter<"Company"> | string
    businessNumber?: StringNullableFilter<"Company"> | string | null
    managementNumber?: StringNullableFilter<"Company"> | string | null
    employeeCount?: IntFilter<"Company"> | number
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    createdBy?: IntFilter<"Company"> | number
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
    companyIndustryCodes?: CompanyIndustryCodeListRelationFilter
    dayLaborers?: DayLaborerListRelationFilter
    employees?: EmployeeListRelationFilter
    owners?: OwnerListRelationFilter
    sites?: SiteListRelationFilter
    createdByMember?: XOR<WorkspaceMemberScalarRelationFilter, WorkspaceMemberWhereInput>
  }, "id">

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    name?: SortOrder
    location?: SortOrder
    businessNumber?: SortOrderInput | SortOrder
    managementNumber?: SortOrderInput | SortOrder
    employeeCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _avg?: CompanyAvgOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
    _sum?: CompanySumOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Company"> | number
    workspaceId?: IntWithAggregatesFilter<"Company"> | number
    name?: StringWithAggregatesFilter<"Company"> | string
    location?: StringWithAggregatesFilter<"Company"> | string
    businessNumber?: StringNullableWithAggregatesFilter<"Company"> | string | null
    managementNumber?: StringNullableWithAggregatesFilter<"Company"> | string | null
    employeeCount?: IntWithAggregatesFilter<"Company"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    createdBy?: IntWithAggregatesFilter<"Company"> | number
  }

  export type EmployeeWhereInput = {
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    id?: IntFilter<"Employee"> | number
    talentPoolId?: IntFilter<"Employee"> | number
    companyId?: IntFilter<"Employee"> | number
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    talentPool?: XOR<TalentPoolScalarRelationFilter, TalentPoolWhereInput>
    owners?: OwnerListRelationFilter
  }

  export type EmployeeOrderByWithRelationInput = {
    id?: SortOrder
    talentPoolId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    talentPool?: TalentPoolOrderByWithRelationInput
    owners?: OwnerOrderByRelationAggregateInput
  }

  export type EmployeeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    talentPoolId?: IntFilter<"Employee"> | number
    companyId?: IntFilter<"Employee"> | number
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    talentPool?: XOR<TalentPoolScalarRelationFilter, TalentPoolWhereInput>
    owners?: OwnerListRelationFilter
  }, "id">

  export type EmployeeOrderByWithAggregationInput = {
    id?: SortOrder
    talentPoolId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmployeeCountOrderByAggregateInput
    _avg?: EmployeeAvgOrderByAggregateInput
    _max?: EmployeeMaxOrderByAggregateInput
    _min?: EmployeeMinOrderByAggregateInput
    _sum?: EmployeeSumOrderByAggregateInput
  }

  export type EmployeeScalarWhereWithAggregatesInput = {
    AND?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    OR?: EmployeeScalarWhereWithAggregatesInput[]
    NOT?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Employee"> | number
    talentPoolId?: IntWithAggregatesFilter<"Employee"> | number
    companyId?: IntWithAggregatesFilter<"Employee"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
  }

  export type DayLaborerWhereInput = {
    AND?: DayLaborerWhereInput | DayLaborerWhereInput[]
    OR?: DayLaborerWhereInput[]
    NOT?: DayLaborerWhereInput | DayLaborerWhereInput[]
    id?: IntFilter<"DayLaborer"> | number
    talentPoolId?: IntFilter<"DayLaborer"> | number
    companyId?: IntFilter<"DayLaborer"> | number
    createdAt?: DateTimeFilter<"DayLaborer"> | Date | string
    updatedAt?: DateTimeFilter<"DayLaborer"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    talentPool?: XOR<TalentPoolScalarRelationFilter, TalentPoolWhereInput>
  }

  export type DayLaborerOrderByWithRelationInput = {
    id?: SortOrder
    talentPoolId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    talentPool?: TalentPoolOrderByWithRelationInput
  }

  export type DayLaborerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DayLaborerWhereInput | DayLaborerWhereInput[]
    OR?: DayLaborerWhereInput[]
    NOT?: DayLaborerWhereInput | DayLaborerWhereInput[]
    talentPoolId?: IntFilter<"DayLaborer"> | number
    companyId?: IntFilter<"DayLaborer"> | number
    createdAt?: DateTimeFilter<"DayLaborer"> | Date | string
    updatedAt?: DateTimeFilter<"DayLaborer"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    talentPool?: XOR<TalentPoolScalarRelationFilter, TalentPoolWhereInput>
  }, "id">

  export type DayLaborerOrderByWithAggregationInput = {
    id?: SortOrder
    talentPoolId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DayLaborerCountOrderByAggregateInput
    _avg?: DayLaborerAvgOrderByAggregateInput
    _max?: DayLaborerMaxOrderByAggregateInput
    _min?: DayLaborerMinOrderByAggregateInput
    _sum?: DayLaborerSumOrderByAggregateInput
  }

  export type DayLaborerScalarWhereWithAggregatesInput = {
    AND?: DayLaborerScalarWhereWithAggregatesInput | DayLaborerScalarWhereWithAggregatesInput[]
    OR?: DayLaborerScalarWhereWithAggregatesInput[]
    NOT?: DayLaborerScalarWhereWithAggregatesInput | DayLaborerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DayLaborer"> | number
    talentPoolId?: IntWithAggregatesFilter<"DayLaborer"> | number
    companyId?: IntWithAggregatesFilter<"DayLaborer"> | number
    createdAt?: DateTimeWithAggregatesFilter<"DayLaborer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DayLaborer"> | Date | string
  }

  export type OwnerWhereInput = {
    AND?: OwnerWhereInput | OwnerWhereInput[]
    OR?: OwnerWhereInput[]
    NOT?: OwnerWhereInput | OwnerWhereInput[]
    id?: IntFilter<"Owner"> | number
    employeeId?: IntFilter<"Owner"> | number
    companyId?: IntFilter<"Owner"> | number
    createdAt?: DateTimeFilter<"Owner"> | Date | string
    updatedAt?: DateTimeFilter<"Owner"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }

  export type OwnerOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    employee?: EmployeeOrderByWithRelationInput
  }

  export type OwnerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OwnerWhereInput | OwnerWhereInput[]
    OR?: OwnerWhereInput[]
    NOT?: OwnerWhereInput | OwnerWhereInput[]
    employeeId?: IntFilter<"Owner"> | number
    companyId?: IntFilter<"Owner"> | number
    createdAt?: DateTimeFilter<"Owner"> | Date | string
    updatedAt?: DateTimeFilter<"Owner"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }, "id">

  export type OwnerOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OwnerCountOrderByAggregateInput
    _avg?: OwnerAvgOrderByAggregateInput
    _max?: OwnerMaxOrderByAggregateInput
    _min?: OwnerMinOrderByAggregateInput
    _sum?: OwnerSumOrderByAggregateInput
  }

  export type OwnerScalarWhereWithAggregatesInput = {
    AND?: OwnerScalarWhereWithAggregatesInput | OwnerScalarWhereWithAggregatesInput[]
    OR?: OwnerScalarWhereWithAggregatesInput[]
    NOT?: OwnerScalarWhereWithAggregatesInput | OwnerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Owner"> | number
    employeeId?: IntWithAggregatesFilter<"Owner"> | number
    companyId?: IntWithAggregatesFilter<"Owner"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Owner"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Owner"> | Date | string
  }

  export type ProjectOwnerWhereInput = {
    AND?: ProjectOwnerWhereInput | ProjectOwnerWhereInput[]
    OR?: ProjectOwnerWhereInput[]
    NOT?: ProjectOwnerWhereInput | ProjectOwnerWhereInput[]
    id?: IntFilter<"ProjectOwner"> | number
    projectId?: IntFilter<"ProjectOwner"> | number
    name?: StringFilter<"ProjectOwner"> | string
    address?: StringFilter<"ProjectOwner"> | string
    phone?: StringFilter<"ProjectOwner"> | string
    createdAt?: DateTimeFilter<"ProjectOwner"> | Date | string
    updatedAt?: DateTimeFilter<"ProjectOwner"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }

  export type ProjectOwnerOrderByWithRelationInput = {
    id?: SortOrder
    projectId?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    project?: ProjectOrderByWithRelationInput
  }

  export type ProjectOwnerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProjectOwnerWhereInput | ProjectOwnerWhereInput[]
    OR?: ProjectOwnerWhereInput[]
    NOT?: ProjectOwnerWhereInput | ProjectOwnerWhereInput[]
    projectId?: IntFilter<"ProjectOwner"> | number
    name?: StringFilter<"ProjectOwner"> | string
    address?: StringFilter<"ProjectOwner"> | string
    phone?: StringFilter<"ProjectOwner"> | string
    createdAt?: DateTimeFilter<"ProjectOwner"> | Date | string
    updatedAt?: DateTimeFilter<"ProjectOwner"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }, "id">

  export type ProjectOwnerOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProjectOwnerCountOrderByAggregateInput
    _avg?: ProjectOwnerAvgOrderByAggregateInput
    _max?: ProjectOwnerMaxOrderByAggregateInput
    _min?: ProjectOwnerMinOrderByAggregateInput
    _sum?: ProjectOwnerSumOrderByAggregateInput
  }

  export type ProjectOwnerScalarWhereWithAggregatesInput = {
    AND?: ProjectOwnerScalarWhereWithAggregatesInput | ProjectOwnerScalarWhereWithAggregatesInput[]
    OR?: ProjectOwnerScalarWhereWithAggregatesInput[]
    NOT?: ProjectOwnerScalarWhereWithAggregatesInput | ProjectOwnerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProjectOwner"> | number
    projectId?: IntWithAggregatesFilter<"ProjectOwner"> | number
    name?: StringWithAggregatesFilter<"ProjectOwner"> | string
    address?: StringWithAggregatesFilter<"ProjectOwner"> | string
    phone?: StringWithAggregatesFilter<"ProjectOwner"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProjectOwner"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProjectOwner"> | Date | string
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: IntFilter<"Project"> | number
    workspaceId?: IntFilter<"Project"> | number
    name?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
    projectOwners?: ProjectOwnerListRelationFilter
    sites?: SiteListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workspace?: WorkspaceOrderByWithRelationInput
    projectOwners?: ProjectOwnerOrderByRelationAggregateInput
    sites?: SiteOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    workspaceId?: IntFilter<"Project"> | number
    name?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
    projectOwners?: ProjectOwnerListRelationFilter
    sites?: SiteListRelationFilter
  }, "id">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Project"> | number
    workspaceId?: IntWithAggregatesFilter<"Project"> | number
    name?: StringWithAggregatesFilter<"Project"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
  }

  export type SiteWhereInput = {
    AND?: SiteWhereInput | SiteWhereInput[]
    OR?: SiteWhereInput[]
    NOT?: SiteWhereInput | SiteWhereInput[]
    id?: IntFilter<"Site"> | number
    workspaceId?: IntFilter<"Site"> | number
    projectId?: IntNullableFilter<"Site"> | number | null
    companyId?: IntFilter<"Site"> | number
    name?: StringFilter<"Site"> | string
    location?: StringFilter<"Site"> | string
    startDate?: DateTimeFilter<"Site"> | Date | string
    endDate?: DateTimeFilter<"Site"> | Date | string
    managementNumber?: StringNullableFilter<"Site"> | string | null
    memo?: StringNullableFilter<"Site"> | string | null
    createdAt?: DateTimeFilter<"Site"> | Date | string
    updatedAt?: DateTimeFilter<"Site"> | Date | string
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    project?: XOR<ProjectNullableScalarRelationFilter, ProjectWhereInput> | null
    siteAttendances?: SiteAttendanceListRelationFilter
  }

  export type SiteOrderByWithRelationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    projectId?: SortOrderInput | SortOrder
    companyId?: SortOrder
    name?: SortOrder
    location?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    managementNumber?: SortOrderInput | SortOrder
    memo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workspace?: WorkspaceOrderByWithRelationInput
    company?: CompanyOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
    siteAttendances?: SiteAttendanceOrderByRelationAggregateInput
  }

  export type SiteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SiteWhereInput | SiteWhereInput[]
    OR?: SiteWhereInput[]
    NOT?: SiteWhereInput | SiteWhereInput[]
    workspaceId?: IntFilter<"Site"> | number
    projectId?: IntNullableFilter<"Site"> | number | null
    companyId?: IntFilter<"Site"> | number
    name?: StringFilter<"Site"> | string
    location?: StringFilter<"Site"> | string
    startDate?: DateTimeFilter<"Site"> | Date | string
    endDate?: DateTimeFilter<"Site"> | Date | string
    managementNumber?: StringNullableFilter<"Site"> | string | null
    memo?: StringNullableFilter<"Site"> | string | null
    createdAt?: DateTimeFilter<"Site"> | Date | string
    updatedAt?: DateTimeFilter<"Site"> | Date | string
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    project?: XOR<ProjectNullableScalarRelationFilter, ProjectWhereInput> | null
    siteAttendances?: SiteAttendanceListRelationFilter
  }, "id">

  export type SiteOrderByWithAggregationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    projectId?: SortOrderInput | SortOrder
    companyId?: SortOrder
    name?: SortOrder
    location?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    managementNumber?: SortOrderInput | SortOrder
    memo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SiteCountOrderByAggregateInput
    _avg?: SiteAvgOrderByAggregateInput
    _max?: SiteMaxOrderByAggregateInput
    _min?: SiteMinOrderByAggregateInput
    _sum?: SiteSumOrderByAggregateInput
  }

  export type SiteScalarWhereWithAggregatesInput = {
    AND?: SiteScalarWhereWithAggregatesInput | SiteScalarWhereWithAggregatesInput[]
    OR?: SiteScalarWhereWithAggregatesInput[]
    NOT?: SiteScalarWhereWithAggregatesInput | SiteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Site"> | number
    workspaceId?: IntWithAggregatesFilter<"Site"> | number
    projectId?: IntNullableWithAggregatesFilter<"Site"> | number | null
    companyId?: IntWithAggregatesFilter<"Site"> | number
    name?: StringWithAggregatesFilter<"Site"> | string
    location?: StringWithAggregatesFilter<"Site"> | string
    startDate?: DateTimeWithAggregatesFilter<"Site"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Site"> | Date | string
    managementNumber?: StringNullableWithAggregatesFilter<"Site"> | string | null
    memo?: StringNullableWithAggregatesFilter<"Site"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Site"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Site"> | Date | string
  }

  export type SiteAttendanceWhereInput = {
    AND?: SiteAttendanceWhereInput | SiteAttendanceWhereInput[]
    OR?: SiteAttendanceWhereInput[]
    NOT?: SiteAttendanceWhereInput | SiteAttendanceWhereInput[]
    id?: IntFilter<"SiteAttendance"> | number
    talentPoolId?: IntFilter<"SiteAttendance"> | number
    siteId?: IntFilter<"SiteAttendance"> | number
    date?: DateTimeFilter<"SiteAttendance"> | Date | string
    startTime?: DateTimeFilter<"SiteAttendance"> | Date | string
    endTime?: DateTimeFilter<"SiteAttendance"> | Date | string
    amount?: IntFilter<"SiteAttendance"> | number
    createdAt?: DateTimeFilter<"SiteAttendance"> | Date | string
    updatedAt?: DateTimeFilter<"SiteAttendance"> | Date | string
    site?: XOR<SiteScalarRelationFilter, SiteWhereInput>
    talentPool?: XOR<TalentPoolScalarRelationFilter, TalentPoolWhereInput>
  }

  export type SiteAttendanceOrderByWithRelationInput = {
    id?: SortOrder
    talentPoolId?: SortOrder
    siteId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    site?: SiteOrderByWithRelationInput
    talentPool?: TalentPoolOrderByWithRelationInput
  }

  export type SiteAttendanceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SiteAttendanceWhereInput | SiteAttendanceWhereInput[]
    OR?: SiteAttendanceWhereInput[]
    NOT?: SiteAttendanceWhereInput | SiteAttendanceWhereInput[]
    talentPoolId?: IntFilter<"SiteAttendance"> | number
    siteId?: IntFilter<"SiteAttendance"> | number
    date?: DateTimeFilter<"SiteAttendance"> | Date | string
    startTime?: DateTimeFilter<"SiteAttendance"> | Date | string
    endTime?: DateTimeFilter<"SiteAttendance"> | Date | string
    amount?: IntFilter<"SiteAttendance"> | number
    createdAt?: DateTimeFilter<"SiteAttendance"> | Date | string
    updatedAt?: DateTimeFilter<"SiteAttendance"> | Date | string
    site?: XOR<SiteScalarRelationFilter, SiteWhereInput>
    talentPool?: XOR<TalentPoolScalarRelationFilter, TalentPoolWhereInput>
  }, "id">

  export type SiteAttendanceOrderByWithAggregationInput = {
    id?: SortOrder
    talentPoolId?: SortOrder
    siteId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SiteAttendanceCountOrderByAggregateInput
    _avg?: SiteAttendanceAvgOrderByAggregateInput
    _max?: SiteAttendanceMaxOrderByAggregateInput
    _min?: SiteAttendanceMinOrderByAggregateInput
    _sum?: SiteAttendanceSumOrderByAggregateInput
  }

  export type SiteAttendanceScalarWhereWithAggregatesInput = {
    AND?: SiteAttendanceScalarWhereWithAggregatesInput | SiteAttendanceScalarWhereWithAggregatesInput[]
    OR?: SiteAttendanceScalarWhereWithAggregatesInput[]
    NOT?: SiteAttendanceScalarWhereWithAggregatesInput | SiteAttendanceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SiteAttendance"> | number
    talentPoolId?: IntWithAggregatesFilter<"SiteAttendance"> | number
    siteId?: IntWithAggregatesFilter<"SiteAttendance"> | number
    date?: DateTimeWithAggregatesFilter<"SiteAttendance"> | Date | string
    startTime?: DateTimeWithAggregatesFilter<"SiteAttendance"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"SiteAttendance"> | Date | string
    amount?: IntWithAggregatesFilter<"SiteAttendance"> | number
    createdAt?: DateTimeWithAggregatesFilter<"SiteAttendance"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SiteAttendance"> | Date | string
  }

  export type TalentPoolWhereInput = {
    AND?: TalentPoolWhereInput | TalentPoolWhereInput[]
    OR?: TalentPoolWhereInput[]
    NOT?: TalentPoolWhereInput | TalentPoolWhereInput[]
    id?: IntFilter<"TalentPool"> | number
    workspaceId?: IntFilter<"TalentPool"> | number
    profileId?: IntNullableFilter<"TalentPool"> | number | null
    name?: StringFilter<"TalentPool"> | string
    birthday?: DateTimeFilter<"TalentPool"> | Date | string
    phone?: StringFilter<"TalentPool"> | string
    address?: StringFilter<"TalentPool"> | string
    memo?: StringNullableFilter<"TalentPool"> | string | null
    createdAt?: DateTimeFilter<"TalentPool"> | Date | string
    updatedAt?: DateTimeFilter<"TalentPool"> | Date | string
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
    profile?: XOR<ProfileNullableScalarRelationFilter, ProfileWhereInput> | null
    employees?: EmployeeListRelationFilter
    dayLaborers?: DayLaborerListRelationFilter
    siteAttendances?: SiteAttendanceListRelationFilter
  }

  export type TalentPoolOrderByWithRelationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    profileId?: SortOrderInput | SortOrder
    name?: SortOrder
    birthday?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    memo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workspace?: WorkspaceOrderByWithRelationInput
    profile?: ProfileOrderByWithRelationInput
    employees?: EmployeeOrderByRelationAggregateInput
    dayLaborers?: DayLaborerOrderByRelationAggregateInput
    siteAttendances?: SiteAttendanceOrderByRelationAggregateInput
  }

  export type TalentPoolWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TalentPoolWhereInput | TalentPoolWhereInput[]
    OR?: TalentPoolWhereInput[]
    NOT?: TalentPoolWhereInput | TalentPoolWhereInput[]
    workspaceId?: IntFilter<"TalentPool"> | number
    profileId?: IntNullableFilter<"TalentPool"> | number | null
    name?: StringFilter<"TalentPool"> | string
    birthday?: DateTimeFilter<"TalentPool"> | Date | string
    phone?: StringFilter<"TalentPool"> | string
    address?: StringFilter<"TalentPool"> | string
    memo?: StringNullableFilter<"TalentPool"> | string | null
    createdAt?: DateTimeFilter<"TalentPool"> | Date | string
    updatedAt?: DateTimeFilter<"TalentPool"> | Date | string
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
    profile?: XOR<ProfileNullableScalarRelationFilter, ProfileWhereInput> | null
    employees?: EmployeeListRelationFilter
    dayLaborers?: DayLaborerListRelationFilter
    siteAttendances?: SiteAttendanceListRelationFilter
  }, "id">

  export type TalentPoolOrderByWithAggregationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    profileId?: SortOrderInput | SortOrder
    name?: SortOrder
    birthday?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    memo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TalentPoolCountOrderByAggregateInput
    _avg?: TalentPoolAvgOrderByAggregateInput
    _max?: TalentPoolMaxOrderByAggregateInput
    _min?: TalentPoolMinOrderByAggregateInput
    _sum?: TalentPoolSumOrderByAggregateInput
  }

  export type TalentPoolScalarWhereWithAggregatesInput = {
    AND?: TalentPoolScalarWhereWithAggregatesInput | TalentPoolScalarWhereWithAggregatesInput[]
    OR?: TalentPoolScalarWhereWithAggregatesInput[]
    NOT?: TalentPoolScalarWhereWithAggregatesInput | TalentPoolScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TalentPool"> | number
    workspaceId?: IntWithAggregatesFilter<"TalentPool"> | number
    profileId?: IntNullableWithAggregatesFilter<"TalentPool"> | number | null
    name?: StringWithAggregatesFilter<"TalentPool"> | string
    birthday?: DateTimeWithAggregatesFilter<"TalentPool"> | Date | string
    phone?: StringWithAggregatesFilter<"TalentPool"> | string
    address?: StringWithAggregatesFilter<"TalentPool"> | string
    memo?: StringNullableWithAggregatesFilter<"TalentPool"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"TalentPool"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TalentPool"> | Date | string
  }

  export type IndustrialAccidentInsurancePremiumRateWhereInput = {
    AND?: IndustrialAccidentInsurancePremiumRateWhereInput | IndustrialAccidentInsurancePremiumRateWhereInput[]
    OR?: IndustrialAccidentInsurancePremiumRateWhereInput[]
    NOT?: IndustrialAccidentInsurancePremiumRateWhereInput | IndustrialAccidentInsurancePremiumRateWhereInput[]
    id?: IntFilter<"IndustrialAccidentInsurancePremiumRate"> | number
    firstLevel?: StringNullableFilter<"IndustrialAccidentInsurancePremiumRate"> | string | null
    firstLevelCode?: IntNullableFilter<"IndustrialAccidentInsurancePremiumRate"> | number | null
    secondLevel?: StringNullableFilter<"IndustrialAccidentInsurancePremiumRate"> | string | null
    secondLevelCode?: IntNullableFilter<"IndustrialAccidentInsurancePremiumRate"> | number | null
    industryName?: StringNullableFilter<"IndustrialAccidentInsurancePremiumRate"> | string | null
    industryCode?: IntNullableFilter<"IndustrialAccidentInsurancePremiumRate"> | number | null
    date?: StringNullableFilter<"IndustrialAccidentInsurancePremiumRate"> | string | null
    rate?: IntNullableFilter<"IndustrialAccidentInsurancePremiumRate"> | number | null
    createdAt?: DateTimeFilter<"IndustrialAccidentInsurancePremiumRate"> | Date | string
    updatedAt?: DateTimeFilter<"IndustrialAccidentInsurancePremiumRate"> | Date | string
    companyIndustryCodes?: CompanyIndustryCodeListRelationFilter
  }

  export type IndustrialAccidentInsurancePremiumRateOrderByWithRelationInput = {
    id?: SortOrder
    firstLevel?: SortOrderInput | SortOrder
    firstLevelCode?: SortOrderInput | SortOrder
    secondLevel?: SortOrderInput | SortOrder
    secondLevelCode?: SortOrderInput | SortOrder
    industryName?: SortOrderInput | SortOrder
    industryCode?: SortOrderInput | SortOrder
    date?: SortOrderInput | SortOrder
    rate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyIndustryCodes?: CompanyIndustryCodeOrderByRelationAggregateInput
  }

  export type IndustrialAccidentInsurancePremiumRateWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    firstLevel_firstLevelCode_secondLevel_secondLevelCode_industryName_industryCode_date?: IndustrialAccidentInsurancePremiumRateFirstLevelFirstLevelCodeSecondLevelSecondLevelCodeIndustryNameIndustryCodeDateCompoundUniqueInput
    AND?: IndustrialAccidentInsurancePremiumRateWhereInput | IndustrialAccidentInsurancePremiumRateWhereInput[]
    OR?: IndustrialAccidentInsurancePremiumRateWhereInput[]
    NOT?: IndustrialAccidentInsurancePremiumRateWhereInput | IndustrialAccidentInsurancePremiumRateWhereInput[]
    firstLevel?: StringNullableFilter<"IndustrialAccidentInsurancePremiumRate"> | string | null
    firstLevelCode?: IntNullableFilter<"IndustrialAccidentInsurancePremiumRate"> | number | null
    secondLevel?: StringNullableFilter<"IndustrialAccidentInsurancePremiumRate"> | string | null
    secondLevelCode?: IntNullableFilter<"IndustrialAccidentInsurancePremiumRate"> | number | null
    industryName?: StringNullableFilter<"IndustrialAccidentInsurancePremiumRate"> | string | null
    industryCode?: IntNullableFilter<"IndustrialAccidentInsurancePremiumRate"> | number | null
    date?: StringNullableFilter<"IndustrialAccidentInsurancePremiumRate"> | string | null
    rate?: IntNullableFilter<"IndustrialAccidentInsurancePremiumRate"> | number | null
    createdAt?: DateTimeFilter<"IndustrialAccidentInsurancePremiumRate"> | Date | string
    updatedAt?: DateTimeFilter<"IndustrialAccidentInsurancePremiumRate"> | Date | string
    companyIndustryCodes?: CompanyIndustryCodeListRelationFilter
  }, "id" | "firstLevel_firstLevelCode_secondLevel_secondLevelCode_industryName_industryCode_date">

  export type IndustrialAccidentInsurancePremiumRateOrderByWithAggregationInput = {
    id?: SortOrder
    firstLevel?: SortOrderInput | SortOrder
    firstLevelCode?: SortOrderInput | SortOrder
    secondLevel?: SortOrderInput | SortOrder
    secondLevelCode?: SortOrderInput | SortOrder
    industryName?: SortOrderInput | SortOrder
    industryCode?: SortOrderInput | SortOrder
    date?: SortOrderInput | SortOrder
    rate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: IndustrialAccidentInsurancePremiumRateCountOrderByAggregateInput
    _avg?: IndustrialAccidentInsurancePremiumRateAvgOrderByAggregateInput
    _max?: IndustrialAccidentInsurancePremiumRateMaxOrderByAggregateInput
    _min?: IndustrialAccidentInsurancePremiumRateMinOrderByAggregateInput
    _sum?: IndustrialAccidentInsurancePremiumRateSumOrderByAggregateInput
  }

  export type IndustrialAccidentInsurancePremiumRateScalarWhereWithAggregatesInput = {
    AND?: IndustrialAccidentInsurancePremiumRateScalarWhereWithAggregatesInput | IndustrialAccidentInsurancePremiumRateScalarWhereWithAggregatesInput[]
    OR?: IndustrialAccidentInsurancePremiumRateScalarWhereWithAggregatesInput[]
    NOT?: IndustrialAccidentInsurancePremiumRateScalarWhereWithAggregatesInput | IndustrialAccidentInsurancePremiumRateScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"IndustrialAccidentInsurancePremiumRate"> | number
    firstLevel?: StringNullableWithAggregatesFilter<"IndustrialAccidentInsurancePremiumRate"> | string | null
    firstLevelCode?: IntNullableWithAggregatesFilter<"IndustrialAccidentInsurancePremiumRate"> | number | null
    secondLevel?: StringNullableWithAggregatesFilter<"IndustrialAccidentInsurancePremiumRate"> | string | null
    secondLevelCode?: IntNullableWithAggregatesFilter<"IndustrialAccidentInsurancePremiumRate"> | number | null
    industryName?: StringNullableWithAggregatesFilter<"IndustrialAccidentInsurancePremiumRate"> | string | null
    industryCode?: IntNullableWithAggregatesFilter<"IndustrialAccidentInsurancePremiumRate"> | number | null
    date?: StringNullableWithAggregatesFilter<"IndustrialAccidentInsurancePremiumRate"> | string | null
    rate?: IntNullableWithAggregatesFilter<"IndustrialAccidentInsurancePremiumRate"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"IndustrialAccidentInsurancePremiumRate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"IndustrialAccidentInsurancePremiumRate"> | Date | string
  }

  export type CompanyIndustryCodeWhereInput = {
    AND?: CompanyIndustryCodeWhereInput | CompanyIndustryCodeWhereInput[]
    OR?: CompanyIndustryCodeWhereInput[]
    NOT?: CompanyIndustryCodeWhereInput | CompanyIndustryCodeWhereInput[]
    id?: IntFilter<"CompanyIndustryCode"> | number
    companyId?: IntFilter<"CompanyIndustryCode"> | number
    industryCode?: IntFilter<"CompanyIndustryCode"> | number
    createdAt?: DateTimeFilter<"CompanyIndustryCode"> | Date | string
    updatedAt?: DateTimeFilter<"CompanyIndustryCode"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    industrialAccidentInsurancePremiumRate?: XOR<IndustrialAccidentInsurancePremiumRateScalarRelationFilter, IndustrialAccidentInsurancePremiumRateWhereInput>
  }

  export type CompanyIndustryCodeOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    industryCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    industrialAccidentInsurancePremiumRate?: IndustrialAccidentInsurancePremiumRateOrderByWithRelationInput
  }

  export type CompanyIndustryCodeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CompanyIndustryCodeWhereInput | CompanyIndustryCodeWhereInput[]
    OR?: CompanyIndustryCodeWhereInput[]
    NOT?: CompanyIndustryCodeWhereInput | CompanyIndustryCodeWhereInput[]
    companyId?: IntFilter<"CompanyIndustryCode"> | number
    industryCode?: IntFilter<"CompanyIndustryCode"> | number
    createdAt?: DateTimeFilter<"CompanyIndustryCode"> | Date | string
    updatedAt?: DateTimeFilter<"CompanyIndustryCode"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    industrialAccidentInsurancePremiumRate?: XOR<IndustrialAccidentInsurancePremiumRateScalarRelationFilter, IndustrialAccidentInsurancePremiumRateWhereInput>
  }, "id">

  export type CompanyIndustryCodeOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    industryCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CompanyIndustryCodeCountOrderByAggregateInput
    _avg?: CompanyIndustryCodeAvgOrderByAggregateInput
    _max?: CompanyIndustryCodeMaxOrderByAggregateInput
    _min?: CompanyIndustryCodeMinOrderByAggregateInput
    _sum?: CompanyIndustryCodeSumOrderByAggregateInput
  }

  export type CompanyIndustryCodeScalarWhereWithAggregatesInput = {
    AND?: CompanyIndustryCodeScalarWhereWithAggregatesInput | CompanyIndustryCodeScalarWhereWithAggregatesInput[]
    OR?: CompanyIndustryCodeScalarWhereWithAggregatesInput[]
    NOT?: CompanyIndustryCodeScalarWhereWithAggregatesInput | CompanyIndustryCodeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CompanyIndustryCode"> | number
    companyId?: IntWithAggregatesFilter<"CompanyIndustryCode"> | number
    industryCode?: IntWithAggregatesFilter<"CompanyIndustryCode"> | number
    createdAt?: DateTimeWithAggregatesFilter<"CompanyIndustryCode"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CompanyIndustryCode"> | Date | string
  }

  export type UserCreateInput = {
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryProfile?: PrimaryProfileCreateNestedOneWithoutUserInput
    profiles?: ProfileCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryProfile?: PrimaryProfileUncheckedCreateNestedOneWithoutUserInput
    profiles?: ProfileUncheckedCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryProfile?: PrimaryProfileUpdateOneWithoutUserNestedInput
    profiles?: ProfileUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryProfile?: PrimaryProfileUncheckedUpdateOneWithoutUserNestedInput
    profiles?: ProfileUncheckedUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileCreateInput = {
    name: string
    birthday?: Date | string | null
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutProfilesInput
    talentPools?: TalentPoolCreateNestedManyWithoutProfileInput
    primaryProfile?: PrimaryProfileCreateNestedOneWithoutProfileInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: number
    userId?: number | null
    name: string
    birthday?: Date | string | null
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    talentPools?: TalentPoolUncheckedCreateNestedManyWithoutProfileInput
    primaryProfile?: PrimaryProfileUncheckedCreateNestedOneWithoutProfileInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutProfilesNestedInput
    talentPools?: TalentPoolUpdateManyWithoutProfileNestedInput
    primaryProfile?: PrimaryProfileUpdateOneWithoutProfileNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    talentPools?: TalentPoolUncheckedUpdateManyWithoutProfileNestedInput
    primaryProfile?: PrimaryProfileUncheckedUpdateOneWithoutProfileNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type ProfileCreateManyInput = {
    id?: number
    userId?: number | null
    name: string
    birthday?: Date | string | null
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrimaryProfileCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPrimaryProfileInput
    profile: ProfileCreateNestedOneWithoutPrimaryProfileInput
  }

  export type PrimaryProfileUncheckedCreateInput = {
    id?: number
    userId: number
    profileId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PrimaryProfileUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPrimaryProfileNestedInput
    profile?: ProfileUpdateOneRequiredWithoutPrimaryProfileNestedInput
  }

  export type PrimaryProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    profileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrimaryProfileCreateManyInput = {
    id?: number
    userId: number
    profileId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PrimaryProfileUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrimaryProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    profileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companies?: CompanyCreateNestedManyWithoutWorkspaceInput
    sites?: SiteCreateNestedManyWithoutWorkspaceInput
    talentPools?: TalentPoolCreateNestedManyWithoutWorkspaceInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutWorkspaceInput
    workspaceOwners?: WorkspaceOwnerCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companies?: CompanyUncheckedCreateNestedManyWithoutWorkspaceInput
    sites?: SiteUncheckedCreateNestedManyWithoutWorkspaceInput
    talentPools?: TalentPoolUncheckedCreateNestedManyWithoutWorkspaceInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutWorkspaceInput
    workspaceOwners?: WorkspaceOwnerUncheckedCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: CompanyUpdateManyWithoutWorkspaceNestedInput
    sites?: SiteUpdateManyWithoutWorkspaceNestedInput
    talentPools?: TalentPoolUpdateManyWithoutWorkspaceNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutWorkspaceNestedInput
    workspaceOwners?: WorkspaceOwnerUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: CompanyUncheckedUpdateManyWithoutWorkspaceNestedInput
    sites?: SiteUncheckedUpdateManyWithoutWorkspaceNestedInput
    talentPools?: TalentPoolUncheckedUpdateManyWithoutWorkspaceNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutWorkspaceNestedInput
    workspaceOwners?: WorkspaceOwnerUncheckedUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceMemberCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutWorkspaceMembersInput
    user: UserCreateNestedOneWithoutWorkspaceMembersInput
    profile: ProfileCreateNestedOneWithoutWorkspaceMembersInput
    inviter?: WorkspaceMemberCreateNestedOneWithoutInvitedMembersInput
    owners?: WorkspaceOwnerCreateNestedManyWithoutWorkspaceMemberInput
    companiesCreated?: CompanyCreateNestedManyWithoutCreatedByMemberInput
    invitedMembers?: WorkspaceMemberCreateNestedManyWithoutInviterInput
  }

  export type WorkspaceMemberUncheckedCreateInput = {
    id?: number
    workspaceId: number
    userId: number
    profileId: number
    inviterId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owners?: WorkspaceOwnerUncheckedCreateNestedManyWithoutWorkspaceMemberInput
    companiesCreated?: CompanyUncheckedCreateNestedManyWithoutCreatedByMemberInput
    invitedMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutInviterInput
  }

  export type WorkspaceMemberUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutWorkspaceMembersNestedInput
    user?: UserUpdateOneRequiredWithoutWorkspaceMembersNestedInput
    profile?: ProfileUpdateOneRequiredWithoutWorkspaceMembersNestedInput
    inviter?: WorkspaceMemberUpdateOneWithoutInvitedMembersNestedInput
    owners?: WorkspaceOwnerUpdateManyWithoutWorkspaceMemberNestedInput
    companiesCreated?: CompanyUpdateManyWithoutCreatedByMemberNestedInput
    invitedMembers?: WorkspaceMemberUpdateManyWithoutInviterNestedInput
  }

  export type WorkspaceMemberUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    profileId?: IntFieldUpdateOperationsInput | number
    inviterId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owners?: WorkspaceOwnerUncheckedUpdateManyWithoutWorkspaceMemberNestedInput
    companiesCreated?: CompanyUncheckedUpdateManyWithoutCreatedByMemberNestedInput
    invitedMembers?: WorkspaceMemberUncheckedUpdateManyWithoutInviterNestedInput
  }

  export type WorkspaceMemberCreateManyInput = {
    id?: number
    workspaceId: number
    userId: number
    profileId: number
    inviterId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceMemberUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceMemberUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    profileId?: IntFieldUpdateOperationsInput | number
    inviterId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceOwnerCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutWorkspaceOwnersInput
    workspaceMember: WorkspaceMemberCreateNestedOneWithoutOwnersInput
  }

  export type WorkspaceOwnerUncheckedCreateInput = {
    id?: number
    workspaceId: number
    workspaceMemberId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceOwnerUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutWorkspaceOwnersNestedInput
    workspaceMember?: WorkspaceMemberUpdateOneRequiredWithoutOwnersNestedInput
  }

  export type WorkspaceOwnerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    workspaceMemberId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceOwnerCreateManyInput = {
    id?: number
    workspaceId: number
    workspaceMemberId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceOwnerUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceOwnerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    workspaceMemberId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyCreateInput = {
    name: string
    location: string
    businessNumber?: string | null
    managementNumber?: string | null
    employeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutCompaniesInput
    companyIndustryCodes?: CompanyIndustryCodeCreateNestedManyWithoutCompanyInput
    dayLaborers?: DayLaborerCreateNestedManyWithoutCompanyInput
    employees?: EmployeeCreateNestedManyWithoutCompanyInput
    owners?: OwnerCreateNestedManyWithoutCompanyInput
    sites?: SiteCreateNestedManyWithoutCompanyInput
    createdByMember: WorkspaceMemberCreateNestedOneWithoutCompaniesCreatedInput
  }

  export type CompanyUncheckedCreateInput = {
    id?: number
    workspaceId: number
    name: string
    location: string
    businessNumber?: string | null
    managementNumber?: string | null
    employeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: number
    companyIndustryCodes?: CompanyIndustryCodeUncheckedCreateNestedManyWithoutCompanyInput
    dayLaborers?: DayLaborerUncheckedCreateNestedManyWithoutCompanyInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutCompanyInput
    owners?: OwnerUncheckedCreateNestedManyWithoutCompanyInput
    sites?: SiteUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    businessNumber?: NullableStringFieldUpdateOperationsInput | string | null
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutCompaniesNestedInput
    companyIndustryCodes?: CompanyIndustryCodeUpdateManyWithoutCompanyNestedInput
    dayLaborers?: DayLaborerUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUpdateManyWithoutCompanyNestedInput
    owners?: OwnerUpdateManyWithoutCompanyNestedInput
    sites?: SiteUpdateManyWithoutCompanyNestedInput
    createdByMember?: WorkspaceMemberUpdateOneRequiredWithoutCompaniesCreatedNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    businessNumber?: NullableStringFieldUpdateOperationsInput | string | null
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    companyIndustryCodes?: CompanyIndustryCodeUncheckedUpdateManyWithoutCompanyNestedInput
    dayLaborers?: DayLaborerUncheckedUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutCompanyNestedInput
    owners?: OwnerUncheckedUpdateManyWithoutCompanyNestedInput
    sites?: SiteUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateManyInput = {
    id?: number
    workspaceId: number
    name: string
    location: string
    businessNumber?: string | null
    managementNumber?: string | null
    employeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: number
  }

  export type CompanyUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    businessNumber?: NullableStringFieldUpdateOperationsInput | string | null
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    businessNumber?: NullableStringFieldUpdateOperationsInput | string | null
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
  }

  export type EmployeeCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutEmployeesInput
    talentPool: TalentPoolCreateNestedOneWithoutEmployeesInput
    owners?: OwnerCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateInput = {
    id?: number
    talentPoolId: number
    companyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    owners?: OwnerUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutEmployeesNestedInput
    talentPool?: TalentPoolUpdateOneRequiredWithoutEmployeesNestedInput
    owners?: OwnerUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    talentPoolId?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owners?: OwnerUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateManyInput = {
    id?: number
    talentPoolId: number
    companyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    talentPoolId?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DayLaborerCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutDayLaborersInput
    talentPool: TalentPoolCreateNestedOneWithoutDayLaborersInput
  }

  export type DayLaborerUncheckedCreateInput = {
    id?: number
    talentPoolId: number
    companyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DayLaborerUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutDayLaborersNestedInput
    talentPool?: TalentPoolUpdateOneRequiredWithoutDayLaborersNestedInput
  }

  export type DayLaborerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    talentPoolId?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DayLaborerCreateManyInput = {
    id?: number
    talentPoolId: number
    companyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DayLaborerUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DayLaborerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    talentPoolId?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OwnerCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutOwnersInput
    employee: EmployeeCreateNestedOneWithoutOwnersInput
  }

  export type OwnerUncheckedCreateInput = {
    id?: number
    employeeId: number
    companyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OwnerUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutOwnersNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutOwnersNestedInput
  }

  export type OwnerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OwnerCreateManyInput = {
    id?: number
    employeeId: number
    companyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OwnerUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OwnerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectOwnerCreateInput = {
    name: string
    address: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutProjectOwnersInput
  }

  export type ProjectOwnerUncheckedCreateInput = {
    id?: number
    projectId: number
    name: string
    address: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectOwnerUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutProjectOwnersNestedInput
  }

  export type ProjectOwnerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectOwnerCreateManyInput = {
    id?: number
    projectId: number
    name: string
    address: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectOwnerUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectOwnerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutProjectsInput
    projectOwners?: ProjectOwnerCreateNestedManyWithoutProjectInput
    sites?: SiteCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: number
    workspaceId: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectOwners?: ProjectOwnerUncheckedCreateNestedManyWithoutProjectInput
    sites?: SiteUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutProjectsNestedInput
    projectOwners?: ProjectOwnerUpdateManyWithoutProjectNestedInput
    sites?: SiteUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectOwners?: ProjectOwnerUncheckedUpdateManyWithoutProjectNestedInput
    sites?: SiteUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: number
    workspaceId: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteCreateInput = {
    name: string
    location: string
    startDate: Date | string
    endDate: Date | string
    managementNumber?: string | null
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutSitesInput
    company: CompanyCreateNestedOneWithoutSitesInput
    project?: ProjectCreateNestedOneWithoutSitesInput
    siteAttendances?: SiteAttendanceCreateNestedManyWithoutSiteInput
  }

  export type SiteUncheckedCreateInput = {
    id?: number
    workspaceId: number
    projectId?: number | null
    companyId: number
    name: string
    location: string
    startDate: Date | string
    endDate: Date | string
    managementNumber?: string | null
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    siteAttendances?: SiteAttendanceUncheckedCreateNestedManyWithoutSiteInput
  }

  export type SiteUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutSitesNestedInput
    company?: CompanyUpdateOneRequiredWithoutSitesNestedInput
    project?: ProjectUpdateOneWithoutSitesNestedInput
    siteAttendances?: SiteAttendanceUpdateManyWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    siteAttendances?: SiteAttendanceUncheckedUpdateManyWithoutSiteNestedInput
  }

  export type SiteCreateManyInput = {
    id?: number
    workspaceId: number
    projectId?: number | null
    companyId: number
    name: string
    location: string
    startDate: Date | string
    endDate: Date | string
    managementNumber?: string | null
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SiteUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteAttendanceCreateInput = {
    date: Date | string
    startTime: Date | string
    endTime: Date | string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    site: SiteCreateNestedOneWithoutSiteAttendancesInput
    talentPool: TalentPoolCreateNestedOneWithoutSiteAttendancesInput
  }

  export type SiteAttendanceUncheckedCreateInput = {
    id?: number
    talentPoolId: number
    siteId: number
    date: Date | string
    startTime: Date | string
    endTime: Date | string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SiteAttendanceUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    site?: SiteUpdateOneRequiredWithoutSiteAttendancesNestedInput
    talentPool?: TalentPoolUpdateOneRequiredWithoutSiteAttendancesNestedInput
  }

  export type SiteAttendanceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    talentPoolId?: IntFieldUpdateOperationsInput | number
    siteId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteAttendanceCreateManyInput = {
    id?: number
    talentPoolId: number
    siteId: number
    date: Date | string
    startTime: Date | string
    endTime: Date | string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SiteAttendanceUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteAttendanceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    talentPoolId?: IntFieldUpdateOperationsInput | number
    siteId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TalentPoolCreateInput = {
    name: string
    birthday: Date | string
    phone: string
    address: string
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutTalentPoolsInput
    profile?: ProfileCreateNestedOneWithoutTalentPoolsInput
    employees?: EmployeeCreateNestedManyWithoutTalentPoolInput
    dayLaborers?: DayLaborerCreateNestedManyWithoutTalentPoolInput
    siteAttendances?: SiteAttendanceCreateNestedManyWithoutTalentPoolInput
  }

  export type TalentPoolUncheckedCreateInput = {
    id?: number
    workspaceId: number
    profileId?: number | null
    name: string
    birthday: Date | string
    phone: string
    address: string
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employees?: EmployeeUncheckedCreateNestedManyWithoutTalentPoolInput
    dayLaborers?: DayLaborerUncheckedCreateNestedManyWithoutTalentPoolInput
    siteAttendances?: SiteAttendanceUncheckedCreateNestedManyWithoutTalentPoolInput
  }

  export type TalentPoolUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutTalentPoolsNestedInput
    profile?: ProfileUpdateOneWithoutTalentPoolsNestedInput
    employees?: EmployeeUpdateManyWithoutTalentPoolNestedInput
    dayLaborers?: DayLaborerUpdateManyWithoutTalentPoolNestedInput
    siteAttendances?: SiteAttendanceUpdateManyWithoutTalentPoolNestedInput
  }

  export type TalentPoolUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    profileId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employees?: EmployeeUncheckedUpdateManyWithoutTalentPoolNestedInput
    dayLaborers?: DayLaborerUncheckedUpdateManyWithoutTalentPoolNestedInput
    siteAttendances?: SiteAttendanceUncheckedUpdateManyWithoutTalentPoolNestedInput
  }

  export type TalentPoolCreateManyInput = {
    id?: number
    workspaceId: number
    profileId?: number | null
    name: string
    birthday: Date | string
    phone: string
    address: string
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TalentPoolUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TalentPoolUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    profileId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IndustrialAccidentInsurancePremiumRateCreateInput = {
    firstLevel?: string | null
    firstLevelCode?: number | null
    secondLevel?: string | null
    secondLevelCode?: number | null
    industryName?: string | null
    industryCode?: number | null
    date?: string | null
    rate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    companyIndustryCodes?: CompanyIndustryCodeCreateNestedManyWithoutIndustrialAccidentInsurancePremiumRateInput
  }

  export type IndustrialAccidentInsurancePremiumRateUncheckedCreateInput = {
    id?: number
    firstLevel?: string | null
    firstLevelCode?: number | null
    secondLevel?: string | null
    secondLevelCode?: number | null
    industryName?: string | null
    industryCode?: number | null
    date?: string | null
    rate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    companyIndustryCodes?: CompanyIndustryCodeUncheckedCreateNestedManyWithoutIndustrialAccidentInsurancePremiumRateInput
  }

  export type IndustrialAccidentInsurancePremiumRateUpdateInput = {
    firstLevel?: NullableStringFieldUpdateOperationsInput | string | null
    firstLevelCode?: NullableIntFieldUpdateOperationsInput | number | null
    secondLevel?: NullableStringFieldUpdateOperationsInput | string | null
    secondLevelCode?: NullableIntFieldUpdateOperationsInput | number | null
    industryName?: NullableStringFieldUpdateOperationsInput | string | null
    industryCode?: NullableIntFieldUpdateOperationsInput | number | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    rate?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyIndustryCodes?: CompanyIndustryCodeUpdateManyWithoutIndustrialAccidentInsurancePremiumRateNestedInput
  }

  export type IndustrialAccidentInsurancePremiumRateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstLevel?: NullableStringFieldUpdateOperationsInput | string | null
    firstLevelCode?: NullableIntFieldUpdateOperationsInput | number | null
    secondLevel?: NullableStringFieldUpdateOperationsInput | string | null
    secondLevelCode?: NullableIntFieldUpdateOperationsInput | number | null
    industryName?: NullableStringFieldUpdateOperationsInput | string | null
    industryCode?: NullableIntFieldUpdateOperationsInput | number | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    rate?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyIndustryCodes?: CompanyIndustryCodeUncheckedUpdateManyWithoutIndustrialAccidentInsurancePremiumRateNestedInput
  }

  export type IndustrialAccidentInsurancePremiumRateCreateManyInput = {
    id?: number
    firstLevel?: string | null
    firstLevelCode?: number | null
    secondLevel?: string | null
    secondLevelCode?: number | null
    industryName?: string | null
    industryCode?: number | null
    date?: string | null
    rate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IndustrialAccidentInsurancePremiumRateUpdateManyMutationInput = {
    firstLevel?: NullableStringFieldUpdateOperationsInput | string | null
    firstLevelCode?: NullableIntFieldUpdateOperationsInput | number | null
    secondLevel?: NullableStringFieldUpdateOperationsInput | string | null
    secondLevelCode?: NullableIntFieldUpdateOperationsInput | number | null
    industryName?: NullableStringFieldUpdateOperationsInput | string | null
    industryCode?: NullableIntFieldUpdateOperationsInput | number | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    rate?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IndustrialAccidentInsurancePremiumRateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstLevel?: NullableStringFieldUpdateOperationsInput | string | null
    firstLevelCode?: NullableIntFieldUpdateOperationsInput | number | null
    secondLevel?: NullableStringFieldUpdateOperationsInput | string | null
    secondLevelCode?: NullableIntFieldUpdateOperationsInput | number | null
    industryName?: NullableStringFieldUpdateOperationsInput | string | null
    industryCode?: NullableIntFieldUpdateOperationsInput | number | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    rate?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyIndustryCodeCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutCompanyIndustryCodesInput
    industrialAccidentInsurancePremiumRate: IndustrialAccidentInsurancePremiumRateCreateNestedOneWithoutCompanyIndustryCodesInput
  }

  export type CompanyIndustryCodeUncheckedCreateInput = {
    id?: number
    companyId: number
    industryCode: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyIndustryCodeUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutCompanyIndustryCodesNestedInput
    industrialAccidentInsurancePremiumRate?: IndustrialAccidentInsurancePremiumRateUpdateOneRequiredWithoutCompanyIndustryCodesNestedInput
  }

  export type CompanyIndustryCodeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    industryCode?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyIndustryCodeCreateManyInput = {
    id?: number
    companyId: number
    industryCode: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyIndustryCodeUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyIndustryCodeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    industryCode?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PrimaryProfileNullableScalarRelationFilter = {
    is?: PrimaryProfileWhereInput | null
    isNot?: PrimaryProfileWhereInput | null
  }

  export type ProfileListRelationFilter = {
    every?: ProfileWhereInput
    some?: ProfileWhereInput
    none?: ProfileWhereInput
  }

  export type WorkspaceMemberListRelationFilter = {
    every?: WorkspaceMemberWhereInput
    some?: WorkspaceMemberWhereInput
    none?: WorkspaceMemberWhereInput
  }

  export type ProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkspaceMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type TalentPoolListRelationFilter = {
    every?: TalentPoolWhereInput
    some?: TalentPoolWhereInput
    none?: TalentPoolWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TalentPoolOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    birthday?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    birthday?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    birthday?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProfileScalarRelationFilter = {
    is?: ProfileWhereInput
    isNot?: ProfileWhereInput
  }

  export type PrimaryProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    profileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PrimaryProfileAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    profileId?: SortOrder
  }

  export type PrimaryProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    profileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PrimaryProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    profileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PrimaryProfileSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    profileId?: SortOrder
  }

  export type CompanyListRelationFilter = {
    every?: CompanyWhereInput
    some?: CompanyWhereInput
    none?: CompanyWhereInput
  }

  export type SiteListRelationFilter = {
    every?: SiteWhereInput
    some?: SiteWhereInput
    none?: SiteWhereInput
  }

  export type WorkspaceOwnerListRelationFilter = {
    every?: WorkspaceOwnerWhereInput
    some?: WorkspaceOwnerWhereInput
    none?: WorkspaceOwnerWhereInput
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type CompanyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SiteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkspaceOwnerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkspaceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkspaceAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type WorkspaceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkspaceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkspaceSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type WorkspaceScalarRelationFilter = {
    is?: WorkspaceWhereInput
    isNot?: WorkspaceWhereInput
  }

  export type WorkspaceMemberNullableScalarRelationFilter = {
    is?: WorkspaceMemberWhereInput | null
    isNot?: WorkspaceMemberWhereInput | null
  }

  export type WorkspaceMemberWorkspaceIdUserIdCompoundUniqueInput = {
    workspaceId: number
    userId: number
  }

  export type WorkspaceMemberCountOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    userId?: SortOrder
    profileId?: SortOrder
    inviterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkspaceMemberAvgOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    userId?: SortOrder
    profileId?: SortOrder
    inviterId?: SortOrder
  }

  export type WorkspaceMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    userId?: SortOrder
    profileId?: SortOrder
    inviterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkspaceMemberMinOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    userId?: SortOrder
    profileId?: SortOrder
    inviterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkspaceMemberSumOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    userId?: SortOrder
    profileId?: SortOrder
    inviterId?: SortOrder
  }

  export type WorkspaceMemberScalarRelationFilter = {
    is?: WorkspaceMemberWhereInput
    isNot?: WorkspaceMemberWhereInput
  }

  export type WorkspaceOwnerCountOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    workspaceMemberId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkspaceOwnerAvgOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    workspaceMemberId?: SortOrder
  }

  export type WorkspaceOwnerMaxOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    workspaceMemberId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkspaceOwnerMinOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    workspaceMemberId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkspaceOwnerSumOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    workspaceMemberId?: SortOrder
  }

  export type CompanyIndustryCodeListRelationFilter = {
    every?: CompanyIndustryCodeWhereInput
    some?: CompanyIndustryCodeWhereInput
    none?: CompanyIndustryCodeWhereInput
  }

  export type DayLaborerListRelationFilter = {
    every?: DayLaborerWhereInput
    some?: DayLaborerWhereInput
    none?: DayLaborerWhereInput
  }

  export type EmployeeListRelationFilter = {
    every?: EmployeeWhereInput
    some?: EmployeeWhereInput
    none?: EmployeeWhereInput
  }

  export type OwnerListRelationFilter = {
    every?: OwnerWhereInput
    some?: OwnerWhereInput
    none?: OwnerWhereInput
  }

  export type CompanyIndustryCodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DayLaborerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OwnerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    name?: SortOrder
    location?: SortOrder
    businessNumber?: SortOrder
    managementNumber?: SortOrder
    employeeCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
  }

  export type CompanyAvgOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    employeeCount?: SortOrder
    createdBy?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    name?: SortOrder
    location?: SortOrder
    businessNumber?: SortOrder
    managementNumber?: SortOrder
    employeeCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    name?: SortOrder
    location?: SortOrder
    businessNumber?: SortOrder
    managementNumber?: SortOrder
    employeeCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
  }

  export type CompanySumOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    employeeCount?: SortOrder
    createdBy?: SortOrder
  }

  export type CompanyScalarRelationFilter = {
    is?: CompanyWhereInput
    isNot?: CompanyWhereInput
  }

  export type TalentPoolScalarRelationFilter = {
    is?: TalentPoolWhereInput
    isNot?: TalentPoolWhereInput
  }

  export type EmployeeCountOrderByAggregateInput = {
    id?: SortOrder
    talentPoolId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployeeAvgOrderByAggregateInput = {
    id?: SortOrder
    talentPoolId?: SortOrder
    companyId?: SortOrder
  }

  export type EmployeeMaxOrderByAggregateInput = {
    id?: SortOrder
    talentPoolId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployeeMinOrderByAggregateInput = {
    id?: SortOrder
    talentPoolId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployeeSumOrderByAggregateInput = {
    id?: SortOrder
    talentPoolId?: SortOrder
    companyId?: SortOrder
  }

  export type DayLaborerCountOrderByAggregateInput = {
    id?: SortOrder
    talentPoolId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DayLaborerAvgOrderByAggregateInput = {
    id?: SortOrder
    talentPoolId?: SortOrder
    companyId?: SortOrder
  }

  export type DayLaborerMaxOrderByAggregateInput = {
    id?: SortOrder
    talentPoolId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DayLaborerMinOrderByAggregateInput = {
    id?: SortOrder
    talentPoolId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DayLaborerSumOrderByAggregateInput = {
    id?: SortOrder
    talentPoolId?: SortOrder
    companyId?: SortOrder
  }

  export type EmployeeScalarRelationFilter = {
    is?: EmployeeWhereInput
    isNot?: EmployeeWhereInput
  }

  export type OwnerCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OwnerAvgOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    companyId?: SortOrder
  }

  export type OwnerMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OwnerMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OwnerSumOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    companyId?: SortOrder
  }

  export type ProjectScalarRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type ProjectOwnerCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectOwnerAvgOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
  }

  export type ProjectOwnerMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectOwnerMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectOwnerSumOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
  }

  export type ProjectOwnerListRelationFilter = {
    every?: ProjectOwnerWhereInput
    some?: ProjectOwnerWhereInput
    none?: ProjectOwnerWhereInput
  }

  export type ProjectOwnerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
  }

  export type ProjectNullableScalarRelationFilter = {
    is?: ProjectWhereInput | null
    isNot?: ProjectWhereInput | null
  }

  export type SiteAttendanceListRelationFilter = {
    every?: SiteAttendanceWhereInput
    some?: SiteAttendanceWhereInput
    none?: SiteAttendanceWhereInput
  }

  export type SiteAttendanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SiteCountOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    projectId?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    location?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    managementNumber?: SortOrder
    memo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SiteAvgOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    projectId?: SortOrder
    companyId?: SortOrder
  }

  export type SiteMaxOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    projectId?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    location?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    managementNumber?: SortOrder
    memo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SiteMinOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    projectId?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    location?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    managementNumber?: SortOrder
    memo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SiteSumOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    projectId?: SortOrder
    companyId?: SortOrder
  }

  export type SiteScalarRelationFilter = {
    is?: SiteWhereInput
    isNot?: SiteWhereInput
  }

  export type SiteAttendanceCountOrderByAggregateInput = {
    id?: SortOrder
    talentPoolId?: SortOrder
    siteId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SiteAttendanceAvgOrderByAggregateInput = {
    id?: SortOrder
    talentPoolId?: SortOrder
    siteId?: SortOrder
    amount?: SortOrder
  }

  export type SiteAttendanceMaxOrderByAggregateInput = {
    id?: SortOrder
    talentPoolId?: SortOrder
    siteId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SiteAttendanceMinOrderByAggregateInput = {
    id?: SortOrder
    talentPoolId?: SortOrder
    siteId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SiteAttendanceSumOrderByAggregateInput = {
    id?: SortOrder
    talentPoolId?: SortOrder
    siteId?: SortOrder
    amount?: SortOrder
  }

  export type ProfileNullableScalarRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type TalentPoolCountOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    profileId?: SortOrder
    name?: SortOrder
    birthday?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    memo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TalentPoolAvgOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    profileId?: SortOrder
  }

  export type TalentPoolMaxOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    profileId?: SortOrder
    name?: SortOrder
    birthday?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    memo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TalentPoolMinOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    profileId?: SortOrder
    name?: SortOrder
    birthday?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    memo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TalentPoolSumOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    profileId?: SortOrder
  }

  export type IndustrialAccidentInsurancePremiumRateFirstLevelFirstLevelCodeSecondLevelSecondLevelCodeIndustryNameIndustryCodeDateCompoundUniqueInput = {
    firstLevel: string
    firstLevelCode: number
    secondLevel: string
    secondLevelCode: number
    industryName: string
    industryCode: number
    date: string
  }

  export type IndustrialAccidentInsurancePremiumRateCountOrderByAggregateInput = {
    id?: SortOrder
    firstLevel?: SortOrder
    firstLevelCode?: SortOrder
    secondLevel?: SortOrder
    secondLevelCode?: SortOrder
    industryName?: SortOrder
    industryCode?: SortOrder
    date?: SortOrder
    rate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IndustrialAccidentInsurancePremiumRateAvgOrderByAggregateInput = {
    id?: SortOrder
    firstLevelCode?: SortOrder
    secondLevelCode?: SortOrder
    industryCode?: SortOrder
    rate?: SortOrder
  }

  export type IndustrialAccidentInsurancePremiumRateMaxOrderByAggregateInput = {
    id?: SortOrder
    firstLevel?: SortOrder
    firstLevelCode?: SortOrder
    secondLevel?: SortOrder
    secondLevelCode?: SortOrder
    industryName?: SortOrder
    industryCode?: SortOrder
    date?: SortOrder
    rate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IndustrialAccidentInsurancePremiumRateMinOrderByAggregateInput = {
    id?: SortOrder
    firstLevel?: SortOrder
    firstLevelCode?: SortOrder
    secondLevel?: SortOrder
    secondLevelCode?: SortOrder
    industryName?: SortOrder
    industryCode?: SortOrder
    date?: SortOrder
    rate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IndustrialAccidentInsurancePremiumRateSumOrderByAggregateInput = {
    id?: SortOrder
    firstLevelCode?: SortOrder
    secondLevelCode?: SortOrder
    industryCode?: SortOrder
    rate?: SortOrder
  }

  export type IndustrialAccidentInsurancePremiumRateScalarRelationFilter = {
    is?: IndustrialAccidentInsurancePremiumRateWhereInput
    isNot?: IndustrialAccidentInsurancePremiumRateWhereInput
  }

  export type CompanyIndustryCodeCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    industryCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyIndustryCodeAvgOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    industryCode?: SortOrder
  }

  export type CompanyIndustryCodeMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    industryCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyIndustryCodeMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    industryCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyIndustryCodeSumOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    industryCode?: SortOrder
  }

  export type PrimaryProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<PrimaryProfileCreateWithoutUserInput, PrimaryProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: PrimaryProfileCreateOrConnectWithoutUserInput
    connect?: PrimaryProfileWhereUniqueInput
  }

  export type ProfileCreateNestedManyWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput> | ProfileCreateWithoutUserInput[] | ProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput | ProfileCreateOrConnectWithoutUserInput[]
    createMany?: ProfileCreateManyUserInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type WorkspaceMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkspaceMemberCreateWithoutUserInput, WorkspaceMemberUncheckedCreateWithoutUserInput> | WorkspaceMemberCreateWithoutUserInput[] | WorkspaceMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutUserInput | WorkspaceMemberCreateOrConnectWithoutUserInput[]
    createMany?: WorkspaceMemberCreateManyUserInputEnvelope
    connect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
  }

  export type PrimaryProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<PrimaryProfileCreateWithoutUserInput, PrimaryProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: PrimaryProfileCreateOrConnectWithoutUserInput
    connect?: PrimaryProfileWhereUniqueInput
  }

  export type ProfileUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput> | ProfileCreateWithoutUserInput[] | ProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput | ProfileCreateOrConnectWithoutUserInput[]
    createMany?: ProfileCreateManyUserInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkspaceMemberCreateWithoutUserInput, WorkspaceMemberUncheckedCreateWithoutUserInput> | WorkspaceMemberCreateWithoutUserInput[] | WorkspaceMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutUserInput | WorkspaceMemberCreateOrConnectWithoutUserInput[]
    createMany?: WorkspaceMemberCreateManyUserInputEnvelope
    connect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PrimaryProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<PrimaryProfileCreateWithoutUserInput, PrimaryProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: PrimaryProfileCreateOrConnectWithoutUserInput
    upsert?: PrimaryProfileUpsertWithoutUserInput
    disconnect?: PrimaryProfileWhereInput | boolean
    delete?: PrimaryProfileWhereInput | boolean
    connect?: PrimaryProfileWhereUniqueInput
    update?: XOR<XOR<PrimaryProfileUpdateToOneWithWhereWithoutUserInput, PrimaryProfileUpdateWithoutUserInput>, PrimaryProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput> | ProfileCreateWithoutUserInput[] | ProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput | ProfileCreateOrConnectWithoutUserInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutUserInput | ProfileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProfileCreateManyUserInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutUserInput | ProfileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutUserInput | ProfileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type WorkspaceMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkspaceMemberCreateWithoutUserInput, WorkspaceMemberUncheckedCreateWithoutUserInput> | WorkspaceMemberCreateWithoutUserInput[] | WorkspaceMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutUserInput | WorkspaceMemberCreateOrConnectWithoutUserInput[]
    upsert?: WorkspaceMemberUpsertWithWhereUniqueWithoutUserInput | WorkspaceMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkspaceMemberCreateManyUserInputEnvelope
    set?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    disconnect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    delete?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    connect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    update?: WorkspaceMemberUpdateWithWhereUniqueWithoutUserInput | WorkspaceMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkspaceMemberUpdateManyWithWhereWithoutUserInput | WorkspaceMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkspaceMemberScalarWhereInput | WorkspaceMemberScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PrimaryProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<PrimaryProfileCreateWithoutUserInput, PrimaryProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: PrimaryProfileCreateOrConnectWithoutUserInput
    upsert?: PrimaryProfileUpsertWithoutUserInput
    disconnect?: PrimaryProfileWhereInput | boolean
    delete?: PrimaryProfileWhereInput | boolean
    connect?: PrimaryProfileWhereUniqueInput
    update?: XOR<XOR<PrimaryProfileUpdateToOneWithWhereWithoutUserInput, PrimaryProfileUpdateWithoutUserInput>, PrimaryProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput> | ProfileCreateWithoutUserInput[] | ProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput | ProfileCreateOrConnectWithoutUserInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutUserInput | ProfileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProfileCreateManyUserInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutUserInput | ProfileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutUserInput | ProfileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkspaceMemberCreateWithoutUserInput, WorkspaceMemberUncheckedCreateWithoutUserInput> | WorkspaceMemberCreateWithoutUserInput[] | WorkspaceMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutUserInput | WorkspaceMemberCreateOrConnectWithoutUserInput[]
    upsert?: WorkspaceMemberUpsertWithWhereUniqueWithoutUserInput | WorkspaceMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkspaceMemberCreateManyUserInputEnvelope
    set?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    disconnect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    delete?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    connect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    update?: WorkspaceMemberUpdateWithWhereUniqueWithoutUserInput | WorkspaceMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkspaceMemberUpdateManyWithWhereWithoutUserInput | WorkspaceMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkspaceMemberScalarWhereInput | WorkspaceMemberScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProfilesInput = {
    create?: XOR<UserCreateWithoutProfilesInput, UserUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfilesInput
    connect?: UserWhereUniqueInput
  }

  export type TalentPoolCreateNestedManyWithoutProfileInput = {
    create?: XOR<TalentPoolCreateWithoutProfileInput, TalentPoolUncheckedCreateWithoutProfileInput> | TalentPoolCreateWithoutProfileInput[] | TalentPoolUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: TalentPoolCreateOrConnectWithoutProfileInput | TalentPoolCreateOrConnectWithoutProfileInput[]
    createMany?: TalentPoolCreateManyProfileInputEnvelope
    connect?: TalentPoolWhereUniqueInput | TalentPoolWhereUniqueInput[]
  }

  export type PrimaryProfileCreateNestedOneWithoutProfileInput = {
    create?: XOR<PrimaryProfileCreateWithoutProfileInput, PrimaryProfileUncheckedCreateWithoutProfileInput>
    connectOrCreate?: PrimaryProfileCreateOrConnectWithoutProfileInput
    connect?: PrimaryProfileWhereUniqueInput
  }

  export type WorkspaceMemberCreateNestedManyWithoutProfileInput = {
    create?: XOR<WorkspaceMemberCreateWithoutProfileInput, WorkspaceMemberUncheckedCreateWithoutProfileInput> | WorkspaceMemberCreateWithoutProfileInput[] | WorkspaceMemberUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutProfileInput | WorkspaceMemberCreateOrConnectWithoutProfileInput[]
    createMany?: WorkspaceMemberCreateManyProfileInputEnvelope
    connect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
  }

  export type TalentPoolUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<TalentPoolCreateWithoutProfileInput, TalentPoolUncheckedCreateWithoutProfileInput> | TalentPoolCreateWithoutProfileInput[] | TalentPoolUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: TalentPoolCreateOrConnectWithoutProfileInput | TalentPoolCreateOrConnectWithoutProfileInput[]
    createMany?: TalentPoolCreateManyProfileInputEnvelope
    connect?: TalentPoolWhereUniqueInput | TalentPoolWhereUniqueInput[]
  }

  export type PrimaryProfileUncheckedCreateNestedOneWithoutProfileInput = {
    create?: XOR<PrimaryProfileCreateWithoutProfileInput, PrimaryProfileUncheckedCreateWithoutProfileInput>
    connectOrCreate?: PrimaryProfileCreateOrConnectWithoutProfileInput
    connect?: PrimaryProfileWhereUniqueInput
  }

  export type WorkspaceMemberUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<WorkspaceMemberCreateWithoutProfileInput, WorkspaceMemberUncheckedCreateWithoutProfileInput> | WorkspaceMemberCreateWithoutProfileInput[] | WorkspaceMemberUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutProfileInput | WorkspaceMemberCreateOrConnectWithoutProfileInput[]
    createMany?: WorkspaceMemberCreateManyProfileInputEnvelope
    connect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneWithoutProfilesNestedInput = {
    create?: XOR<UserCreateWithoutProfilesInput, UserUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfilesInput
    upsert?: UserUpsertWithoutProfilesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfilesInput, UserUpdateWithoutProfilesInput>, UserUncheckedUpdateWithoutProfilesInput>
  }

  export type TalentPoolUpdateManyWithoutProfileNestedInput = {
    create?: XOR<TalentPoolCreateWithoutProfileInput, TalentPoolUncheckedCreateWithoutProfileInput> | TalentPoolCreateWithoutProfileInput[] | TalentPoolUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: TalentPoolCreateOrConnectWithoutProfileInput | TalentPoolCreateOrConnectWithoutProfileInput[]
    upsert?: TalentPoolUpsertWithWhereUniqueWithoutProfileInput | TalentPoolUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: TalentPoolCreateManyProfileInputEnvelope
    set?: TalentPoolWhereUniqueInput | TalentPoolWhereUniqueInput[]
    disconnect?: TalentPoolWhereUniqueInput | TalentPoolWhereUniqueInput[]
    delete?: TalentPoolWhereUniqueInput | TalentPoolWhereUniqueInput[]
    connect?: TalentPoolWhereUniqueInput | TalentPoolWhereUniqueInput[]
    update?: TalentPoolUpdateWithWhereUniqueWithoutProfileInput | TalentPoolUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: TalentPoolUpdateManyWithWhereWithoutProfileInput | TalentPoolUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: TalentPoolScalarWhereInput | TalentPoolScalarWhereInput[]
  }

  export type PrimaryProfileUpdateOneWithoutProfileNestedInput = {
    create?: XOR<PrimaryProfileCreateWithoutProfileInput, PrimaryProfileUncheckedCreateWithoutProfileInput>
    connectOrCreate?: PrimaryProfileCreateOrConnectWithoutProfileInput
    upsert?: PrimaryProfileUpsertWithoutProfileInput
    disconnect?: PrimaryProfileWhereInput | boolean
    delete?: PrimaryProfileWhereInput | boolean
    connect?: PrimaryProfileWhereUniqueInput
    update?: XOR<XOR<PrimaryProfileUpdateToOneWithWhereWithoutProfileInput, PrimaryProfileUpdateWithoutProfileInput>, PrimaryProfileUncheckedUpdateWithoutProfileInput>
  }

  export type WorkspaceMemberUpdateManyWithoutProfileNestedInput = {
    create?: XOR<WorkspaceMemberCreateWithoutProfileInput, WorkspaceMemberUncheckedCreateWithoutProfileInput> | WorkspaceMemberCreateWithoutProfileInput[] | WorkspaceMemberUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutProfileInput | WorkspaceMemberCreateOrConnectWithoutProfileInput[]
    upsert?: WorkspaceMemberUpsertWithWhereUniqueWithoutProfileInput | WorkspaceMemberUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: WorkspaceMemberCreateManyProfileInputEnvelope
    set?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    disconnect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    delete?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    connect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    update?: WorkspaceMemberUpdateWithWhereUniqueWithoutProfileInput | WorkspaceMemberUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: WorkspaceMemberUpdateManyWithWhereWithoutProfileInput | WorkspaceMemberUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: WorkspaceMemberScalarWhereInput | WorkspaceMemberScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TalentPoolUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<TalentPoolCreateWithoutProfileInput, TalentPoolUncheckedCreateWithoutProfileInput> | TalentPoolCreateWithoutProfileInput[] | TalentPoolUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: TalentPoolCreateOrConnectWithoutProfileInput | TalentPoolCreateOrConnectWithoutProfileInput[]
    upsert?: TalentPoolUpsertWithWhereUniqueWithoutProfileInput | TalentPoolUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: TalentPoolCreateManyProfileInputEnvelope
    set?: TalentPoolWhereUniqueInput | TalentPoolWhereUniqueInput[]
    disconnect?: TalentPoolWhereUniqueInput | TalentPoolWhereUniqueInput[]
    delete?: TalentPoolWhereUniqueInput | TalentPoolWhereUniqueInput[]
    connect?: TalentPoolWhereUniqueInput | TalentPoolWhereUniqueInput[]
    update?: TalentPoolUpdateWithWhereUniqueWithoutProfileInput | TalentPoolUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: TalentPoolUpdateManyWithWhereWithoutProfileInput | TalentPoolUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: TalentPoolScalarWhereInput | TalentPoolScalarWhereInput[]
  }

  export type PrimaryProfileUncheckedUpdateOneWithoutProfileNestedInput = {
    create?: XOR<PrimaryProfileCreateWithoutProfileInput, PrimaryProfileUncheckedCreateWithoutProfileInput>
    connectOrCreate?: PrimaryProfileCreateOrConnectWithoutProfileInput
    upsert?: PrimaryProfileUpsertWithoutProfileInput
    disconnect?: PrimaryProfileWhereInput | boolean
    delete?: PrimaryProfileWhereInput | boolean
    connect?: PrimaryProfileWhereUniqueInput
    update?: XOR<XOR<PrimaryProfileUpdateToOneWithWhereWithoutProfileInput, PrimaryProfileUpdateWithoutProfileInput>, PrimaryProfileUncheckedUpdateWithoutProfileInput>
  }

  export type WorkspaceMemberUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<WorkspaceMemberCreateWithoutProfileInput, WorkspaceMemberUncheckedCreateWithoutProfileInput> | WorkspaceMemberCreateWithoutProfileInput[] | WorkspaceMemberUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutProfileInput | WorkspaceMemberCreateOrConnectWithoutProfileInput[]
    upsert?: WorkspaceMemberUpsertWithWhereUniqueWithoutProfileInput | WorkspaceMemberUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: WorkspaceMemberCreateManyProfileInputEnvelope
    set?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    disconnect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    delete?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    connect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    update?: WorkspaceMemberUpdateWithWhereUniqueWithoutProfileInput | WorkspaceMemberUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: WorkspaceMemberUpdateManyWithWhereWithoutProfileInput | WorkspaceMemberUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: WorkspaceMemberScalarWhereInput | WorkspaceMemberScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPrimaryProfileInput = {
    create?: XOR<UserCreateWithoutPrimaryProfileInput, UserUncheckedCreateWithoutPrimaryProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutPrimaryProfileInput
    connect?: UserWhereUniqueInput
  }

  export type ProfileCreateNestedOneWithoutPrimaryProfileInput = {
    create?: XOR<ProfileCreateWithoutPrimaryProfileInput, ProfileUncheckedCreateWithoutPrimaryProfileInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutPrimaryProfileInput
    connect?: ProfileWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPrimaryProfileNestedInput = {
    create?: XOR<UserCreateWithoutPrimaryProfileInput, UserUncheckedCreateWithoutPrimaryProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutPrimaryProfileInput
    upsert?: UserUpsertWithoutPrimaryProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPrimaryProfileInput, UserUpdateWithoutPrimaryProfileInput>, UserUncheckedUpdateWithoutPrimaryProfileInput>
  }

  export type ProfileUpdateOneRequiredWithoutPrimaryProfileNestedInput = {
    create?: XOR<ProfileCreateWithoutPrimaryProfileInput, ProfileUncheckedCreateWithoutPrimaryProfileInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutPrimaryProfileInput
    upsert?: ProfileUpsertWithoutPrimaryProfileInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutPrimaryProfileInput, ProfileUpdateWithoutPrimaryProfileInput>, ProfileUncheckedUpdateWithoutPrimaryProfileInput>
  }

  export type CompanyCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<CompanyCreateWithoutWorkspaceInput, CompanyUncheckedCreateWithoutWorkspaceInput> | CompanyCreateWithoutWorkspaceInput[] | CompanyUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutWorkspaceInput | CompanyCreateOrConnectWithoutWorkspaceInput[]
    createMany?: CompanyCreateManyWorkspaceInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type SiteCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<SiteCreateWithoutWorkspaceInput, SiteUncheckedCreateWithoutWorkspaceInput> | SiteCreateWithoutWorkspaceInput[] | SiteUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: SiteCreateOrConnectWithoutWorkspaceInput | SiteCreateOrConnectWithoutWorkspaceInput[]
    createMany?: SiteCreateManyWorkspaceInputEnvelope
    connect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
  }

  export type TalentPoolCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<TalentPoolCreateWithoutWorkspaceInput, TalentPoolUncheckedCreateWithoutWorkspaceInput> | TalentPoolCreateWithoutWorkspaceInput[] | TalentPoolUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: TalentPoolCreateOrConnectWithoutWorkspaceInput | TalentPoolCreateOrConnectWithoutWorkspaceInput[]
    createMany?: TalentPoolCreateManyWorkspaceInputEnvelope
    connect?: TalentPoolWhereUniqueInput | TalentPoolWhereUniqueInput[]
  }

  export type WorkspaceMemberCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<WorkspaceMemberCreateWithoutWorkspaceInput, WorkspaceMemberUncheckedCreateWithoutWorkspaceInput> | WorkspaceMemberCreateWithoutWorkspaceInput[] | WorkspaceMemberUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutWorkspaceInput | WorkspaceMemberCreateOrConnectWithoutWorkspaceInput[]
    createMany?: WorkspaceMemberCreateManyWorkspaceInputEnvelope
    connect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
  }

  export type WorkspaceOwnerCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<WorkspaceOwnerCreateWithoutWorkspaceInput, WorkspaceOwnerUncheckedCreateWithoutWorkspaceInput> | WorkspaceOwnerCreateWithoutWorkspaceInput[] | WorkspaceOwnerUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceOwnerCreateOrConnectWithoutWorkspaceInput | WorkspaceOwnerCreateOrConnectWithoutWorkspaceInput[]
    createMany?: WorkspaceOwnerCreateManyWorkspaceInputEnvelope
    connect?: WorkspaceOwnerWhereUniqueInput | WorkspaceOwnerWhereUniqueInput[]
  }

  export type ProjectCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<ProjectCreateWithoutWorkspaceInput, ProjectUncheckedCreateWithoutWorkspaceInput> | ProjectCreateWithoutWorkspaceInput[] | ProjectUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutWorkspaceInput | ProjectCreateOrConnectWithoutWorkspaceInput[]
    createMany?: ProjectCreateManyWorkspaceInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type CompanyUncheckedCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<CompanyCreateWithoutWorkspaceInput, CompanyUncheckedCreateWithoutWorkspaceInput> | CompanyCreateWithoutWorkspaceInput[] | CompanyUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutWorkspaceInput | CompanyCreateOrConnectWithoutWorkspaceInput[]
    createMany?: CompanyCreateManyWorkspaceInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type SiteUncheckedCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<SiteCreateWithoutWorkspaceInput, SiteUncheckedCreateWithoutWorkspaceInput> | SiteCreateWithoutWorkspaceInput[] | SiteUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: SiteCreateOrConnectWithoutWorkspaceInput | SiteCreateOrConnectWithoutWorkspaceInput[]
    createMany?: SiteCreateManyWorkspaceInputEnvelope
    connect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
  }

  export type TalentPoolUncheckedCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<TalentPoolCreateWithoutWorkspaceInput, TalentPoolUncheckedCreateWithoutWorkspaceInput> | TalentPoolCreateWithoutWorkspaceInput[] | TalentPoolUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: TalentPoolCreateOrConnectWithoutWorkspaceInput | TalentPoolCreateOrConnectWithoutWorkspaceInput[]
    createMany?: TalentPoolCreateManyWorkspaceInputEnvelope
    connect?: TalentPoolWhereUniqueInput | TalentPoolWhereUniqueInput[]
  }

  export type WorkspaceMemberUncheckedCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<WorkspaceMemberCreateWithoutWorkspaceInput, WorkspaceMemberUncheckedCreateWithoutWorkspaceInput> | WorkspaceMemberCreateWithoutWorkspaceInput[] | WorkspaceMemberUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutWorkspaceInput | WorkspaceMemberCreateOrConnectWithoutWorkspaceInput[]
    createMany?: WorkspaceMemberCreateManyWorkspaceInputEnvelope
    connect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
  }

  export type WorkspaceOwnerUncheckedCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<WorkspaceOwnerCreateWithoutWorkspaceInput, WorkspaceOwnerUncheckedCreateWithoutWorkspaceInput> | WorkspaceOwnerCreateWithoutWorkspaceInput[] | WorkspaceOwnerUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceOwnerCreateOrConnectWithoutWorkspaceInput | WorkspaceOwnerCreateOrConnectWithoutWorkspaceInput[]
    createMany?: WorkspaceOwnerCreateManyWorkspaceInputEnvelope
    connect?: WorkspaceOwnerWhereUniqueInput | WorkspaceOwnerWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<ProjectCreateWithoutWorkspaceInput, ProjectUncheckedCreateWithoutWorkspaceInput> | ProjectCreateWithoutWorkspaceInput[] | ProjectUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutWorkspaceInput | ProjectCreateOrConnectWithoutWorkspaceInput[]
    createMany?: ProjectCreateManyWorkspaceInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type CompanyUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<CompanyCreateWithoutWorkspaceInput, CompanyUncheckedCreateWithoutWorkspaceInput> | CompanyCreateWithoutWorkspaceInput[] | CompanyUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutWorkspaceInput | CompanyCreateOrConnectWithoutWorkspaceInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutWorkspaceInput | CompanyUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: CompanyCreateManyWorkspaceInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutWorkspaceInput | CompanyUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutWorkspaceInput | CompanyUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type SiteUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<SiteCreateWithoutWorkspaceInput, SiteUncheckedCreateWithoutWorkspaceInput> | SiteCreateWithoutWorkspaceInput[] | SiteUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: SiteCreateOrConnectWithoutWorkspaceInput | SiteCreateOrConnectWithoutWorkspaceInput[]
    upsert?: SiteUpsertWithWhereUniqueWithoutWorkspaceInput | SiteUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: SiteCreateManyWorkspaceInputEnvelope
    set?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    disconnect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    delete?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    connect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    update?: SiteUpdateWithWhereUniqueWithoutWorkspaceInput | SiteUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: SiteUpdateManyWithWhereWithoutWorkspaceInput | SiteUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: SiteScalarWhereInput | SiteScalarWhereInput[]
  }

  export type TalentPoolUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<TalentPoolCreateWithoutWorkspaceInput, TalentPoolUncheckedCreateWithoutWorkspaceInput> | TalentPoolCreateWithoutWorkspaceInput[] | TalentPoolUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: TalentPoolCreateOrConnectWithoutWorkspaceInput | TalentPoolCreateOrConnectWithoutWorkspaceInput[]
    upsert?: TalentPoolUpsertWithWhereUniqueWithoutWorkspaceInput | TalentPoolUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: TalentPoolCreateManyWorkspaceInputEnvelope
    set?: TalentPoolWhereUniqueInput | TalentPoolWhereUniqueInput[]
    disconnect?: TalentPoolWhereUniqueInput | TalentPoolWhereUniqueInput[]
    delete?: TalentPoolWhereUniqueInput | TalentPoolWhereUniqueInput[]
    connect?: TalentPoolWhereUniqueInput | TalentPoolWhereUniqueInput[]
    update?: TalentPoolUpdateWithWhereUniqueWithoutWorkspaceInput | TalentPoolUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: TalentPoolUpdateManyWithWhereWithoutWorkspaceInput | TalentPoolUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: TalentPoolScalarWhereInput | TalentPoolScalarWhereInput[]
  }

  export type WorkspaceMemberUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<WorkspaceMemberCreateWithoutWorkspaceInput, WorkspaceMemberUncheckedCreateWithoutWorkspaceInput> | WorkspaceMemberCreateWithoutWorkspaceInput[] | WorkspaceMemberUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutWorkspaceInput | WorkspaceMemberCreateOrConnectWithoutWorkspaceInput[]
    upsert?: WorkspaceMemberUpsertWithWhereUniqueWithoutWorkspaceInput | WorkspaceMemberUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: WorkspaceMemberCreateManyWorkspaceInputEnvelope
    set?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    disconnect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    delete?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    connect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    update?: WorkspaceMemberUpdateWithWhereUniqueWithoutWorkspaceInput | WorkspaceMemberUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: WorkspaceMemberUpdateManyWithWhereWithoutWorkspaceInput | WorkspaceMemberUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: WorkspaceMemberScalarWhereInput | WorkspaceMemberScalarWhereInput[]
  }

  export type WorkspaceOwnerUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<WorkspaceOwnerCreateWithoutWorkspaceInput, WorkspaceOwnerUncheckedCreateWithoutWorkspaceInput> | WorkspaceOwnerCreateWithoutWorkspaceInput[] | WorkspaceOwnerUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceOwnerCreateOrConnectWithoutWorkspaceInput | WorkspaceOwnerCreateOrConnectWithoutWorkspaceInput[]
    upsert?: WorkspaceOwnerUpsertWithWhereUniqueWithoutWorkspaceInput | WorkspaceOwnerUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: WorkspaceOwnerCreateManyWorkspaceInputEnvelope
    set?: WorkspaceOwnerWhereUniqueInput | WorkspaceOwnerWhereUniqueInput[]
    disconnect?: WorkspaceOwnerWhereUniqueInput | WorkspaceOwnerWhereUniqueInput[]
    delete?: WorkspaceOwnerWhereUniqueInput | WorkspaceOwnerWhereUniqueInput[]
    connect?: WorkspaceOwnerWhereUniqueInput | WorkspaceOwnerWhereUniqueInput[]
    update?: WorkspaceOwnerUpdateWithWhereUniqueWithoutWorkspaceInput | WorkspaceOwnerUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: WorkspaceOwnerUpdateManyWithWhereWithoutWorkspaceInput | WorkspaceOwnerUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: WorkspaceOwnerScalarWhereInput | WorkspaceOwnerScalarWhereInput[]
  }

  export type ProjectUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<ProjectCreateWithoutWorkspaceInput, ProjectUncheckedCreateWithoutWorkspaceInput> | ProjectCreateWithoutWorkspaceInput[] | ProjectUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutWorkspaceInput | ProjectCreateOrConnectWithoutWorkspaceInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutWorkspaceInput | ProjectUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: ProjectCreateManyWorkspaceInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutWorkspaceInput | ProjectUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutWorkspaceInput | ProjectUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type CompanyUncheckedUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<CompanyCreateWithoutWorkspaceInput, CompanyUncheckedCreateWithoutWorkspaceInput> | CompanyCreateWithoutWorkspaceInput[] | CompanyUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutWorkspaceInput | CompanyCreateOrConnectWithoutWorkspaceInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutWorkspaceInput | CompanyUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: CompanyCreateManyWorkspaceInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutWorkspaceInput | CompanyUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutWorkspaceInput | CompanyUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type SiteUncheckedUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<SiteCreateWithoutWorkspaceInput, SiteUncheckedCreateWithoutWorkspaceInput> | SiteCreateWithoutWorkspaceInput[] | SiteUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: SiteCreateOrConnectWithoutWorkspaceInput | SiteCreateOrConnectWithoutWorkspaceInput[]
    upsert?: SiteUpsertWithWhereUniqueWithoutWorkspaceInput | SiteUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: SiteCreateManyWorkspaceInputEnvelope
    set?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    disconnect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    delete?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    connect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    update?: SiteUpdateWithWhereUniqueWithoutWorkspaceInput | SiteUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: SiteUpdateManyWithWhereWithoutWorkspaceInput | SiteUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: SiteScalarWhereInput | SiteScalarWhereInput[]
  }

  export type TalentPoolUncheckedUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<TalentPoolCreateWithoutWorkspaceInput, TalentPoolUncheckedCreateWithoutWorkspaceInput> | TalentPoolCreateWithoutWorkspaceInput[] | TalentPoolUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: TalentPoolCreateOrConnectWithoutWorkspaceInput | TalentPoolCreateOrConnectWithoutWorkspaceInput[]
    upsert?: TalentPoolUpsertWithWhereUniqueWithoutWorkspaceInput | TalentPoolUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: TalentPoolCreateManyWorkspaceInputEnvelope
    set?: TalentPoolWhereUniqueInput | TalentPoolWhereUniqueInput[]
    disconnect?: TalentPoolWhereUniqueInput | TalentPoolWhereUniqueInput[]
    delete?: TalentPoolWhereUniqueInput | TalentPoolWhereUniqueInput[]
    connect?: TalentPoolWhereUniqueInput | TalentPoolWhereUniqueInput[]
    update?: TalentPoolUpdateWithWhereUniqueWithoutWorkspaceInput | TalentPoolUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: TalentPoolUpdateManyWithWhereWithoutWorkspaceInput | TalentPoolUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: TalentPoolScalarWhereInput | TalentPoolScalarWhereInput[]
  }

  export type WorkspaceMemberUncheckedUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<WorkspaceMemberCreateWithoutWorkspaceInput, WorkspaceMemberUncheckedCreateWithoutWorkspaceInput> | WorkspaceMemberCreateWithoutWorkspaceInput[] | WorkspaceMemberUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutWorkspaceInput | WorkspaceMemberCreateOrConnectWithoutWorkspaceInput[]
    upsert?: WorkspaceMemberUpsertWithWhereUniqueWithoutWorkspaceInput | WorkspaceMemberUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: WorkspaceMemberCreateManyWorkspaceInputEnvelope
    set?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    disconnect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    delete?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    connect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    update?: WorkspaceMemberUpdateWithWhereUniqueWithoutWorkspaceInput | WorkspaceMemberUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: WorkspaceMemberUpdateManyWithWhereWithoutWorkspaceInput | WorkspaceMemberUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: WorkspaceMemberScalarWhereInput | WorkspaceMemberScalarWhereInput[]
  }

  export type WorkspaceOwnerUncheckedUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<WorkspaceOwnerCreateWithoutWorkspaceInput, WorkspaceOwnerUncheckedCreateWithoutWorkspaceInput> | WorkspaceOwnerCreateWithoutWorkspaceInput[] | WorkspaceOwnerUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceOwnerCreateOrConnectWithoutWorkspaceInput | WorkspaceOwnerCreateOrConnectWithoutWorkspaceInput[]
    upsert?: WorkspaceOwnerUpsertWithWhereUniqueWithoutWorkspaceInput | WorkspaceOwnerUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: WorkspaceOwnerCreateManyWorkspaceInputEnvelope
    set?: WorkspaceOwnerWhereUniqueInput | WorkspaceOwnerWhereUniqueInput[]
    disconnect?: WorkspaceOwnerWhereUniqueInput | WorkspaceOwnerWhereUniqueInput[]
    delete?: WorkspaceOwnerWhereUniqueInput | WorkspaceOwnerWhereUniqueInput[]
    connect?: WorkspaceOwnerWhereUniqueInput | WorkspaceOwnerWhereUniqueInput[]
    update?: WorkspaceOwnerUpdateWithWhereUniqueWithoutWorkspaceInput | WorkspaceOwnerUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: WorkspaceOwnerUpdateManyWithWhereWithoutWorkspaceInput | WorkspaceOwnerUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: WorkspaceOwnerScalarWhereInput | WorkspaceOwnerScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<ProjectCreateWithoutWorkspaceInput, ProjectUncheckedCreateWithoutWorkspaceInput> | ProjectCreateWithoutWorkspaceInput[] | ProjectUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutWorkspaceInput | ProjectCreateOrConnectWithoutWorkspaceInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutWorkspaceInput | ProjectUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: ProjectCreateManyWorkspaceInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutWorkspaceInput | ProjectUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutWorkspaceInput | ProjectUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type WorkspaceCreateNestedOneWithoutWorkspaceMembersInput = {
    create?: XOR<WorkspaceCreateWithoutWorkspaceMembersInput, WorkspaceUncheckedCreateWithoutWorkspaceMembersInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutWorkspaceMembersInput
    connect?: WorkspaceWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutWorkspaceMembersInput = {
    create?: XOR<UserCreateWithoutWorkspaceMembersInput, UserUncheckedCreateWithoutWorkspaceMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkspaceMembersInput
    connect?: UserWhereUniqueInput
  }

  export type ProfileCreateNestedOneWithoutWorkspaceMembersInput = {
    create?: XOR<ProfileCreateWithoutWorkspaceMembersInput, ProfileUncheckedCreateWithoutWorkspaceMembersInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutWorkspaceMembersInput
    connect?: ProfileWhereUniqueInput
  }

  export type WorkspaceMemberCreateNestedOneWithoutInvitedMembersInput = {
    create?: XOR<WorkspaceMemberCreateWithoutInvitedMembersInput, WorkspaceMemberUncheckedCreateWithoutInvitedMembersInput>
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutInvitedMembersInput
    connect?: WorkspaceMemberWhereUniqueInput
  }

  export type WorkspaceOwnerCreateNestedManyWithoutWorkspaceMemberInput = {
    create?: XOR<WorkspaceOwnerCreateWithoutWorkspaceMemberInput, WorkspaceOwnerUncheckedCreateWithoutWorkspaceMemberInput> | WorkspaceOwnerCreateWithoutWorkspaceMemberInput[] | WorkspaceOwnerUncheckedCreateWithoutWorkspaceMemberInput[]
    connectOrCreate?: WorkspaceOwnerCreateOrConnectWithoutWorkspaceMemberInput | WorkspaceOwnerCreateOrConnectWithoutWorkspaceMemberInput[]
    createMany?: WorkspaceOwnerCreateManyWorkspaceMemberInputEnvelope
    connect?: WorkspaceOwnerWhereUniqueInput | WorkspaceOwnerWhereUniqueInput[]
  }

  export type CompanyCreateNestedManyWithoutCreatedByMemberInput = {
    create?: XOR<CompanyCreateWithoutCreatedByMemberInput, CompanyUncheckedCreateWithoutCreatedByMemberInput> | CompanyCreateWithoutCreatedByMemberInput[] | CompanyUncheckedCreateWithoutCreatedByMemberInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutCreatedByMemberInput | CompanyCreateOrConnectWithoutCreatedByMemberInput[]
    createMany?: CompanyCreateManyCreatedByMemberInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type WorkspaceMemberCreateNestedManyWithoutInviterInput = {
    create?: XOR<WorkspaceMemberCreateWithoutInviterInput, WorkspaceMemberUncheckedCreateWithoutInviterInput> | WorkspaceMemberCreateWithoutInviterInput[] | WorkspaceMemberUncheckedCreateWithoutInviterInput[]
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutInviterInput | WorkspaceMemberCreateOrConnectWithoutInviterInput[]
    createMany?: WorkspaceMemberCreateManyInviterInputEnvelope
    connect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
  }

  export type WorkspaceOwnerUncheckedCreateNestedManyWithoutWorkspaceMemberInput = {
    create?: XOR<WorkspaceOwnerCreateWithoutWorkspaceMemberInput, WorkspaceOwnerUncheckedCreateWithoutWorkspaceMemberInput> | WorkspaceOwnerCreateWithoutWorkspaceMemberInput[] | WorkspaceOwnerUncheckedCreateWithoutWorkspaceMemberInput[]
    connectOrCreate?: WorkspaceOwnerCreateOrConnectWithoutWorkspaceMemberInput | WorkspaceOwnerCreateOrConnectWithoutWorkspaceMemberInput[]
    createMany?: WorkspaceOwnerCreateManyWorkspaceMemberInputEnvelope
    connect?: WorkspaceOwnerWhereUniqueInput | WorkspaceOwnerWhereUniqueInput[]
  }

  export type CompanyUncheckedCreateNestedManyWithoutCreatedByMemberInput = {
    create?: XOR<CompanyCreateWithoutCreatedByMemberInput, CompanyUncheckedCreateWithoutCreatedByMemberInput> | CompanyCreateWithoutCreatedByMemberInput[] | CompanyUncheckedCreateWithoutCreatedByMemberInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutCreatedByMemberInput | CompanyCreateOrConnectWithoutCreatedByMemberInput[]
    createMany?: CompanyCreateManyCreatedByMemberInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type WorkspaceMemberUncheckedCreateNestedManyWithoutInviterInput = {
    create?: XOR<WorkspaceMemberCreateWithoutInviterInput, WorkspaceMemberUncheckedCreateWithoutInviterInput> | WorkspaceMemberCreateWithoutInviterInput[] | WorkspaceMemberUncheckedCreateWithoutInviterInput[]
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutInviterInput | WorkspaceMemberCreateOrConnectWithoutInviterInput[]
    createMany?: WorkspaceMemberCreateManyInviterInputEnvelope
    connect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
  }

  export type WorkspaceUpdateOneRequiredWithoutWorkspaceMembersNestedInput = {
    create?: XOR<WorkspaceCreateWithoutWorkspaceMembersInput, WorkspaceUncheckedCreateWithoutWorkspaceMembersInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutWorkspaceMembersInput
    upsert?: WorkspaceUpsertWithoutWorkspaceMembersInput
    connect?: WorkspaceWhereUniqueInput
    update?: XOR<XOR<WorkspaceUpdateToOneWithWhereWithoutWorkspaceMembersInput, WorkspaceUpdateWithoutWorkspaceMembersInput>, WorkspaceUncheckedUpdateWithoutWorkspaceMembersInput>
  }

  export type UserUpdateOneRequiredWithoutWorkspaceMembersNestedInput = {
    create?: XOR<UserCreateWithoutWorkspaceMembersInput, UserUncheckedCreateWithoutWorkspaceMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkspaceMembersInput
    upsert?: UserUpsertWithoutWorkspaceMembersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkspaceMembersInput, UserUpdateWithoutWorkspaceMembersInput>, UserUncheckedUpdateWithoutWorkspaceMembersInput>
  }

  export type ProfileUpdateOneRequiredWithoutWorkspaceMembersNestedInput = {
    create?: XOR<ProfileCreateWithoutWorkspaceMembersInput, ProfileUncheckedCreateWithoutWorkspaceMembersInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutWorkspaceMembersInput
    upsert?: ProfileUpsertWithoutWorkspaceMembersInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutWorkspaceMembersInput, ProfileUpdateWithoutWorkspaceMembersInput>, ProfileUncheckedUpdateWithoutWorkspaceMembersInput>
  }

  export type WorkspaceMemberUpdateOneWithoutInvitedMembersNestedInput = {
    create?: XOR<WorkspaceMemberCreateWithoutInvitedMembersInput, WorkspaceMemberUncheckedCreateWithoutInvitedMembersInput>
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutInvitedMembersInput
    upsert?: WorkspaceMemberUpsertWithoutInvitedMembersInput
    disconnect?: WorkspaceMemberWhereInput | boolean
    delete?: WorkspaceMemberWhereInput | boolean
    connect?: WorkspaceMemberWhereUniqueInput
    update?: XOR<XOR<WorkspaceMemberUpdateToOneWithWhereWithoutInvitedMembersInput, WorkspaceMemberUpdateWithoutInvitedMembersInput>, WorkspaceMemberUncheckedUpdateWithoutInvitedMembersInput>
  }

  export type WorkspaceOwnerUpdateManyWithoutWorkspaceMemberNestedInput = {
    create?: XOR<WorkspaceOwnerCreateWithoutWorkspaceMemberInput, WorkspaceOwnerUncheckedCreateWithoutWorkspaceMemberInput> | WorkspaceOwnerCreateWithoutWorkspaceMemberInput[] | WorkspaceOwnerUncheckedCreateWithoutWorkspaceMemberInput[]
    connectOrCreate?: WorkspaceOwnerCreateOrConnectWithoutWorkspaceMemberInput | WorkspaceOwnerCreateOrConnectWithoutWorkspaceMemberInput[]
    upsert?: WorkspaceOwnerUpsertWithWhereUniqueWithoutWorkspaceMemberInput | WorkspaceOwnerUpsertWithWhereUniqueWithoutWorkspaceMemberInput[]
    createMany?: WorkspaceOwnerCreateManyWorkspaceMemberInputEnvelope
    set?: WorkspaceOwnerWhereUniqueInput | WorkspaceOwnerWhereUniqueInput[]
    disconnect?: WorkspaceOwnerWhereUniqueInput | WorkspaceOwnerWhereUniqueInput[]
    delete?: WorkspaceOwnerWhereUniqueInput | WorkspaceOwnerWhereUniqueInput[]
    connect?: WorkspaceOwnerWhereUniqueInput | WorkspaceOwnerWhereUniqueInput[]
    update?: WorkspaceOwnerUpdateWithWhereUniqueWithoutWorkspaceMemberInput | WorkspaceOwnerUpdateWithWhereUniqueWithoutWorkspaceMemberInput[]
    updateMany?: WorkspaceOwnerUpdateManyWithWhereWithoutWorkspaceMemberInput | WorkspaceOwnerUpdateManyWithWhereWithoutWorkspaceMemberInput[]
    deleteMany?: WorkspaceOwnerScalarWhereInput | WorkspaceOwnerScalarWhereInput[]
  }

  export type CompanyUpdateManyWithoutCreatedByMemberNestedInput = {
    create?: XOR<CompanyCreateWithoutCreatedByMemberInput, CompanyUncheckedCreateWithoutCreatedByMemberInput> | CompanyCreateWithoutCreatedByMemberInput[] | CompanyUncheckedCreateWithoutCreatedByMemberInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutCreatedByMemberInput | CompanyCreateOrConnectWithoutCreatedByMemberInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutCreatedByMemberInput | CompanyUpsertWithWhereUniqueWithoutCreatedByMemberInput[]
    createMany?: CompanyCreateManyCreatedByMemberInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutCreatedByMemberInput | CompanyUpdateWithWhereUniqueWithoutCreatedByMemberInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutCreatedByMemberInput | CompanyUpdateManyWithWhereWithoutCreatedByMemberInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type WorkspaceMemberUpdateManyWithoutInviterNestedInput = {
    create?: XOR<WorkspaceMemberCreateWithoutInviterInput, WorkspaceMemberUncheckedCreateWithoutInviterInput> | WorkspaceMemberCreateWithoutInviterInput[] | WorkspaceMemberUncheckedCreateWithoutInviterInput[]
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutInviterInput | WorkspaceMemberCreateOrConnectWithoutInviterInput[]
    upsert?: WorkspaceMemberUpsertWithWhereUniqueWithoutInviterInput | WorkspaceMemberUpsertWithWhereUniqueWithoutInviterInput[]
    createMany?: WorkspaceMemberCreateManyInviterInputEnvelope
    set?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    disconnect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    delete?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    connect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    update?: WorkspaceMemberUpdateWithWhereUniqueWithoutInviterInput | WorkspaceMemberUpdateWithWhereUniqueWithoutInviterInput[]
    updateMany?: WorkspaceMemberUpdateManyWithWhereWithoutInviterInput | WorkspaceMemberUpdateManyWithWhereWithoutInviterInput[]
    deleteMany?: WorkspaceMemberScalarWhereInput | WorkspaceMemberScalarWhereInput[]
  }

  export type WorkspaceOwnerUncheckedUpdateManyWithoutWorkspaceMemberNestedInput = {
    create?: XOR<WorkspaceOwnerCreateWithoutWorkspaceMemberInput, WorkspaceOwnerUncheckedCreateWithoutWorkspaceMemberInput> | WorkspaceOwnerCreateWithoutWorkspaceMemberInput[] | WorkspaceOwnerUncheckedCreateWithoutWorkspaceMemberInput[]
    connectOrCreate?: WorkspaceOwnerCreateOrConnectWithoutWorkspaceMemberInput | WorkspaceOwnerCreateOrConnectWithoutWorkspaceMemberInput[]
    upsert?: WorkspaceOwnerUpsertWithWhereUniqueWithoutWorkspaceMemberInput | WorkspaceOwnerUpsertWithWhereUniqueWithoutWorkspaceMemberInput[]
    createMany?: WorkspaceOwnerCreateManyWorkspaceMemberInputEnvelope
    set?: WorkspaceOwnerWhereUniqueInput | WorkspaceOwnerWhereUniqueInput[]
    disconnect?: WorkspaceOwnerWhereUniqueInput | WorkspaceOwnerWhereUniqueInput[]
    delete?: WorkspaceOwnerWhereUniqueInput | WorkspaceOwnerWhereUniqueInput[]
    connect?: WorkspaceOwnerWhereUniqueInput | WorkspaceOwnerWhereUniqueInput[]
    update?: WorkspaceOwnerUpdateWithWhereUniqueWithoutWorkspaceMemberInput | WorkspaceOwnerUpdateWithWhereUniqueWithoutWorkspaceMemberInput[]
    updateMany?: WorkspaceOwnerUpdateManyWithWhereWithoutWorkspaceMemberInput | WorkspaceOwnerUpdateManyWithWhereWithoutWorkspaceMemberInput[]
    deleteMany?: WorkspaceOwnerScalarWhereInput | WorkspaceOwnerScalarWhereInput[]
  }

  export type CompanyUncheckedUpdateManyWithoutCreatedByMemberNestedInput = {
    create?: XOR<CompanyCreateWithoutCreatedByMemberInput, CompanyUncheckedCreateWithoutCreatedByMemberInput> | CompanyCreateWithoutCreatedByMemberInput[] | CompanyUncheckedCreateWithoutCreatedByMemberInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutCreatedByMemberInput | CompanyCreateOrConnectWithoutCreatedByMemberInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutCreatedByMemberInput | CompanyUpsertWithWhereUniqueWithoutCreatedByMemberInput[]
    createMany?: CompanyCreateManyCreatedByMemberInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutCreatedByMemberInput | CompanyUpdateWithWhereUniqueWithoutCreatedByMemberInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutCreatedByMemberInput | CompanyUpdateManyWithWhereWithoutCreatedByMemberInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type WorkspaceMemberUncheckedUpdateManyWithoutInviterNestedInput = {
    create?: XOR<WorkspaceMemberCreateWithoutInviterInput, WorkspaceMemberUncheckedCreateWithoutInviterInput> | WorkspaceMemberCreateWithoutInviterInput[] | WorkspaceMemberUncheckedCreateWithoutInviterInput[]
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutInviterInput | WorkspaceMemberCreateOrConnectWithoutInviterInput[]
    upsert?: WorkspaceMemberUpsertWithWhereUniqueWithoutInviterInput | WorkspaceMemberUpsertWithWhereUniqueWithoutInviterInput[]
    createMany?: WorkspaceMemberCreateManyInviterInputEnvelope
    set?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    disconnect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    delete?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    connect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    update?: WorkspaceMemberUpdateWithWhereUniqueWithoutInviterInput | WorkspaceMemberUpdateWithWhereUniqueWithoutInviterInput[]
    updateMany?: WorkspaceMemberUpdateManyWithWhereWithoutInviterInput | WorkspaceMemberUpdateManyWithWhereWithoutInviterInput[]
    deleteMany?: WorkspaceMemberScalarWhereInput | WorkspaceMemberScalarWhereInput[]
  }

  export type WorkspaceCreateNestedOneWithoutWorkspaceOwnersInput = {
    create?: XOR<WorkspaceCreateWithoutWorkspaceOwnersInput, WorkspaceUncheckedCreateWithoutWorkspaceOwnersInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutWorkspaceOwnersInput
    connect?: WorkspaceWhereUniqueInput
  }

  export type WorkspaceMemberCreateNestedOneWithoutOwnersInput = {
    create?: XOR<WorkspaceMemberCreateWithoutOwnersInput, WorkspaceMemberUncheckedCreateWithoutOwnersInput>
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutOwnersInput
    connect?: WorkspaceMemberWhereUniqueInput
  }

  export type WorkspaceUpdateOneRequiredWithoutWorkspaceOwnersNestedInput = {
    create?: XOR<WorkspaceCreateWithoutWorkspaceOwnersInput, WorkspaceUncheckedCreateWithoutWorkspaceOwnersInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutWorkspaceOwnersInput
    upsert?: WorkspaceUpsertWithoutWorkspaceOwnersInput
    connect?: WorkspaceWhereUniqueInput
    update?: XOR<XOR<WorkspaceUpdateToOneWithWhereWithoutWorkspaceOwnersInput, WorkspaceUpdateWithoutWorkspaceOwnersInput>, WorkspaceUncheckedUpdateWithoutWorkspaceOwnersInput>
  }

  export type WorkspaceMemberUpdateOneRequiredWithoutOwnersNestedInput = {
    create?: XOR<WorkspaceMemberCreateWithoutOwnersInput, WorkspaceMemberUncheckedCreateWithoutOwnersInput>
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutOwnersInput
    upsert?: WorkspaceMemberUpsertWithoutOwnersInput
    connect?: WorkspaceMemberWhereUniqueInput
    update?: XOR<XOR<WorkspaceMemberUpdateToOneWithWhereWithoutOwnersInput, WorkspaceMemberUpdateWithoutOwnersInput>, WorkspaceMemberUncheckedUpdateWithoutOwnersInput>
  }

  export type WorkspaceCreateNestedOneWithoutCompaniesInput = {
    create?: XOR<WorkspaceCreateWithoutCompaniesInput, WorkspaceUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutCompaniesInput
    connect?: WorkspaceWhereUniqueInput
  }

  export type CompanyIndustryCodeCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CompanyIndustryCodeCreateWithoutCompanyInput, CompanyIndustryCodeUncheckedCreateWithoutCompanyInput> | CompanyIndustryCodeCreateWithoutCompanyInput[] | CompanyIndustryCodeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyIndustryCodeCreateOrConnectWithoutCompanyInput | CompanyIndustryCodeCreateOrConnectWithoutCompanyInput[]
    createMany?: CompanyIndustryCodeCreateManyCompanyInputEnvelope
    connect?: CompanyIndustryCodeWhereUniqueInput | CompanyIndustryCodeWhereUniqueInput[]
  }

  export type DayLaborerCreateNestedManyWithoutCompanyInput = {
    create?: XOR<DayLaborerCreateWithoutCompanyInput, DayLaborerUncheckedCreateWithoutCompanyInput> | DayLaborerCreateWithoutCompanyInput[] | DayLaborerUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: DayLaborerCreateOrConnectWithoutCompanyInput | DayLaborerCreateOrConnectWithoutCompanyInput[]
    createMany?: DayLaborerCreateManyCompanyInputEnvelope
    connect?: DayLaborerWhereUniqueInput | DayLaborerWhereUniqueInput[]
  }

  export type EmployeeCreateNestedManyWithoutCompanyInput = {
    create?: XOR<EmployeeCreateWithoutCompanyInput, EmployeeUncheckedCreateWithoutCompanyInput> | EmployeeCreateWithoutCompanyInput[] | EmployeeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutCompanyInput | EmployeeCreateOrConnectWithoutCompanyInput[]
    createMany?: EmployeeCreateManyCompanyInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type OwnerCreateNestedManyWithoutCompanyInput = {
    create?: XOR<OwnerCreateWithoutCompanyInput, OwnerUncheckedCreateWithoutCompanyInput> | OwnerCreateWithoutCompanyInput[] | OwnerUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: OwnerCreateOrConnectWithoutCompanyInput | OwnerCreateOrConnectWithoutCompanyInput[]
    createMany?: OwnerCreateManyCompanyInputEnvelope
    connect?: OwnerWhereUniqueInput | OwnerWhereUniqueInput[]
  }

  export type SiteCreateNestedManyWithoutCompanyInput = {
    create?: XOR<SiteCreateWithoutCompanyInput, SiteUncheckedCreateWithoutCompanyInput> | SiteCreateWithoutCompanyInput[] | SiteUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: SiteCreateOrConnectWithoutCompanyInput | SiteCreateOrConnectWithoutCompanyInput[]
    createMany?: SiteCreateManyCompanyInputEnvelope
    connect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
  }

  export type WorkspaceMemberCreateNestedOneWithoutCompaniesCreatedInput = {
    create?: XOR<WorkspaceMemberCreateWithoutCompaniesCreatedInput, WorkspaceMemberUncheckedCreateWithoutCompaniesCreatedInput>
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutCompaniesCreatedInput
    connect?: WorkspaceMemberWhereUniqueInput
  }

  export type CompanyIndustryCodeUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CompanyIndustryCodeCreateWithoutCompanyInput, CompanyIndustryCodeUncheckedCreateWithoutCompanyInput> | CompanyIndustryCodeCreateWithoutCompanyInput[] | CompanyIndustryCodeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyIndustryCodeCreateOrConnectWithoutCompanyInput | CompanyIndustryCodeCreateOrConnectWithoutCompanyInput[]
    createMany?: CompanyIndustryCodeCreateManyCompanyInputEnvelope
    connect?: CompanyIndustryCodeWhereUniqueInput | CompanyIndustryCodeWhereUniqueInput[]
  }

  export type DayLaborerUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<DayLaborerCreateWithoutCompanyInput, DayLaborerUncheckedCreateWithoutCompanyInput> | DayLaborerCreateWithoutCompanyInput[] | DayLaborerUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: DayLaborerCreateOrConnectWithoutCompanyInput | DayLaborerCreateOrConnectWithoutCompanyInput[]
    createMany?: DayLaborerCreateManyCompanyInputEnvelope
    connect?: DayLaborerWhereUniqueInput | DayLaborerWhereUniqueInput[]
  }

  export type EmployeeUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<EmployeeCreateWithoutCompanyInput, EmployeeUncheckedCreateWithoutCompanyInput> | EmployeeCreateWithoutCompanyInput[] | EmployeeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutCompanyInput | EmployeeCreateOrConnectWithoutCompanyInput[]
    createMany?: EmployeeCreateManyCompanyInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type OwnerUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<OwnerCreateWithoutCompanyInput, OwnerUncheckedCreateWithoutCompanyInput> | OwnerCreateWithoutCompanyInput[] | OwnerUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: OwnerCreateOrConnectWithoutCompanyInput | OwnerCreateOrConnectWithoutCompanyInput[]
    createMany?: OwnerCreateManyCompanyInputEnvelope
    connect?: OwnerWhereUniqueInput | OwnerWhereUniqueInput[]
  }

  export type SiteUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<SiteCreateWithoutCompanyInput, SiteUncheckedCreateWithoutCompanyInput> | SiteCreateWithoutCompanyInput[] | SiteUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: SiteCreateOrConnectWithoutCompanyInput | SiteCreateOrConnectWithoutCompanyInput[]
    createMany?: SiteCreateManyCompanyInputEnvelope
    connect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
  }

  export type WorkspaceUpdateOneRequiredWithoutCompaniesNestedInput = {
    create?: XOR<WorkspaceCreateWithoutCompaniesInput, WorkspaceUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutCompaniesInput
    upsert?: WorkspaceUpsertWithoutCompaniesInput
    connect?: WorkspaceWhereUniqueInput
    update?: XOR<XOR<WorkspaceUpdateToOneWithWhereWithoutCompaniesInput, WorkspaceUpdateWithoutCompaniesInput>, WorkspaceUncheckedUpdateWithoutCompaniesInput>
  }

  export type CompanyIndustryCodeUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CompanyIndustryCodeCreateWithoutCompanyInput, CompanyIndustryCodeUncheckedCreateWithoutCompanyInput> | CompanyIndustryCodeCreateWithoutCompanyInput[] | CompanyIndustryCodeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyIndustryCodeCreateOrConnectWithoutCompanyInput | CompanyIndustryCodeCreateOrConnectWithoutCompanyInput[]
    upsert?: CompanyIndustryCodeUpsertWithWhereUniqueWithoutCompanyInput | CompanyIndustryCodeUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CompanyIndustryCodeCreateManyCompanyInputEnvelope
    set?: CompanyIndustryCodeWhereUniqueInput | CompanyIndustryCodeWhereUniqueInput[]
    disconnect?: CompanyIndustryCodeWhereUniqueInput | CompanyIndustryCodeWhereUniqueInput[]
    delete?: CompanyIndustryCodeWhereUniqueInput | CompanyIndustryCodeWhereUniqueInput[]
    connect?: CompanyIndustryCodeWhereUniqueInput | CompanyIndustryCodeWhereUniqueInput[]
    update?: CompanyIndustryCodeUpdateWithWhereUniqueWithoutCompanyInput | CompanyIndustryCodeUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CompanyIndustryCodeUpdateManyWithWhereWithoutCompanyInput | CompanyIndustryCodeUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CompanyIndustryCodeScalarWhereInput | CompanyIndustryCodeScalarWhereInput[]
  }

  export type DayLaborerUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<DayLaborerCreateWithoutCompanyInput, DayLaborerUncheckedCreateWithoutCompanyInput> | DayLaborerCreateWithoutCompanyInput[] | DayLaborerUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: DayLaborerCreateOrConnectWithoutCompanyInput | DayLaborerCreateOrConnectWithoutCompanyInput[]
    upsert?: DayLaborerUpsertWithWhereUniqueWithoutCompanyInput | DayLaborerUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: DayLaborerCreateManyCompanyInputEnvelope
    set?: DayLaborerWhereUniqueInput | DayLaborerWhereUniqueInput[]
    disconnect?: DayLaborerWhereUniqueInput | DayLaborerWhereUniqueInput[]
    delete?: DayLaborerWhereUniqueInput | DayLaborerWhereUniqueInput[]
    connect?: DayLaborerWhereUniqueInput | DayLaborerWhereUniqueInput[]
    update?: DayLaborerUpdateWithWhereUniqueWithoutCompanyInput | DayLaborerUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: DayLaborerUpdateManyWithWhereWithoutCompanyInput | DayLaborerUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: DayLaborerScalarWhereInput | DayLaborerScalarWhereInput[]
  }

  export type EmployeeUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<EmployeeCreateWithoutCompanyInput, EmployeeUncheckedCreateWithoutCompanyInput> | EmployeeCreateWithoutCompanyInput[] | EmployeeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutCompanyInput | EmployeeCreateOrConnectWithoutCompanyInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutCompanyInput | EmployeeUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: EmployeeCreateManyCompanyInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutCompanyInput | EmployeeUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutCompanyInput | EmployeeUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type OwnerUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<OwnerCreateWithoutCompanyInput, OwnerUncheckedCreateWithoutCompanyInput> | OwnerCreateWithoutCompanyInput[] | OwnerUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: OwnerCreateOrConnectWithoutCompanyInput | OwnerCreateOrConnectWithoutCompanyInput[]
    upsert?: OwnerUpsertWithWhereUniqueWithoutCompanyInput | OwnerUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: OwnerCreateManyCompanyInputEnvelope
    set?: OwnerWhereUniqueInput | OwnerWhereUniqueInput[]
    disconnect?: OwnerWhereUniqueInput | OwnerWhereUniqueInput[]
    delete?: OwnerWhereUniqueInput | OwnerWhereUniqueInput[]
    connect?: OwnerWhereUniqueInput | OwnerWhereUniqueInput[]
    update?: OwnerUpdateWithWhereUniqueWithoutCompanyInput | OwnerUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: OwnerUpdateManyWithWhereWithoutCompanyInput | OwnerUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: OwnerScalarWhereInput | OwnerScalarWhereInput[]
  }

  export type SiteUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<SiteCreateWithoutCompanyInput, SiteUncheckedCreateWithoutCompanyInput> | SiteCreateWithoutCompanyInput[] | SiteUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: SiteCreateOrConnectWithoutCompanyInput | SiteCreateOrConnectWithoutCompanyInput[]
    upsert?: SiteUpsertWithWhereUniqueWithoutCompanyInput | SiteUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: SiteCreateManyCompanyInputEnvelope
    set?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    disconnect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    delete?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    connect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    update?: SiteUpdateWithWhereUniqueWithoutCompanyInput | SiteUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: SiteUpdateManyWithWhereWithoutCompanyInput | SiteUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: SiteScalarWhereInput | SiteScalarWhereInput[]
  }

  export type WorkspaceMemberUpdateOneRequiredWithoutCompaniesCreatedNestedInput = {
    create?: XOR<WorkspaceMemberCreateWithoutCompaniesCreatedInput, WorkspaceMemberUncheckedCreateWithoutCompaniesCreatedInput>
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutCompaniesCreatedInput
    upsert?: WorkspaceMemberUpsertWithoutCompaniesCreatedInput
    connect?: WorkspaceMemberWhereUniqueInput
    update?: XOR<XOR<WorkspaceMemberUpdateToOneWithWhereWithoutCompaniesCreatedInput, WorkspaceMemberUpdateWithoutCompaniesCreatedInput>, WorkspaceMemberUncheckedUpdateWithoutCompaniesCreatedInput>
  }

  export type CompanyIndustryCodeUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CompanyIndustryCodeCreateWithoutCompanyInput, CompanyIndustryCodeUncheckedCreateWithoutCompanyInput> | CompanyIndustryCodeCreateWithoutCompanyInput[] | CompanyIndustryCodeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyIndustryCodeCreateOrConnectWithoutCompanyInput | CompanyIndustryCodeCreateOrConnectWithoutCompanyInput[]
    upsert?: CompanyIndustryCodeUpsertWithWhereUniqueWithoutCompanyInput | CompanyIndustryCodeUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CompanyIndustryCodeCreateManyCompanyInputEnvelope
    set?: CompanyIndustryCodeWhereUniqueInput | CompanyIndustryCodeWhereUniqueInput[]
    disconnect?: CompanyIndustryCodeWhereUniqueInput | CompanyIndustryCodeWhereUniqueInput[]
    delete?: CompanyIndustryCodeWhereUniqueInput | CompanyIndustryCodeWhereUniqueInput[]
    connect?: CompanyIndustryCodeWhereUniqueInput | CompanyIndustryCodeWhereUniqueInput[]
    update?: CompanyIndustryCodeUpdateWithWhereUniqueWithoutCompanyInput | CompanyIndustryCodeUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CompanyIndustryCodeUpdateManyWithWhereWithoutCompanyInput | CompanyIndustryCodeUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CompanyIndustryCodeScalarWhereInput | CompanyIndustryCodeScalarWhereInput[]
  }

  export type DayLaborerUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<DayLaborerCreateWithoutCompanyInput, DayLaborerUncheckedCreateWithoutCompanyInput> | DayLaborerCreateWithoutCompanyInput[] | DayLaborerUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: DayLaborerCreateOrConnectWithoutCompanyInput | DayLaborerCreateOrConnectWithoutCompanyInput[]
    upsert?: DayLaborerUpsertWithWhereUniqueWithoutCompanyInput | DayLaborerUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: DayLaborerCreateManyCompanyInputEnvelope
    set?: DayLaborerWhereUniqueInput | DayLaborerWhereUniqueInput[]
    disconnect?: DayLaborerWhereUniqueInput | DayLaborerWhereUniqueInput[]
    delete?: DayLaborerWhereUniqueInput | DayLaborerWhereUniqueInput[]
    connect?: DayLaborerWhereUniqueInput | DayLaborerWhereUniqueInput[]
    update?: DayLaborerUpdateWithWhereUniqueWithoutCompanyInput | DayLaborerUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: DayLaborerUpdateManyWithWhereWithoutCompanyInput | DayLaborerUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: DayLaborerScalarWhereInput | DayLaborerScalarWhereInput[]
  }

  export type EmployeeUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<EmployeeCreateWithoutCompanyInput, EmployeeUncheckedCreateWithoutCompanyInput> | EmployeeCreateWithoutCompanyInput[] | EmployeeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutCompanyInput | EmployeeCreateOrConnectWithoutCompanyInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutCompanyInput | EmployeeUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: EmployeeCreateManyCompanyInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutCompanyInput | EmployeeUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutCompanyInput | EmployeeUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type OwnerUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<OwnerCreateWithoutCompanyInput, OwnerUncheckedCreateWithoutCompanyInput> | OwnerCreateWithoutCompanyInput[] | OwnerUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: OwnerCreateOrConnectWithoutCompanyInput | OwnerCreateOrConnectWithoutCompanyInput[]
    upsert?: OwnerUpsertWithWhereUniqueWithoutCompanyInput | OwnerUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: OwnerCreateManyCompanyInputEnvelope
    set?: OwnerWhereUniqueInput | OwnerWhereUniqueInput[]
    disconnect?: OwnerWhereUniqueInput | OwnerWhereUniqueInput[]
    delete?: OwnerWhereUniqueInput | OwnerWhereUniqueInput[]
    connect?: OwnerWhereUniqueInput | OwnerWhereUniqueInput[]
    update?: OwnerUpdateWithWhereUniqueWithoutCompanyInput | OwnerUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: OwnerUpdateManyWithWhereWithoutCompanyInput | OwnerUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: OwnerScalarWhereInput | OwnerScalarWhereInput[]
  }

  export type SiteUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<SiteCreateWithoutCompanyInput, SiteUncheckedCreateWithoutCompanyInput> | SiteCreateWithoutCompanyInput[] | SiteUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: SiteCreateOrConnectWithoutCompanyInput | SiteCreateOrConnectWithoutCompanyInput[]
    upsert?: SiteUpsertWithWhereUniqueWithoutCompanyInput | SiteUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: SiteCreateManyCompanyInputEnvelope
    set?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    disconnect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    delete?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    connect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    update?: SiteUpdateWithWhereUniqueWithoutCompanyInput | SiteUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: SiteUpdateManyWithWhereWithoutCompanyInput | SiteUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: SiteScalarWhereInput | SiteScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutEmployeesInput = {
    create?: XOR<CompanyCreateWithoutEmployeesInput, CompanyUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutEmployeesInput
    connect?: CompanyWhereUniqueInput
  }

  export type TalentPoolCreateNestedOneWithoutEmployeesInput = {
    create?: XOR<TalentPoolCreateWithoutEmployeesInput, TalentPoolUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: TalentPoolCreateOrConnectWithoutEmployeesInput
    connect?: TalentPoolWhereUniqueInput
  }

  export type OwnerCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<OwnerCreateWithoutEmployeeInput, OwnerUncheckedCreateWithoutEmployeeInput> | OwnerCreateWithoutEmployeeInput[] | OwnerUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: OwnerCreateOrConnectWithoutEmployeeInput | OwnerCreateOrConnectWithoutEmployeeInput[]
    createMany?: OwnerCreateManyEmployeeInputEnvelope
    connect?: OwnerWhereUniqueInput | OwnerWhereUniqueInput[]
  }

  export type OwnerUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<OwnerCreateWithoutEmployeeInput, OwnerUncheckedCreateWithoutEmployeeInput> | OwnerCreateWithoutEmployeeInput[] | OwnerUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: OwnerCreateOrConnectWithoutEmployeeInput | OwnerCreateOrConnectWithoutEmployeeInput[]
    createMany?: OwnerCreateManyEmployeeInputEnvelope
    connect?: OwnerWhereUniqueInput | OwnerWhereUniqueInput[]
  }

  export type CompanyUpdateOneRequiredWithoutEmployeesNestedInput = {
    create?: XOR<CompanyCreateWithoutEmployeesInput, CompanyUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutEmployeesInput
    upsert?: CompanyUpsertWithoutEmployeesInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutEmployeesInput, CompanyUpdateWithoutEmployeesInput>, CompanyUncheckedUpdateWithoutEmployeesInput>
  }

  export type TalentPoolUpdateOneRequiredWithoutEmployeesNestedInput = {
    create?: XOR<TalentPoolCreateWithoutEmployeesInput, TalentPoolUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: TalentPoolCreateOrConnectWithoutEmployeesInput
    upsert?: TalentPoolUpsertWithoutEmployeesInput
    connect?: TalentPoolWhereUniqueInput
    update?: XOR<XOR<TalentPoolUpdateToOneWithWhereWithoutEmployeesInput, TalentPoolUpdateWithoutEmployeesInput>, TalentPoolUncheckedUpdateWithoutEmployeesInput>
  }

  export type OwnerUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<OwnerCreateWithoutEmployeeInput, OwnerUncheckedCreateWithoutEmployeeInput> | OwnerCreateWithoutEmployeeInput[] | OwnerUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: OwnerCreateOrConnectWithoutEmployeeInput | OwnerCreateOrConnectWithoutEmployeeInput[]
    upsert?: OwnerUpsertWithWhereUniqueWithoutEmployeeInput | OwnerUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: OwnerCreateManyEmployeeInputEnvelope
    set?: OwnerWhereUniqueInput | OwnerWhereUniqueInput[]
    disconnect?: OwnerWhereUniqueInput | OwnerWhereUniqueInput[]
    delete?: OwnerWhereUniqueInput | OwnerWhereUniqueInput[]
    connect?: OwnerWhereUniqueInput | OwnerWhereUniqueInput[]
    update?: OwnerUpdateWithWhereUniqueWithoutEmployeeInput | OwnerUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: OwnerUpdateManyWithWhereWithoutEmployeeInput | OwnerUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: OwnerScalarWhereInput | OwnerScalarWhereInput[]
  }

  export type OwnerUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<OwnerCreateWithoutEmployeeInput, OwnerUncheckedCreateWithoutEmployeeInput> | OwnerCreateWithoutEmployeeInput[] | OwnerUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: OwnerCreateOrConnectWithoutEmployeeInput | OwnerCreateOrConnectWithoutEmployeeInput[]
    upsert?: OwnerUpsertWithWhereUniqueWithoutEmployeeInput | OwnerUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: OwnerCreateManyEmployeeInputEnvelope
    set?: OwnerWhereUniqueInput | OwnerWhereUniqueInput[]
    disconnect?: OwnerWhereUniqueInput | OwnerWhereUniqueInput[]
    delete?: OwnerWhereUniqueInput | OwnerWhereUniqueInput[]
    connect?: OwnerWhereUniqueInput | OwnerWhereUniqueInput[]
    update?: OwnerUpdateWithWhereUniqueWithoutEmployeeInput | OwnerUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: OwnerUpdateManyWithWhereWithoutEmployeeInput | OwnerUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: OwnerScalarWhereInput | OwnerScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutDayLaborersInput = {
    create?: XOR<CompanyCreateWithoutDayLaborersInput, CompanyUncheckedCreateWithoutDayLaborersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutDayLaborersInput
    connect?: CompanyWhereUniqueInput
  }

  export type TalentPoolCreateNestedOneWithoutDayLaborersInput = {
    create?: XOR<TalentPoolCreateWithoutDayLaborersInput, TalentPoolUncheckedCreateWithoutDayLaborersInput>
    connectOrCreate?: TalentPoolCreateOrConnectWithoutDayLaborersInput
    connect?: TalentPoolWhereUniqueInput
  }

  export type CompanyUpdateOneRequiredWithoutDayLaborersNestedInput = {
    create?: XOR<CompanyCreateWithoutDayLaborersInput, CompanyUncheckedCreateWithoutDayLaborersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutDayLaborersInput
    upsert?: CompanyUpsertWithoutDayLaborersInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutDayLaborersInput, CompanyUpdateWithoutDayLaborersInput>, CompanyUncheckedUpdateWithoutDayLaborersInput>
  }

  export type TalentPoolUpdateOneRequiredWithoutDayLaborersNestedInput = {
    create?: XOR<TalentPoolCreateWithoutDayLaborersInput, TalentPoolUncheckedCreateWithoutDayLaborersInput>
    connectOrCreate?: TalentPoolCreateOrConnectWithoutDayLaborersInput
    upsert?: TalentPoolUpsertWithoutDayLaborersInput
    connect?: TalentPoolWhereUniqueInput
    update?: XOR<XOR<TalentPoolUpdateToOneWithWhereWithoutDayLaborersInput, TalentPoolUpdateWithoutDayLaborersInput>, TalentPoolUncheckedUpdateWithoutDayLaborersInput>
  }

  export type CompanyCreateNestedOneWithoutOwnersInput = {
    create?: XOR<CompanyCreateWithoutOwnersInput, CompanyUncheckedCreateWithoutOwnersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutOwnersInput
    connect?: CompanyWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutOwnersInput = {
    create?: XOR<EmployeeCreateWithoutOwnersInput, EmployeeUncheckedCreateWithoutOwnersInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutOwnersInput
    connect?: EmployeeWhereUniqueInput
  }

  export type CompanyUpdateOneRequiredWithoutOwnersNestedInput = {
    create?: XOR<CompanyCreateWithoutOwnersInput, CompanyUncheckedCreateWithoutOwnersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutOwnersInput
    upsert?: CompanyUpsertWithoutOwnersInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutOwnersInput, CompanyUpdateWithoutOwnersInput>, CompanyUncheckedUpdateWithoutOwnersInput>
  }

  export type EmployeeUpdateOneRequiredWithoutOwnersNestedInput = {
    create?: XOR<EmployeeCreateWithoutOwnersInput, EmployeeUncheckedCreateWithoutOwnersInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutOwnersInput
    upsert?: EmployeeUpsertWithoutOwnersInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutOwnersInput, EmployeeUpdateWithoutOwnersInput>, EmployeeUncheckedUpdateWithoutOwnersInput>
  }

  export type ProjectCreateNestedOneWithoutProjectOwnersInput = {
    create?: XOR<ProjectCreateWithoutProjectOwnersInput, ProjectUncheckedCreateWithoutProjectOwnersInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutProjectOwnersInput
    connect?: ProjectWhereUniqueInput
  }

  export type ProjectUpdateOneRequiredWithoutProjectOwnersNestedInput = {
    create?: XOR<ProjectCreateWithoutProjectOwnersInput, ProjectUncheckedCreateWithoutProjectOwnersInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutProjectOwnersInput
    upsert?: ProjectUpsertWithoutProjectOwnersInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutProjectOwnersInput, ProjectUpdateWithoutProjectOwnersInput>, ProjectUncheckedUpdateWithoutProjectOwnersInput>
  }

  export type WorkspaceCreateNestedOneWithoutProjectsInput = {
    create?: XOR<WorkspaceCreateWithoutProjectsInput, WorkspaceUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutProjectsInput
    connect?: WorkspaceWhereUniqueInput
  }

  export type ProjectOwnerCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectOwnerCreateWithoutProjectInput, ProjectOwnerUncheckedCreateWithoutProjectInput> | ProjectOwnerCreateWithoutProjectInput[] | ProjectOwnerUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectOwnerCreateOrConnectWithoutProjectInput | ProjectOwnerCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectOwnerCreateManyProjectInputEnvelope
    connect?: ProjectOwnerWhereUniqueInput | ProjectOwnerWhereUniqueInput[]
  }

  export type SiteCreateNestedManyWithoutProjectInput = {
    create?: XOR<SiteCreateWithoutProjectInput, SiteUncheckedCreateWithoutProjectInput> | SiteCreateWithoutProjectInput[] | SiteUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SiteCreateOrConnectWithoutProjectInput | SiteCreateOrConnectWithoutProjectInput[]
    createMany?: SiteCreateManyProjectInputEnvelope
    connect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
  }

  export type ProjectOwnerUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectOwnerCreateWithoutProjectInput, ProjectOwnerUncheckedCreateWithoutProjectInput> | ProjectOwnerCreateWithoutProjectInput[] | ProjectOwnerUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectOwnerCreateOrConnectWithoutProjectInput | ProjectOwnerCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectOwnerCreateManyProjectInputEnvelope
    connect?: ProjectOwnerWhereUniqueInput | ProjectOwnerWhereUniqueInput[]
  }

  export type SiteUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<SiteCreateWithoutProjectInput, SiteUncheckedCreateWithoutProjectInput> | SiteCreateWithoutProjectInput[] | SiteUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SiteCreateOrConnectWithoutProjectInput | SiteCreateOrConnectWithoutProjectInput[]
    createMany?: SiteCreateManyProjectInputEnvelope
    connect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
  }

  export type WorkspaceUpdateOneRequiredWithoutProjectsNestedInput = {
    create?: XOR<WorkspaceCreateWithoutProjectsInput, WorkspaceUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutProjectsInput
    upsert?: WorkspaceUpsertWithoutProjectsInput
    connect?: WorkspaceWhereUniqueInput
    update?: XOR<XOR<WorkspaceUpdateToOneWithWhereWithoutProjectsInput, WorkspaceUpdateWithoutProjectsInput>, WorkspaceUncheckedUpdateWithoutProjectsInput>
  }

  export type ProjectOwnerUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectOwnerCreateWithoutProjectInput, ProjectOwnerUncheckedCreateWithoutProjectInput> | ProjectOwnerCreateWithoutProjectInput[] | ProjectOwnerUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectOwnerCreateOrConnectWithoutProjectInput | ProjectOwnerCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectOwnerUpsertWithWhereUniqueWithoutProjectInput | ProjectOwnerUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectOwnerCreateManyProjectInputEnvelope
    set?: ProjectOwnerWhereUniqueInput | ProjectOwnerWhereUniqueInput[]
    disconnect?: ProjectOwnerWhereUniqueInput | ProjectOwnerWhereUniqueInput[]
    delete?: ProjectOwnerWhereUniqueInput | ProjectOwnerWhereUniqueInput[]
    connect?: ProjectOwnerWhereUniqueInput | ProjectOwnerWhereUniqueInput[]
    update?: ProjectOwnerUpdateWithWhereUniqueWithoutProjectInput | ProjectOwnerUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectOwnerUpdateManyWithWhereWithoutProjectInput | ProjectOwnerUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectOwnerScalarWhereInput | ProjectOwnerScalarWhereInput[]
  }

  export type SiteUpdateManyWithoutProjectNestedInput = {
    create?: XOR<SiteCreateWithoutProjectInput, SiteUncheckedCreateWithoutProjectInput> | SiteCreateWithoutProjectInput[] | SiteUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SiteCreateOrConnectWithoutProjectInput | SiteCreateOrConnectWithoutProjectInput[]
    upsert?: SiteUpsertWithWhereUniqueWithoutProjectInput | SiteUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: SiteCreateManyProjectInputEnvelope
    set?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    disconnect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    delete?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    connect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    update?: SiteUpdateWithWhereUniqueWithoutProjectInput | SiteUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: SiteUpdateManyWithWhereWithoutProjectInput | SiteUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: SiteScalarWhereInput | SiteScalarWhereInput[]
  }

  export type ProjectOwnerUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectOwnerCreateWithoutProjectInput, ProjectOwnerUncheckedCreateWithoutProjectInput> | ProjectOwnerCreateWithoutProjectInput[] | ProjectOwnerUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectOwnerCreateOrConnectWithoutProjectInput | ProjectOwnerCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectOwnerUpsertWithWhereUniqueWithoutProjectInput | ProjectOwnerUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectOwnerCreateManyProjectInputEnvelope
    set?: ProjectOwnerWhereUniqueInput | ProjectOwnerWhereUniqueInput[]
    disconnect?: ProjectOwnerWhereUniqueInput | ProjectOwnerWhereUniqueInput[]
    delete?: ProjectOwnerWhereUniqueInput | ProjectOwnerWhereUniqueInput[]
    connect?: ProjectOwnerWhereUniqueInput | ProjectOwnerWhereUniqueInput[]
    update?: ProjectOwnerUpdateWithWhereUniqueWithoutProjectInput | ProjectOwnerUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectOwnerUpdateManyWithWhereWithoutProjectInput | ProjectOwnerUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectOwnerScalarWhereInput | ProjectOwnerScalarWhereInput[]
  }

  export type SiteUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<SiteCreateWithoutProjectInput, SiteUncheckedCreateWithoutProjectInput> | SiteCreateWithoutProjectInput[] | SiteUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SiteCreateOrConnectWithoutProjectInput | SiteCreateOrConnectWithoutProjectInput[]
    upsert?: SiteUpsertWithWhereUniqueWithoutProjectInput | SiteUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: SiteCreateManyProjectInputEnvelope
    set?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    disconnect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    delete?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    connect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    update?: SiteUpdateWithWhereUniqueWithoutProjectInput | SiteUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: SiteUpdateManyWithWhereWithoutProjectInput | SiteUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: SiteScalarWhereInput | SiteScalarWhereInput[]
  }

  export type WorkspaceCreateNestedOneWithoutSitesInput = {
    create?: XOR<WorkspaceCreateWithoutSitesInput, WorkspaceUncheckedCreateWithoutSitesInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutSitesInput
    connect?: WorkspaceWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutSitesInput = {
    create?: XOR<CompanyCreateWithoutSitesInput, CompanyUncheckedCreateWithoutSitesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutSitesInput
    connect?: CompanyWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutSitesInput = {
    create?: XOR<ProjectCreateWithoutSitesInput, ProjectUncheckedCreateWithoutSitesInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutSitesInput
    connect?: ProjectWhereUniqueInput
  }

  export type SiteAttendanceCreateNestedManyWithoutSiteInput = {
    create?: XOR<SiteAttendanceCreateWithoutSiteInput, SiteAttendanceUncheckedCreateWithoutSiteInput> | SiteAttendanceCreateWithoutSiteInput[] | SiteAttendanceUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: SiteAttendanceCreateOrConnectWithoutSiteInput | SiteAttendanceCreateOrConnectWithoutSiteInput[]
    createMany?: SiteAttendanceCreateManySiteInputEnvelope
    connect?: SiteAttendanceWhereUniqueInput | SiteAttendanceWhereUniqueInput[]
  }

  export type SiteAttendanceUncheckedCreateNestedManyWithoutSiteInput = {
    create?: XOR<SiteAttendanceCreateWithoutSiteInput, SiteAttendanceUncheckedCreateWithoutSiteInput> | SiteAttendanceCreateWithoutSiteInput[] | SiteAttendanceUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: SiteAttendanceCreateOrConnectWithoutSiteInput | SiteAttendanceCreateOrConnectWithoutSiteInput[]
    createMany?: SiteAttendanceCreateManySiteInputEnvelope
    connect?: SiteAttendanceWhereUniqueInput | SiteAttendanceWhereUniqueInput[]
  }

  export type WorkspaceUpdateOneRequiredWithoutSitesNestedInput = {
    create?: XOR<WorkspaceCreateWithoutSitesInput, WorkspaceUncheckedCreateWithoutSitesInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutSitesInput
    upsert?: WorkspaceUpsertWithoutSitesInput
    connect?: WorkspaceWhereUniqueInput
    update?: XOR<XOR<WorkspaceUpdateToOneWithWhereWithoutSitesInput, WorkspaceUpdateWithoutSitesInput>, WorkspaceUncheckedUpdateWithoutSitesInput>
  }

  export type CompanyUpdateOneRequiredWithoutSitesNestedInput = {
    create?: XOR<CompanyCreateWithoutSitesInput, CompanyUncheckedCreateWithoutSitesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutSitesInput
    upsert?: CompanyUpsertWithoutSitesInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutSitesInput, CompanyUpdateWithoutSitesInput>, CompanyUncheckedUpdateWithoutSitesInput>
  }

  export type ProjectUpdateOneWithoutSitesNestedInput = {
    create?: XOR<ProjectCreateWithoutSitesInput, ProjectUncheckedCreateWithoutSitesInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutSitesInput
    upsert?: ProjectUpsertWithoutSitesInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutSitesInput, ProjectUpdateWithoutSitesInput>, ProjectUncheckedUpdateWithoutSitesInput>
  }

  export type SiteAttendanceUpdateManyWithoutSiteNestedInput = {
    create?: XOR<SiteAttendanceCreateWithoutSiteInput, SiteAttendanceUncheckedCreateWithoutSiteInput> | SiteAttendanceCreateWithoutSiteInput[] | SiteAttendanceUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: SiteAttendanceCreateOrConnectWithoutSiteInput | SiteAttendanceCreateOrConnectWithoutSiteInput[]
    upsert?: SiteAttendanceUpsertWithWhereUniqueWithoutSiteInput | SiteAttendanceUpsertWithWhereUniqueWithoutSiteInput[]
    createMany?: SiteAttendanceCreateManySiteInputEnvelope
    set?: SiteAttendanceWhereUniqueInput | SiteAttendanceWhereUniqueInput[]
    disconnect?: SiteAttendanceWhereUniqueInput | SiteAttendanceWhereUniqueInput[]
    delete?: SiteAttendanceWhereUniqueInput | SiteAttendanceWhereUniqueInput[]
    connect?: SiteAttendanceWhereUniqueInput | SiteAttendanceWhereUniqueInput[]
    update?: SiteAttendanceUpdateWithWhereUniqueWithoutSiteInput | SiteAttendanceUpdateWithWhereUniqueWithoutSiteInput[]
    updateMany?: SiteAttendanceUpdateManyWithWhereWithoutSiteInput | SiteAttendanceUpdateManyWithWhereWithoutSiteInput[]
    deleteMany?: SiteAttendanceScalarWhereInput | SiteAttendanceScalarWhereInput[]
  }

  export type SiteAttendanceUncheckedUpdateManyWithoutSiteNestedInput = {
    create?: XOR<SiteAttendanceCreateWithoutSiteInput, SiteAttendanceUncheckedCreateWithoutSiteInput> | SiteAttendanceCreateWithoutSiteInput[] | SiteAttendanceUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: SiteAttendanceCreateOrConnectWithoutSiteInput | SiteAttendanceCreateOrConnectWithoutSiteInput[]
    upsert?: SiteAttendanceUpsertWithWhereUniqueWithoutSiteInput | SiteAttendanceUpsertWithWhereUniqueWithoutSiteInput[]
    createMany?: SiteAttendanceCreateManySiteInputEnvelope
    set?: SiteAttendanceWhereUniqueInput | SiteAttendanceWhereUniqueInput[]
    disconnect?: SiteAttendanceWhereUniqueInput | SiteAttendanceWhereUniqueInput[]
    delete?: SiteAttendanceWhereUniqueInput | SiteAttendanceWhereUniqueInput[]
    connect?: SiteAttendanceWhereUniqueInput | SiteAttendanceWhereUniqueInput[]
    update?: SiteAttendanceUpdateWithWhereUniqueWithoutSiteInput | SiteAttendanceUpdateWithWhereUniqueWithoutSiteInput[]
    updateMany?: SiteAttendanceUpdateManyWithWhereWithoutSiteInput | SiteAttendanceUpdateManyWithWhereWithoutSiteInput[]
    deleteMany?: SiteAttendanceScalarWhereInput | SiteAttendanceScalarWhereInput[]
  }

  export type SiteCreateNestedOneWithoutSiteAttendancesInput = {
    create?: XOR<SiteCreateWithoutSiteAttendancesInput, SiteUncheckedCreateWithoutSiteAttendancesInput>
    connectOrCreate?: SiteCreateOrConnectWithoutSiteAttendancesInput
    connect?: SiteWhereUniqueInput
  }

  export type TalentPoolCreateNestedOneWithoutSiteAttendancesInput = {
    create?: XOR<TalentPoolCreateWithoutSiteAttendancesInput, TalentPoolUncheckedCreateWithoutSiteAttendancesInput>
    connectOrCreate?: TalentPoolCreateOrConnectWithoutSiteAttendancesInput
    connect?: TalentPoolWhereUniqueInput
  }

  export type SiteUpdateOneRequiredWithoutSiteAttendancesNestedInput = {
    create?: XOR<SiteCreateWithoutSiteAttendancesInput, SiteUncheckedCreateWithoutSiteAttendancesInput>
    connectOrCreate?: SiteCreateOrConnectWithoutSiteAttendancesInput
    upsert?: SiteUpsertWithoutSiteAttendancesInput
    connect?: SiteWhereUniqueInput
    update?: XOR<XOR<SiteUpdateToOneWithWhereWithoutSiteAttendancesInput, SiteUpdateWithoutSiteAttendancesInput>, SiteUncheckedUpdateWithoutSiteAttendancesInput>
  }

  export type TalentPoolUpdateOneRequiredWithoutSiteAttendancesNestedInput = {
    create?: XOR<TalentPoolCreateWithoutSiteAttendancesInput, TalentPoolUncheckedCreateWithoutSiteAttendancesInput>
    connectOrCreate?: TalentPoolCreateOrConnectWithoutSiteAttendancesInput
    upsert?: TalentPoolUpsertWithoutSiteAttendancesInput
    connect?: TalentPoolWhereUniqueInput
    update?: XOR<XOR<TalentPoolUpdateToOneWithWhereWithoutSiteAttendancesInput, TalentPoolUpdateWithoutSiteAttendancesInput>, TalentPoolUncheckedUpdateWithoutSiteAttendancesInput>
  }

  export type WorkspaceCreateNestedOneWithoutTalentPoolsInput = {
    create?: XOR<WorkspaceCreateWithoutTalentPoolsInput, WorkspaceUncheckedCreateWithoutTalentPoolsInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutTalentPoolsInput
    connect?: WorkspaceWhereUniqueInput
  }

  export type ProfileCreateNestedOneWithoutTalentPoolsInput = {
    create?: XOR<ProfileCreateWithoutTalentPoolsInput, ProfileUncheckedCreateWithoutTalentPoolsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutTalentPoolsInput
    connect?: ProfileWhereUniqueInput
  }

  export type EmployeeCreateNestedManyWithoutTalentPoolInput = {
    create?: XOR<EmployeeCreateWithoutTalentPoolInput, EmployeeUncheckedCreateWithoutTalentPoolInput> | EmployeeCreateWithoutTalentPoolInput[] | EmployeeUncheckedCreateWithoutTalentPoolInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutTalentPoolInput | EmployeeCreateOrConnectWithoutTalentPoolInput[]
    createMany?: EmployeeCreateManyTalentPoolInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type DayLaborerCreateNestedManyWithoutTalentPoolInput = {
    create?: XOR<DayLaborerCreateWithoutTalentPoolInput, DayLaborerUncheckedCreateWithoutTalentPoolInput> | DayLaborerCreateWithoutTalentPoolInput[] | DayLaborerUncheckedCreateWithoutTalentPoolInput[]
    connectOrCreate?: DayLaborerCreateOrConnectWithoutTalentPoolInput | DayLaborerCreateOrConnectWithoutTalentPoolInput[]
    createMany?: DayLaborerCreateManyTalentPoolInputEnvelope
    connect?: DayLaborerWhereUniqueInput | DayLaborerWhereUniqueInput[]
  }

  export type SiteAttendanceCreateNestedManyWithoutTalentPoolInput = {
    create?: XOR<SiteAttendanceCreateWithoutTalentPoolInput, SiteAttendanceUncheckedCreateWithoutTalentPoolInput> | SiteAttendanceCreateWithoutTalentPoolInput[] | SiteAttendanceUncheckedCreateWithoutTalentPoolInput[]
    connectOrCreate?: SiteAttendanceCreateOrConnectWithoutTalentPoolInput | SiteAttendanceCreateOrConnectWithoutTalentPoolInput[]
    createMany?: SiteAttendanceCreateManyTalentPoolInputEnvelope
    connect?: SiteAttendanceWhereUniqueInput | SiteAttendanceWhereUniqueInput[]
  }

  export type EmployeeUncheckedCreateNestedManyWithoutTalentPoolInput = {
    create?: XOR<EmployeeCreateWithoutTalentPoolInput, EmployeeUncheckedCreateWithoutTalentPoolInput> | EmployeeCreateWithoutTalentPoolInput[] | EmployeeUncheckedCreateWithoutTalentPoolInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutTalentPoolInput | EmployeeCreateOrConnectWithoutTalentPoolInput[]
    createMany?: EmployeeCreateManyTalentPoolInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type DayLaborerUncheckedCreateNestedManyWithoutTalentPoolInput = {
    create?: XOR<DayLaborerCreateWithoutTalentPoolInput, DayLaborerUncheckedCreateWithoutTalentPoolInput> | DayLaborerCreateWithoutTalentPoolInput[] | DayLaborerUncheckedCreateWithoutTalentPoolInput[]
    connectOrCreate?: DayLaborerCreateOrConnectWithoutTalentPoolInput | DayLaborerCreateOrConnectWithoutTalentPoolInput[]
    createMany?: DayLaborerCreateManyTalentPoolInputEnvelope
    connect?: DayLaborerWhereUniqueInput | DayLaborerWhereUniqueInput[]
  }

  export type SiteAttendanceUncheckedCreateNestedManyWithoutTalentPoolInput = {
    create?: XOR<SiteAttendanceCreateWithoutTalentPoolInput, SiteAttendanceUncheckedCreateWithoutTalentPoolInput> | SiteAttendanceCreateWithoutTalentPoolInput[] | SiteAttendanceUncheckedCreateWithoutTalentPoolInput[]
    connectOrCreate?: SiteAttendanceCreateOrConnectWithoutTalentPoolInput | SiteAttendanceCreateOrConnectWithoutTalentPoolInput[]
    createMany?: SiteAttendanceCreateManyTalentPoolInputEnvelope
    connect?: SiteAttendanceWhereUniqueInput | SiteAttendanceWhereUniqueInput[]
  }

  export type WorkspaceUpdateOneRequiredWithoutTalentPoolsNestedInput = {
    create?: XOR<WorkspaceCreateWithoutTalentPoolsInput, WorkspaceUncheckedCreateWithoutTalentPoolsInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutTalentPoolsInput
    upsert?: WorkspaceUpsertWithoutTalentPoolsInput
    connect?: WorkspaceWhereUniqueInput
    update?: XOR<XOR<WorkspaceUpdateToOneWithWhereWithoutTalentPoolsInput, WorkspaceUpdateWithoutTalentPoolsInput>, WorkspaceUncheckedUpdateWithoutTalentPoolsInput>
  }

  export type ProfileUpdateOneWithoutTalentPoolsNestedInput = {
    create?: XOR<ProfileCreateWithoutTalentPoolsInput, ProfileUncheckedCreateWithoutTalentPoolsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutTalentPoolsInput
    upsert?: ProfileUpsertWithoutTalentPoolsInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutTalentPoolsInput, ProfileUpdateWithoutTalentPoolsInput>, ProfileUncheckedUpdateWithoutTalentPoolsInput>
  }

  export type EmployeeUpdateManyWithoutTalentPoolNestedInput = {
    create?: XOR<EmployeeCreateWithoutTalentPoolInput, EmployeeUncheckedCreateWithoutTalentPoolInput> | EmployeeCreateWithoutTalentPoolInput[] | EmployeeUncheckedCreateWithoutTalentPoolInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutTalentPoolInput | EmployeeCreateOrConnectWithoutTalentPoolInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutTalentPoolInput | EmployeeUpsertWithWhereUniqueWithoutTalentPoolInput[]
    createMany?: EmployeeCreateManyTalentPoolInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutTalentPoolInput | EmployeeUpdateWithWhereUniqueWithoutTalentPoolInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutTalentPoolInput | EmployeeUpdateManyWithWhereWithoutTalentPoolInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type DayLaborerUpdateManyWithoutTalentPoolNestedInput = {
    create?: XOR<DayLaborerCreateWithoutTalentPoolInput, DayLaborerUncheckedCreateWithoutTalentPoolInput> | DayLaborerCreateWithoutTalentPoolInput[] | DayLaborerUncheckedCreateWithoutTalentPoolInput[]
    connectOrCreate?: DayLaborerCreateOrConnectWithoutTalentPoolInput | DayLaborerCreateOrConnectWithoutTalentPoolInput[]
    upsert?: DayLaborerUpsertWithWhereUniqueWithoutTalentPoolInput | DayLaborerUpsertWithWhereUniqueWithoutTalentPoolInput[]
    createMany?: DayLaborerCreateManyTalentPoolInputEnvelope
    set?: DayLaborerWhereUniqueInput | DayLaborerWhereUniqueInput[]
    disconnect?: DayLaborerWhereUniqueInput | DayLaborerWhereUniqueInput[]
    delete?: DayLaborerWhereUniqueInput | DayLaborerWhereUniqueInput[]
    connect?: DayLaborerWhereUniqueInput | DayLaborerWhereUniqueInput[]
    update?: DayLaborerUpdateWithWhereUniqueWithoutTalentPoolInput | DayLaborerUpdateWithWhereUniqueWithoutTalentPoolInput[]
    updateMany?: DayLaborerUpdateManyWithWhereWithoutTalentPoolInput | DayLaborerUpdateManyWithWhereWithoutTalentPoolInput[]
    deleteMany?: DayLaborerScalarWhereInput | DayLaborerScalarWhereInput[]
  }

  export type SiteAttendanceUpdateManyWithoutTalentPoolNestedInput = {
    create?: XOR<SiteAttendanceCreateWithoutTalentPoolInput, SiteAttendanceUncheckedCreateWithoutTalentPoolInput> | SiteAttendanceCreateWithoutTalentPoolInput[] | SiteAttendanceUncheckedCreateWithoutTalentPoolInput[]
    connectOrCreate?: SiteAttendanceCreateOrConnectWithoutTalentPoolInput | SiteAttendanceCreateOrConnectWithoutTalentPoolInput[]
    upsert?: SiteAttendanceUpsertWithWhereUniqueWithoutTalentPoolInput | SiteAttendanceUpsertWithWhereUniqueWithoutTalentPoolInput[]
    createMany?: SiteAttendanceCreateManyTalentPoolInputEnvelope
    set?: SiteAttendanceWhereUniqueInput | SiteAttendanceWhereUniqueInput[]
    disconnect?: SiteAttendanceWhereUniqueInput | SiteAttendanceWhereUniqueInput[]
    delete?: SiteAttendanceWhereUniqueInput | SiteAttendanceWhereUniqueInput[]
    connect?: SiteAttendanceWhereUniqueInput | SiteAttendanceWhereUniqueInput[]
    update?: SiteAttendanceUpdateWithWhereUniqueWithoutTalentPoolInput | SiteAttendanceUpdateWithWhereUniqueWithoutTalentPoolInput[]
    updateMany?: SiteAttendanceUpdateManyWithWhereWithoutTalentPoolInput | SiteAttendanceUpdateManyWithWhereWithoutTalentPoolInput[]
    deleteMany?: SiteAttendanceScalarWhereInput | SiteAttendanceScalarWhereInput[]
  }

  export type EmployeeUncheckedUpdateManyWithoutTalentPoolNestedInput = {
    create?: XOR<EmployeeCreateWithoutTalentPoolInput, EmployeeUncheckedCreateWithoutTalentPoolInput> | EmployeeCreateWithoutTalentPoolInput[] | EmployeeUncheckedCreateWithoutTalentPoolInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutTalentPoolInput | EmployeeCreateOrConnectWithoutTalentPoolInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutTalentPoolInput | EmployeeUpsertWithWhereUniqueWithoutTalentPoolInput[]
    createMany?: EmployeeCreateManyTalentPoolInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutTalentPoolInput | EmployeeUpdateWithWhereUniqueWithoutTalentPoolInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutTalentPoolInput | EmployeeUpdateManyWithWhereWithoutTalentPoolInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type DayLaborerUncheckedUpdateManyWithoutTalentPoolNestedInput = {
    create?: XOR<DayLaborerCreateWithoutTalentPoolInput, DayLaborerUncheckedCreateWithoutTalentPoolInput> | DayLaborerCreateWithoutTalentPoolInput[] | DayLaborerUncheckedCreateWithoutTalentPoolInput[]
    connectOrCreate?: DayLaborerCreateOrConnectWithoutTalentPoolInput | DayLaborerCreateOrConnectWithoutTalentPoolInput[]
    upsert?: DayLaborerUpsertWithWhereUniqueWithoutTalentPoolInput | DayLaborerUpsertWithWhereUniqueWithoutTalentPoolInput[]
    createMany?: DayLaborerCreateManyTalentPoolInputEnvelope
    set?: DayLaborerWhereUniqueInput | DayLaborerWhereUniqueInput[]
    disconnect?: DayLaborerWhereUniqueInput | DayLaborerWhereUniqueInput[]
    delete?: DayLaborerWhereUniqueInput | DayLaborerWhereUniqueInput[]
    connect?: DayLaborerWhereUniqueInput | DayLaborerWhereUniqueInput[]
    update?: DayLaborerUpdateWithWhereUniqueWithoutTalentPoolInput | DayLaborerUpdateWithWhereUniqueWithoutTalentPoolInput[]
    updateMany?: DayLaborerUpdateManyWithWhereWithoutTalentPoolInput | DayLaborerUpdateManyWithWhereWithoutTalentPoolInput[]
    deleteMany?: DayLaborerScalarWhereInput | DayLaborerScalarWhereInput[]
  }

  export type SiteAttendanceUncheckedUpdateManyWithoutTalentPoolNestedInput = {
    create?: XOR<SiteAttendanceCreateWithoutTalentPoolInput, SiteAttendanceUncheckedCreateWithoutTalentPoolInput> | SiteAttendanceCreateWithoutTalentPoolInput[] | SiteAttendanceUncheckedCreateWithoutTalentPoolInput[]
    connectOrCreate?: SiteAttendanceCreateOrConnectWithoutTalentPoolInput | SiteAttendanceCreateOrConnectWithoutTalentPoolInput[]
    upsert?: SiteAttendanceUpsertWithWhereUniqueWithoutTalentPoolInput | SiteAttendanceUpsertWithWhereUniqueWithoutTalentPoolInput[]
    createMany?: SiteAttendanceCreateManyTalentPoolInputEnvelope
    set?: SiteAttendanceWhereUniqueInput | SiteAttendanceWhereUniqueInput[]
    disconnect?: SiteAttendanceWhereUniqueInput | SiteAttendanceWhereUniqueInput[]
    delete?: SiteAttendanceWhereUniqueInput | SiteAttendanceWhereUniqueInput[]
    connect?: SiteAttendanceWhereUniqueInput | SiteAttendanceWhereUniqueInput[]
    update?: SiteAttendanceUpdateWithWhereUniqueWithoutTalentPoolInput | SiteAttendanceUpdateWithWhereUniqueWithoutTalentPoolInput[]
    updateMany?: SiteAttendanceUpdateManyWithWhereWithoutTalentPoolInput | SiteAttendanceUpdateManyWithWhereWithoutTalentPoolInput[]
    deleteMany?: SiteAttendanceScalarWhereInput | SiteAttendanceScalarWhereInput[]
  }

  export type CompanyIndustryCodeCreateNestedManyWithoutIndustrialAccidentInsurancePremiumRateInput = {
    create?: XOR<CompanyIndustryCodeCreateWithoutIndustrialAccidentInsurancePremiumRateInput, CompanyIndustryCodeUncheckedCreateWithoutIndustrialAccidentInsurancePremiumRateInput> | CompanyIndustryCodeCreateWithoutIndustrialAccidentInsurancePremiumRateInput[] | CompanyIndustryCodeUncheckedCreateWithoutIndustrialAccidentInsurancePremiumRateInput[]
    connectOrCreate?: CompanyIndustryCodeCreateOrConnectWithoutIndustrialAccidentInsurancePremiumRateInput | CompanyIndustryCodeCreateOrConnectWithoutIndustrialAccidentInsurancePremiumRateInput[]
    createMany?: CompanyIndustryCodeCreateManyIndustrialAccidentInsurancePremiumRateInputEnvelope
    connect?: CompanyIndustryCodeWhereUniqueInput | CompanyIndustryCodeWhereUniqueInput[]
  }

  export type CompanyIndustryCodeUncheckedCreateNestedManyWithoutIndustrialAccidentInsurancePremiumRateInput = {
    create?: XOR<CompanyIndustryCodeCreateWithoutIndustrialAccidentInsurancePremiumRateInput, CompanyIndustryCodeUncheckedCreateWithoutIndustrialAccidentInsurancePremiumRateInput> | CompanyIndustryCodeCreateWithoutIndustrialAccidentInsurancePremiumRateInput[] | CompanyIndustryCodeUncheckedCreateWithoutIndustrialAccidentInsurancePremiumRateInput[]
    connectOrCreate?: CompanyIndustryCodeCreateOrConnectWithoutIndustrialAccidentInsurancePremiumRateInput | CompanyIndustryCodeCreateOrConnectWithoutIndustrialAccidentInsurancePremiumRateInput[]
    createMany?: CompanyIndustryCodeCreateManyIndustrialAccidentInsurancePremiumRateInputEnvelope
    connect?: CompanyIndustryCodeWhereUniqueInput | CompanyIndustryCodeWhereUniqueInput[]
  }

  export type CompanyIndustryCodeUpdateManyWithoutIndustrialAccidentInsurancePremiumRateNestedInput = {
    create?: XOR<CompanyIndustryCodeCreateWithoutIndustrialAccidentInsurancePremiumRateInput, CompanyIndustryCodeUncheckedCreateWithoutIndustrialAccidentInsurancePremiumRateInput> | CompanyIndustryCodeCreateWithoutIndustrialAccidentInsurancePremiumRateInput[] | CompanyIndustryCodeUncheckedCreateWithoutIndustrialAccidentInsurancePremiumRateInput[]
    connectOrCreate?: CompanyIndustryCodeCreateOrConnectWithoutIndustrialAccidentInsurancePremiumRateInput | CompanyIndustryCodeCreateOrConnectWithoutIndustrialAccidentInsurancePremiumRateInput[]
    upsert?: CompanyIndustryCodeUpsertWithWhereUniqueWithoutIndustrialAccidentInsurancePremiumRateInput | CompanyIndustryCodeUpsertWithWhereUniqueWithoutIndustrialAccidentInsurancePremiumRateInput[]
    createMany?: CompanyIndustryCodeCreateManyIndustrialAccidentInsurancePremiumRateInputEnvelope
    set?: CompanyIndustryCodeWhereUniqueInput | CompanyIndustryCodeWhereUniqueInput[]
    disconnect?: CompanyIndustryCodeWhereUniqueInput | CompanyIndustryCodeWhereUniqueInput[]
    delete?: CompanyIndustryCodeWhereUniqueInput | CompanyIndustryCodeWhereUniqueInput[]
    connect?: CompanyIndustryCodeWhereUniqueInput | CompanyIndustryCodeWhereUniqueInput[]
    update?: CompanyIndustryCodeUpdateWithWhereUniqueWithoutIndustrialAccidentInsurancePremiumRateInput | CompanyIndustryCodeUpdateWithWhereUniqueWithoutIndustrialAccidentInsurancePremiumRateInput[]
    updateMany?: CompanyIndustryCodeUpdateManyWithWhereWithoutIndustrialAccidentInsurancePremiumRateInput | CompanyIndustryCodeUpdateManyWithWhereWithoutIndustrialAccidentInsurancePremiumRateInput[]
    deleteMany?: CompanyIndustryCodeScalarWhereInput | CompanyIndustryCodeScalarWhereInput[]
  }

  export type CompanyIndustryCodeUncheckedUpdateManyWithoutIndustrialAccidentInsurancePremiumRateNestedInput = {
    create?: XOR<CompanyIndustryCodeCreateWithoutIndustrialAccidentInsurancePremiumRateInput, CompanyIndustryCodeUncheckedCreateWithoutIndustrialAccidentInsurancePremiumRateInput> | CompanyIndustryCodeCreateWithoutIndustrialAccidentInsurancePremiumRateInput[] | CompanyIndustryCodeUncheckedCreateWithoutIndustrialAccidentInsurancePremiumRateInput[]
    connectOrCreate?: CompanyIndustryCodeCreateOrConnectWithoutIndustrialAccidentInsurancePremiumRateInput | CompanyIndustryCodeCreateOrConnectWithoutIndustrialAccidentInsurancePremiumRateInput[]
    upsert?: CompanyIndustryCodeUpsertWithWhereUniqueWithoutIndustrialAccidentInsurancePremiumRateInput | CompanyIndustryCodeUpsertWithWhereUniqueWithoutIndustrialAccidentInsurancePremiumRateInput[]
    createMany?: CompanyIndustryCodeCreateManyIndustrialAccidentInsurancePremiumRateInputEnvelope
    set?: CompanyIndustryCodeWhereUniqueInput | CompanyIndustryCodeWhereUniqueInput[]
    disconnect?: CompanyIndustryCodeWhereUniqueInput | CompanyIndustryCodeWhereUniqueInput[]
    delete?: CompanyIndustryCodeWhereUniqueInput | CompanyIndustryCodeWhereUniqueInput[]
    connect?: CompanyIndustryCodeWhereUniqueInput | CompanyIndustryCodeWhereUniqueInput[]
    update?: CompanyIndustryCodeUpdateWithWhereUniqueWithoutIndustrialAccidentInsurancePremiumRateInput | CompanyIndustryCodeUpdateWithWhereUniqueWithoutIndustrialAccidentInsurancePremiumRateInput[]
    updateMany?: CompanyIndustryCodeUpdateManyWithWhereWithoutIndustrialAccidentInsurancePremiumRateInput | CompanyIndustryCodeUpdateManyWithWhereWithoutIndustrialAccidentInsurancePremiumRateInput[]
    deleteMany?: CompanyIndustryCodeScalarWhereInput | CompanyIndustryCodeScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutCompanyIndustryCodesInput = {
    create?: XOR<CompanyCreateWithoutCompanyIndustryCodesInput, CompanyUncheckedCreateWithoutCompanyIndustryCodesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutCompanyIndustryCodesInput
    connect?: CompanyWhereUniqueInput
  }

  export type IndustrialAccidentInsurancePremiumRateCreateNestedOneWithoutCompanyIndustryCodesInput = {
    create?: XOR<IndustrialAccidentInsurancePremiumRateCreateWithoutCompanyIndustryCodesInput, IndustrialAccidentInsurancePremiumRateUncheckedCreateWithoutCompanyIndustryCodesInput>
    connectOrCreate?: IndustrialAccidentInsurancePremiumRateCreateOrConnectWithoutCompanyIndustryCodesInput
    connect?: IndustrialAccidentInsurancePremiumRateWhereUniqueInput
  }

  export type CompanyUpdateOneRequiredWithoutCompanyIndustryCodesNestedInput = {
    create?: XOR<CompanyCreateWithoutCompanyIndustryCodesInput, CompanyUncheckedCreateWithoutCompanyIndustryCodesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutCompanyIndustryCodesInput
    upsert?: CompanyUpsertWithoutCompanyIndustryCodesInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutCompanyIndustryCodesInput, CompanyUpdateWithoutCompanyIndustryCodesInput>, CompanyUncheckedUpdateWithoutCompanyIndustryCodesInput>
  }

  export type IndustrialAccidentInsurancePremiumRateUpdateOneRequiredWithoutCompanyIndustryCodesNestedInput = {
    create?: XOR<IndustrialAccidentInsurancePremiumRateCreateWithoutCompanyIndustryCodesInput, IndustrialAccidentInsurancePremiumRateUncheckedCreateWithoutCompanyIndustryCodesInput>
    connectOrCreate?: IndustrialAccidentInsurancePremiumRateCreateOrConnectWithoutCompanyIndustryCodesInput
    upsert?: IndustrialAccidentInsurancePremiumRateUpsertWithoutCompanyIndustryCodesInput
    connect?: IndustrialAccidentInsurancePremiumRateWhereUniqueInput
    update?: XOR<XOR<IndustrialAccidentInsurancePremiumRateUpdateToOneWithWhereWithoutCompanyIndustryCodesInput, IndustrialAccidentInsurancePremiumRateUpdateWithoutCompanyIndustryCodesInput>, IndustrialAccidentInsurancePremiumRateUncheckedUpdateWithoutCompanyIndustryCodesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type PrimaryProfileCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    profile: ProfileCreateNestedOneWithoutPrimaryProfileInput
  }

  export type PrimaryProfileUncheckedCreateWithoutUserInput = {
    id?: number
    profileId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PrimaryProfileCreateOrConnectWithoutUserInput = {
    where: PrimaryProfileWhereUniqueInput
    create: XOR<PrimaryProfileCreateWithoutUserInput, PrimaryProfileUncheckedCreateWithoutUserInput>
  }

  export type ProfileCreateWithoutUserInput = {
    name: string
    birthday?: Date | string | null
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    talentPools?: TalentPoolCreateNestedManyWithoutProfileInput
    primaryProfile?: PrimaryProfileCreateNestedOneWithoutProfileInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    birthday?: Date | string | null
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    talentPools?: TalentPoolUncheckedCreateNestedManyWithoutProfileInput
    primaryProfile?: PrimaryProfileUncheckedCreateNestedOneWithoutProfileInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type ProfileCreateManyUserInputEnvelope = {
    data: ProfileCreateManyUserInput | ProfileCreateManyUserInput[]
  }

  export type WorkspaceMemberCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutWorkspaceMembersInput
    profile: ProfileCreateNestedOneWithoutWorkspaceMembersInput
    inviter?: WorkspaceMemberCreateNestedOneWithoutInvitedMembersInput
    owners?: WorkspaceOwnerCreateNestedManyWithoutWorkspaceMemberInput
    companiesCreated?: CompanyCreateNestedManyWithoutCreatedByMemberInput
    invitedMembers?: WorkspaceMemberCreateNestedManyWithoutInviterInput
  }

  export type WorkspaceMemberUncheckedCreateWithoutUserInput = {
    id?: number
    workspaceId: number
    profileId: number
    inviterId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owners?: WorkspaceOwnerUncheckedCreateNestedManyWithoutWorkspaceMemberInput
    companiesCreated?: CompanyUncheckedCreateNestedManyWithoutCreatedByMemberInput
    invitedMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutInviterInput
  }

  export type WorkspaceMemberCreateOrConnectWithoutUserInput = {
    where: WorkspaceMemberWhereUniqueInput
    create: XOR<WorkspaceMemberCreateWithoutUserInput, WorkspaceMemberUncheckedCreateWithoutUserInput>
  }

  export type WorkspaceMemberCreateManyUserInputEnvelope = {
    data: WorkspaceMemberCreateManyUserInput | WorkspaceMemberCreateManyUserInput[]
  }

  export type PrimaryProfileUpsertWithoutUserInput = {
    update: XOR<PrimaryProfileUpdateWithoutUserInput, PrimaryProfileUncheckedUpdateWithoutUserInput>
    create: XOR<PrimaryProfileCreateWithoutUserInput, PrimaryProfileUncheckedCreateWithoutUserInput>
    where?: PrimaryProfileWhereInput
  }

  export type PrimaryProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: PrimaryProfileWhereInput
    data: XOR<PrimaryProfileUpdateWithoutUserInput, PrimaryProfileUncheckedUpdateWithoutUserInput>
  }

  export type PrimaryProfileUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneRequiredWithoutPrimaryProfileNestedInput
  }

  export type PrimaryProfileUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileUpsertWithWhereUniqueWithoutUserInput = {
    where: ProfileWhereUniqueInput
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type ProfileUpdateWithWhereUniqueWithoutUserInput = {
    where: ProfileWhereUniqueInput
    data: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUpdateManyWithWhereWithoutUserInput = {
    where: ProfileScalarWhereInput
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyWithoutUserInput>
  }

  export type ProfileScalarWhereInput = {
    AND?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
    OR?: ProfileScalarWhereInput[]
    NOT?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
    id?: IntFilter<"Profile"> | number
    userId?: IntNullableFilter<"Profile"> | number | null
    name?: StringFilter<"Profile"> | string
    birthday?: DateTimeNullableFilter<"Profile"> | Date | string | null
    address?: StringNullableFilter<"Profile"> | string | null
    phone?: StringNullableFilter<"Profile"> | string | null
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
  }

  export type WorkspaceMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: WorkspaceMemberWhereUniqueInput
    update: XOR<WorkspaceMemberUpdateWithoutUserInput, WorkspaceMemberUncheckedUpdateWithoutUserInput>
    create: XOR<WorkspaceMemberCreateWithoutUserInput, WorkspaceMemberUncheckedCreateWithoutUserInput>
  }

  export type WorkspaceMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: WorkspaceMemberWhereUniqueInput
    data: XOR<WorkspaceMemberUpdateWithoutUserInput, WorkspaceMemberUncheckedUpdateWithoutUserInput>
  }

  export type WorkspaceMemberUpdateManyWithWhereWithoutUserInput = {
    where: WorkspaceMemberScalarWhereInput
    data: XOR<WorkspaceMemberUpdateManyMutationInput, WorkspaceMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type WorkspaceMemberScalarWhereInput = {
    AND?: WorkspaceMemberScalarWhereInput | WorkspaceMemberScalarWhereInput[]
    OR?: WorkspaceMemberScalarWhereInput[]
    NOT?: WorkspaceMemberScalarWhereInput | WorkspaceMemberScalarWhereInput[]
    id?: IntFilter<"WorkspaceMember"> | number
    workspaceId?: IntFilter<"WorkspaceMember"> | number
    userId?: IntFilter<"WorkspaceMember"> | number
    profileId?: IntFilter<"WorkspaceMember"> | number
    inviterId?: IntNullableFilter<"WorkspaceMember"> | number | null
    createdAt?: DateTimeFilter<"WorkspaceMember"> | Date | string
    updatedAt?: DateTimeFilter<"WorkspaceMember"> | Date | string
  }

  export type UserCreateWithoutProfilesInput = {
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryProfile?: PrimaryProfileCreateNestedOneWithoutUserInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfilesInput = {
    id?: number
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryProfile?: PrimaryProfileUncheckedCreateNestedOneWithoutUserInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfilesInput, UserUncheckedCreateWithoutProfilesInput>
  }

  export type TalentPoolCreateWithoutProfileInput = {
    name: string
    birthday: Date | string
    phone: string
    address: string
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutTalentPoolsInput
    employees?: EmployeeCreateNestedManyWithoutTalentPoolInput
    dayLaborers?: DayLaborerCreateNestedManyWithoutTalentPoolInput
    siteAttendances?: SiteAttendanceCreateNestedManyWithoutTalentPoolInput
  }

  export type TalentPoolUncheckedCreateWithoutProfileInput = {
    id?: number
    workspaceId: number
    name: string
    birthday: Date | string
    phone: string
    address: string
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employees?: EmployeeUncheckedCreateNestedManyWithoutTalentPoolInput
    dayLaborers?: DayLaborerUncheckedCreateNestedManyWithoutTalentPoolInput
    siteAttendances?: SiteAttendanceUncheckedCreateNestedManyWithoutTalentPoolInput
  }

  export type TalentPoolCreateOrConnectWithoutProfileInput = {
    where: TalentPoolWhereUniqueInput
    create: XOR<TalentPoolCreateWithoutProfileInput, TalentPoolUncheckedCreateWithoutProfileInput>
  }

  export type TalentPoolCreateManyProfileInputEnvelope = {
    data: TalentPoolCreateManyProfileInput | TalentPoolCreateManyProfileInput[]
  }

  export type PrimaryProfileCreateWithoutProfileInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPrimaryProfileInput
  }

  export type PrimaryProfileUncheckedCreateWithoutProfileInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PrimaryProfileCreateOrConnectWithoutProfileInput = {
    where: PrimaryProfileWhereUniqueInput
    create: XOR<PrimaryProfileCreateWithoutProfileInput, PrimaryProfileUncheckedCreateWithoutProfileInput>
  }

  export type WorkspaceMemberCreateWithoutProfileInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutWorkspaceMembersInput
    user: UserCreateNestedOneWithoutWorkspaceMembersInput
    inviter?: WorkspaceMemberCreateNestedOneWithoutInvitedMembersInput
    owners?: WorkspaceOwnerCreateNestedManyWithoutWorkspaceMemberInput
    companiesCreated?: CompanyCreateNestedManyWithoutCreatedByMemberInput
    invitedMembers?: WorkspaceMemberCreateNestedManyWithoutInviterInput
  }

  export type WorkspaceMemberUncheckedCreateWithoutProfileInput = {
    id?: number
    workspaceId: number
    userId: number
    inviterId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owners?: WorkspaceOwnerUncheckedCreateNestedManyWithoutWorkspaceMemberInput
    companiesCreated?: CompanyUncheckedCreateNestedManyWithoutCreatedByMemberInput
    invitedMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutInviterInput
  }

  export type WorkspaceMemberCreateOrConnectWithoutProfileInput = {
    where: WorkspaceMemberWhereUniqueInput
    create: XOR<WorkspaceMemberCreateWithoutProfileInput, WorkspaceMemberUncheckedCreateWithoutProfileInput>
  }

  export type WorkspaceMemberCreateManyProfileInputEnvelope = {
    data: WorkspaceMemberCreateManyProfileInput | WorkspaceMemberCreateManyProfileInput[]
  }

  export type UserUpsertWithoutProfilesInput = {
    update: XOR<UserUpdateWithoutProfilesInput, UserUncheckedUpdateWithoutProfilesInput>
    create: XOR<UserCreateWithoutProfilesInput, UserUncheckedCreateWithoutProfilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfilesInput, UserUncheckedUpdateWithoutProfilesInput>
  }

  export type UserUpdateWithoutProfilesInput = {
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryProfile?: PrimaryProfileUpdateOneWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfilesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryProfile?: PrimaryProfileUncheckedUpdateOneWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TalentPoolUpsertWithWhereUniqueWithoutProfileInput = {
    where: TalentPoolWhereUniqueInput
    update: XOR<TalentPoolUpdateWithoutProfileInput, TalentPoolUncheckedUpdateWithoutProfileInput>
    create: XOR<TalentPoolCreateWithoutProfileInput, TalentPoolUncheckedCreateWithoutProfileInput>
  }

  export type TalentPoolUpdateWithWhereUniqueWithoutProfileInput = {
    where: TalentPoolWhereUniqueInput
    data: XOR<TalentPoolUpdateWithoutProfileInput, TalentPoolUncheckedUpdateWithoutProfileInput>
  }

  export type TalentPoolUpdateManyWithWhereWithoutProfileInput = {
    where: TalentPoolScalarWhereInput
    data: XOR<TalentPoolUpdateManyMutationInput, TalentPoolUncheckedUpdateManyWithoutProfileInput>
  }

  export type TalentPoolScalarWhereInput = {
    AND?: TalentPoolScalarWhereInput | TalentPoolScalarWhereInput[]
    OR?: TalentPoolScalarWhereInput[]
    NOT?: TalentPoolScalarWhereInput | TalentPoolScalarWhereInput[]
    id?: IntFilter<"TalentPool"> | number
    workspaceId?: IntFilter<"TalentPool"> | number
    profileId?: IntNullableFilter<"TalentPool"> | number | null
    name?: StringFilter<"TalentPool"> | string
    birthday?: DateTimeFilter<"TalentPool"> | Date | string
    phone?: StringFilter<"TalentPool"> | string
    address?: StringFilter<"TalentPool"> | string
    memo?: StringNullableFilter<"TalentPool"> | string | null
    createdAt?: DateTimeFilter<"TalentPool"> | Date | string
    updatedAt?: DateTimeFilter<"TalentPool"> | Date | string
  }

  export type PrimaryProfileUpsertWithoutProfileInput = {
    update: XOR<PrimaryProfileUpdateWithoutProfileInput, PrimaryProfileUncheckedUpdateWithoutProfileInput>
    create: XOR<PrimaryProfileCreateWithoutProfileInput, PrimaryProfileUncheckedCreateWithoutProfileInput>
    where?: PrimaryProfileWhereInput
  }

  export type PrimaryProfileUpdateToOneWithWhereWithoutProfileInput = {
    where?: PrimaryProfileWhereInput
    data: XOR<PrimaryProfileUpdateWithoutProfileInput, PrimaryProfileUncheckedUpdateWithoutProfileInput>
  }

  export type PrimaryProfileUpdateWithoutProfileInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPrimaryProfileNestedInput
  }

  export type PrimaryProfileUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceMemberUpsertWithWhereUniqueWithoutProfileInput = {
    where: WorkspaceMemberWhereUniqueInput
    update: XOR<WorkspaceMemberUpdateWithoutProfileInput, WorkspaceMemberUncheckedUpdateWithoutProfileInput>
    create: XOR<WorkspaceMemberCreateWithoutProfileInput, WorkspaceMemberUncheckedCreateWithoutProfileInput>
  }

  export type WorkspaceMemberUpdateWithWhereUniqueWithoutProfileInput = {
    where: WorkspaceMemberWhereUniqueInput
    data: XOR<WorkspaceMemberUpdateWithoutProfileInput, WorkspaceMemberUncheckedUpdateWithoutProfileInput>
  }

  export type WorkspaceMemberUpdateManyWithWhereWithoutProfileInput = {
    where: WorkspaceMemberScalarWhereInput
    data: XOR<WorkspaceMemberUpdateManyMutationInput, WorkspaceMemberUncheckedUpdateManyWithoutProfileInput>
  }

  export type UserCreateWithoutPrimaryProfileInput = {
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPrimaryProfileInput = {
    id?: number
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileUncheckedCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPrimaryProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPrimaryProfileInput, UserUncheckedCreateWithoutPrimaryProfileInput>
  }

  export type ProfileCreateWithoutPrimaryProfileInput = {
    name: string
    birthday?: Date | string | null
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutProfilesInput
    talentPools?: TalentPoolCreateNestedManyWithoutProfileInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutPrimaryProfileInput = {
    id?: number
    userId?: number | null
    name: string
    birthday?: Date | string | null
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    talentPools?: TalentPoolUncheckedCreateNestedManyWithoutProfileInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutPrimaryProfileInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutPrimaryProfileInput, ProfileUncheckedCreateWithoutPrimaryProfileInput>
  }

  export type UserUpsertWithoutPrimaryProfileInput = {
    update: XOR<UserUpdateWithoutPrimaryProfileInput, UserUncheckedUpdateWithoutPrimaryProfileInput>
    create: XOR<UserCreateWithoutPrimaryProfileInput, UserUncheckedCreateWithoutPrimaryProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPrimaryProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPrimaryProfileInput, UserUncheckedUpdateWithoutPrimaryProfileInput>
  }

  export type UserUpdateWithoutPrimaryProfileInput = {
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPrimaryProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUncheckedUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProfileUpsertWithoutPrimaryProfileInput = {
    update: XOR<ProfileUpdateWithoutPrimaryProfileInput, ProfileUncheckedUpdateWithoutPrimaryProfileInput>
    create: XOR<ProfileCreateWithoutPrimaryProfileInput, ProfileUncheckedCreateWithoutPrimaryProfileInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutPrimaryProfileInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutPrimaryProfileInput, ProfileUncheckedUpdateWithoutPrimaryProfileInput>
  }

  export type ProfileUpdateWithoutPrimaryProfileInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutProfilesNestedInput
    talentPools?: TalentPoolUpdateManyWithoutProfileNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutPrimaryProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    talentPools?: TalentPoolUncheckedUpdateManyWithoutProfileNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type CompanyCreateWithoutWorkspaceInput = {
    name: string
    location: string
    businessNumber?: string | null
    managementNumber?: string | null
    employeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    companyIndustryCodes?: CompanyIndustryCodeCreateNestedManyWithoutCompanyInput
    dayLaborers?: DayLaborerCreateNestedManyWithoutCompanyInput
    employees?: EmployeeCreateNestedManyWithoutCompanyInput
    owners?: OwnerCreateNestedManyWithoutCompanyInput
    sites?: SiteCreateNestedManyWithoutCompanyInput
    createdByMember: WorkspaceMemberCreateNestedOneWithoutCompaniesCreatedInput
  }

  export type CompanyUncheckedCreateWithoutWorkspaceInput = {
    id?: number
    name: string
    location: string
    businessNumber?: string | null
    managementNumber?: string | null
    employeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: number
    companyIndustryCodes?: CompanyIndustryCodeUncheckedCreateNestedManyWithoutCompanyInput
    dayLaborers?: DayLaborerUncheckedCreateNestedManyWithoutCompanyInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutCompanyInput
    owners?: OwnerUncheckedCreateNestedManyWithoutCompanyInput
    sites?: SiteUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutWorkspaceInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutWorkspaceInput, CompanyUncheckedCreateWithoutWorkspaceInput>
  }

  export type CompanyCreateManyWorkspaceInputEnvelope = {
    data: CompanyCreateManyWorkspaceInput | CompanyCreateManyWorkspaceInput[]
  }

  export type SiteCreateWithoutWorkspaceInput = {
    name: string
    location: string
    startDate: Date | string
    endDate: Date | string
    managementNumber?: string | null
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutSitesInput
    project?: ProjectCreateNestedOneWithoutSitesInput
    siteAttendances?: SiteAttendanceCreateNestedManyWithoutSiteInput
  }

  export type SiteUncheckedCreateWithoutWorkspaceInput = {
    id?: number
    projectId?: number | null
    companyId: number
    name: string
    location: string
    startDate: Date | string
    endDate: Date | string
    managementNumber?: string | null
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    siteAttendances?: SiteAttendanceUncheckedCreateNestedManyWithoutSiteInput
  }

  export type SiteCreateOrConnectWithoutWorkspaceInput = {
    where: SiteWhereUniqueInput
    create: XOR<SiteCreateWithoutWorkspaceInput, SiteUncheckedCreateWithoutWorkspaceInput>
  }

  export type SiteCreateManyWorkspaceInputEnvelope = {
    data: SiteCreateManyWorkspaceInput | SiteCreateManyWorkspaceInput[]
  }

  export type TalentPoolCreateWithoutWorkspaceInput = {
    name: string
    birthday: Date | string
    phone: string
    address: string
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: ProfileCreateNestedOneWithoutTalentPoolsInput
    employees?: EmployeeCreateNestedManyWithoutTalentPoolInput
    dayLaborers?: DayLaborerCreateNestedManyWithoutTalentPoolInput
    siteAttendances?: SiteAttendanceCreateNestedManyWithoutTalentPoolInput
  }

  export type TalentPoolUncheckedCreateWithoutWorkspaceInput = {
    id?: number
    profileId?: number | null
    name: string
    birthday: Date | string
    phone: string
    address: string
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employees?: EmployeeUncheckedCreateNestedManyWithoutTalentPoolInput
    dayLaborers?: DayLaborerUncheckedCreateNestedManyWithoutTalentPoolInput
    siteAttendances?: SiteAttendanceUncheckedCreateNestedManyWithoutTalentPoolInput
  }

  export type TalentPoolCreateOrConnectWithoutWorkspaceInput = {
    where: TalentPoolWhereUniqueInput
    create: XOR<TalentPoolCreateWithoutWorkspaceInput, TalentPoolUncheckedCreateWithoutWorkspaceInput>
  }

  export type TalentPoolCreateManyWorkspaceInputEnvelope = {
    data: TalentPoolCreateManyWorkspaceInput | TalentPoolCreateManyWorkspaceInput[]
  }

  export type WorkspaceMemberCreateWithoutWorkspaceInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutWorkspaceMembersInput
    profile: ProfileCreateNestedOneWithoutWorkspaceMembersInput
    inviter?: WorkspaceMemberCreateNestedOneWithoutInvitedMembersInput
    owners?: WorkspaceOwnerCreateNestedManyWithoutWorkspaceMemberInput
    companiesCreated?: CompanyCreateNestedManyWithoutCreatedByMemberInput
    invitedMembers?: WorkspaceMemberCreateNestedManyWithoutInviterInput
  }

  export type WorkspaceMemberUncheckedCreateWithoutWorkspaceInput = {
    id?: number
    userId: number
    profileId: number
    inviterId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owners?: WorkspaceOwnerUncheckedCreateNestedManyWithoutWorkspaceMemberInput
    companiesCreated?: CompanyUncheckedCreateNestedManyWithoutCreatedByMemberInput
    invitedMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutInviterInput
  }

  export type WorkspaceMemberCreateOrConnectWithoutWorkspaceInput = {
    where: WorkspaceMemberWhereUniqueInput
    create: XOR<WorkspaceMemberCreateWithoutWorkspaceInput, WorkspaceMemberUncheckedCreateWithoutWorkspaceInput>
  }

  export type WorkspaceMemberCreateManyWorkspaceInputEnvelope = {
    data: WorkspaceMemberCreateManyWorkspaceInput | WorkspaceMemberCreateManyWorkspaceInput[]
  }

  export type WorkspaceOwnerCreateWithoutWorkspaceInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceMember: WorkspaceMemberCreateNestedOneWithoutOwnersInput
  }

  export type WorkspaceOwnerUncheckedCreateWithoutWorkspaceInput = {
    id?: number
    workspaceMemberId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceOwnerCreateOrConnectWithoutWorkspaceInput = {
    where: WorkspaceOwnerWhereUniqueInput
    create: XOR<WorkspaceOwnerCreateWithoutWorkspaceInput, WorkspaceOwnerUncheckedCreateWithoutWorkspaceInput>
  }

  export type WorkspaceOwnerCreateManyWorkspaceInputEnvelope = {
    data: WorkspaceOwnerCreateManyWorkspaceInput | WorkspaceOwnerCreateManyWorkspaceInput[]
  }

  export type ProjectCreateWithoutWorkspaceInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectOwners?: ProjectOwnerCreateNestedManyWithoutProjectInput
    sites?: SiteCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutWorkspaceInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectOwners?: ProjectOwnerUncheckedCreateNestedManyWithoutProjectInput
    sites?: SiteUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutWorkspaceInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutWorkspaceInput, ProjectUncheckedCreateWithoutWorkspaceInput>
  }

  export type ProjectCreateManyWorkspaceInputEnvelope = {
    data: ProjectCreateManyWorkspaceInput | ProjectCreateManyWorkspaceInput[]
  }

  export type CompanyUpsertWithWhereUniqueWithoutWorkspaceInput = {
    where: CompanyWhereUniqueInput
    update: XOR<CompanyUpdateWithoutWorkspaceInput, CompanyUncheckedUpdateWithoutWorkspaceInput>
    create: XOR<CompanyCreateWithoutWorkspaceInput, CompanyUncheckedCreateWithoutWorkspaceInput>
  }

  export type CompanyUpdateWithWhereUniqueWithoutWorkspaceInput = {
    where: CompanyWhereUniqueInput
    data: XOR<CompanyUpdateWithoutWorkspaceInput, CompanyUncheckedUpdateWithoutWorkspaceInput>
  }

  export type CompanyUpdateManyWithWhereWithoutWorkspaceInput = {
    where: CompanyScalarWhereInput
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyWithoutWorkspaceInput>
  }

  export type CompanyScalarWhereInput = {
    AND?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
    OR?: CompanyScalarWhereInput[]
    NOT?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
    id?: IntFilter<"Company"> | number
    workspaceId?: IntFilter<"Company"> | number
    name?: StringFilter<"Company"> | string
    location?: StringFilter<"Company"> | string
    businessNumber?: StringNullableFilter<"Company"> | string | null
    managementNumber?: StringNullableFilter<"Company"> | string | null
    employeeCount?: IntFilter<"Company"> | number
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    createdBy?: IntFilter<"Company"> | number
  }

  export type SiteUpsertWithWhereUniqueWithoutWorkspaceInput = {
    where: SiteWhereUniqueInput
    update: XOR<SiteUpdateWithoutWorkspaceInput, SiteUncheckedUpdateWithoutWorkspaceInput>
    create: XOR<SiteCreateWithoutWorkspaceInput, SiteUncheckedCreateWithoutWorkspaceInput>
  }

  export type SiteUpdateWithWhereUniqueWithoutWorkspaceInput = {
    where: SiteWhereUniqueInput
    data: XOR<SiteUpdateWithoutWorkspaceInput, SiteUncheckedUpdateWithoutWorkspaceInput>
  }

  export type SiteUpdateManyWithWhereWithoutWorkspaceInput = {
    where: SiteScalarWhereInput
    data: XOR<SiteUpdateManyMutationInput, SiteUncheckedUpdateManyWithoutWorkspaceInput>
  }

  export type SiteScalarWhereInput = {
    AND?: SiteScalarWhereInput | SiteScalarWhereInput[]
    OR?: SiteScalarWhereInput[]
    NOT?: SiteScalarWhereInput | SiteScalarWhereInput[]
    id?: IntFilter<"Site"> | number
    workspaceId?: IntFilter<"Site"> | number
    projectId?: IntNullableFilter<"Site"> | number | null
    companyId?: IntFilter<"Site"> | number
    name?: StringFilter<"Site"> | string
    location?: StringFilter<"Site"> | string
    startDate?: DateTimeFilter<"Site"> | Date | string
    endDate?: DateTimeFilter<"Site"> | Date | string
    managementNumber?: StringNullableFilter<"Site"> | string | null
    memo?: StringNullableFilter<"Site"> | string | null
    createdAt?: DateTimeFilter<"Site"> | Date | string
    updatedAt?: DateTimeFilter<"Site"> | Date | string
  }

  export type TalentPoolUpsertWithWhereUniqueWithoutWorkspaceInput = {
    where: TalentPoolWhereUniqueInput
    update: XOR<TalentPoolUpdateWithoutWorkspaceInput, TalentPoolUncheckedUpdateWithoutWorkspaceInput>
    create: XOR<TalentPoolCreateWithoutWorkspaceInput, TalentPoolUncheckedCreateWithoutWorkspaceInput>
  }

  export type TalentPoolUpdateWithWhereUniqueWithoutWorkspaceInput = {
    where: TalentPoolWhereUniqueInput
    data: XOR<TalentPoolUpdateWithoutWorkspaceInput, TalentPoolUncheckedUpdateWithoutWorkspaceInput>
  }

  export type TalentPoolUpdateManyWithWhereWithoutWorkspaceInput = {
    where: TalentPoolScalarWhereInput
    data: XOR<TalentPoolUpdateManyMutationInput, TalentPoolUncheckedUpdateManyWithoutWorkspaceInput>
  }

  export type WorkspaceMemberUpsertWithWhereUniqueWithoutWorkspaceInput = {
    where: WorkspaceMemberWhereUniqueInput
    update: XOR<WorkspaceMemberUpdateWithoutWorkspaceInput, WorkspaceMemberUncheckedUpdateWithoutWorkspaceInput>
    create: XOR<WorkspaceMemberCreateWithoutWorkspaceInput, WorkspaceMemberUncheckedCreateWithoutWorkspaceInput>
  }

  export type WorkspaceMemberUpdateWithWhereUniqueWithoutWorkspaceInput = {
    where: WorkspaceMemberWhereUniqueInput
    data: XOR<WorkspaceMemberUpdateWithoutWorkspaceInput, WorkspaceMemberUncheckedUpdateWithoutWorkspaceInput>
  }

  export type WorkspaceMemberUpdateManyWithWhereWithoutWorkspaceInput = {
    where: WorkspaceMemberScalarWhereInput
    data: XOR<WorkspaceMemberUpdateManyMutationInput, WorkspaceMemberUncheckedUpdateManyWithoutWorkspaceInput>
  }

  export type WorkspaceOwnerUpsertWithWhereUniqueWithoutWorkspaceInput = {
    where: WorkspaceOwnerWhereUniqueInput
    update: XOR<WorkspaceOwnerUpdateWithoutWorkspaceInput, WorkspaceOwnerUncheckedUpdateWithoutWorkspaceInput>
    create: XOR<WorkspaceOwnerCreateWithoutWorkspaceInput, WorkspaceOwnerUncheckedCreateWithoutWorkspaceInput>
  }

  export type WorkspaceOwnerUpdateWithWhereUniqueWithoutWorkspaceInput = {
    where: WorkspaceOwnerWhereUniqueInput
    data: XOR<WorkspaceOwnerUpdateWithoutWorkspaceInput, WorkspaceOwnerUncheckedUpdateWithoutWorkspaceInput>
  }

  export type WorkspaceOwnerUpdateManyWithWhereWithoutWorkspaceInput = {
    where: WorkspaceOwnerScalarWhereInput
    data: XOR<WorkspaceOwnerUpdateManyMutationInput, WorkspaceOwnerUncheckedUpdateManyWithoutWorkspaceInput>
  }

  export type WorkspaceOwnerScalarWhereInput = {
    AND?: WorkspaceOwnerScalarWhereInput | WorkspaceOwnerScalarWhereInput[]
    OR?: WorkspaceOwnerScalarWhereInput[]
    NOT?: WorkspaceOwnerScalarWhereInput | WorkspaceOwnerScalarWhereInput[]
    id?: IntFilter<"WorkspaceOwner"> | number
    workspaceId?: IntFilter<"WorkspaceOwner"> | number
    workspaceMemberId?: IntFilter<"WorkspaceOwner"> | number
    createdAt?: DateTimeFilter<"WorkspaceOwner"> | Date | string
    updatedAt?: DateTimeFilter<"WorkspaceOwner"> | Date | string
  }

  export type ProjectUpsertWithWhereUniqueWithoutWorkspaceInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutWorkspaceInput, ProjectUncheckedUpdateWithoutWorkspaceInput>
    create: XOR<ProjectCreateWithoutWorkspaceInput, ProjectUncheckedCreateWithoutWorkspaceInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutWorkspaceInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutWorkspaceInput, ProjectUncheckedUpdateWithoutWorkspaceInput>
  }

  export type ProjectUpdateManyWithWhereWithoutWorkspaceInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutWorkspaceInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    OR?: ProjectScalarWhereInput[]
    NOT?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    id?: IntFilter<"Project"> | number
    workspaceId?: IntFilter<"Project"> | number
    name?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
  }

  export type WorkspaceCreateWithoutWorkspaceMembersInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companies?: CompanyCreateNestedManyWithoutWorkspaceInput
    sites?: SiteCreateNestedManyWithoutWorkspaceInput
    talentPools?: TalentPoolCreateNestedManyWithoutWorkspaceInput
    workspaceOwners?: WorkspaceOwnerCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUncheckedCreateWithoutWorkspaceMembersInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companies?: CompanyUncheckedCreateNestedManyWithoutWorkspaceInput
    sites?: SiteUncheckedCreateNestedManyWithoutWorkspaceInput
    talentPools?: TalentPoolUncheckedCreateNestedManyWithoutWorkspaceInput
    workspaceOwners?: WorkspaceOwnerUncheckedCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceCreateOrConnectWithoutWorkspaceMembersInput = {
    where: WorkspaceWhereUniqueInput
    create: XOR<WorkspaceCreateWithoutWorkspaceMembersInput, WorkspaceUncheckedCreateWithoutWorkspaceMembersInput>
  }

  export type UserCreateWithoutWorkspaceMembersInput = {
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryProfile?: PrimaryProfileCreateNestedOneWithoutUserInput
    profiles?: ProfileCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWorkspaceMembersInput = {
    id?: number
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryProfile?: PrimaryProfileUncheckedCreateNestedOneWithoutUserInput
    profiles?: ProfileUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWorkspaceMembersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkspaceMembersInput, UserUncheckedCreateWithoutWorkspaceMembersInput>
  }

  export type ProfileCreateWithoutWorkspaceMembersInput = {
    name: string
    birthday?: Date | string | null
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutProfilesInput
    talentPools?: TalentPoolCreateNestedManyWithoutProfileInput
    primaryProfile?: PrimaryProfileCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutWorkspaceMembersInput = {
    id?: number
    userId?: number | null
    name: string
    birthday?: Date | string | null
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    talentPools?: TalentPoolUncheckedCreateNestedManyWithoutProfileInput
    primaryProfile?: PrimaryProfileUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutWorkspaceMembersInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutWorkspaceMembersInput, ProfileUncheckedCreateWithoutWorkspaceMembersInput>
  }

  export type WorkspaceMemberCreateWithoutInvitedMembersInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutWorkspaceMembersInput
    user: UserCreateNestedOneWithoutWorkspaceMembersInput
    profile: ProfileCreateNestedOneWithoutWorkspaceMembersInput
    inviter?: WorkspaceMemberCreateNestedOneWithoutInvitedMembersInput
    owners?: WorkspaceOwnerCreateNestedManyWithoutWorkspaceMemberInput
    companiesCreated?: CompanyCreateNestedManyWithoutCreatedByMemberInput
  }

  export type WorkspaceMemberUncheckedCreateWithoutInvitedMembersInput = {
    id?: number
    workspaceId: number
    userId: number
    profileId: number
    inviterId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owners?: WorkspaceOwnerUncheckedCreateNestedManyWithoutWorkspaceMemberInput
    companiesCreated?: CompanyUncheckedCreateNestedManyWithoutCreatedByMemberInput
  }

  export type WorkspaceMemberCreateOrConnectWithoutInvitedMembersInput = {
    where: WorkspaceMemberWhereUniqueInput
    create: XOR<WorkspaceMemberCreateWithoutInvitedMembersInput, WorkspaceMemberUncheckedCreateWithoutInvitedMembersInput>
  }

  export type WorkspaceOwnerCreateWithoutWorkspaceMemberInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutWorkspaceOwnersInput
  }

  export type WorkspaceOwnerUncheckedCreateWithoutWorkspaceMemberInput = {
    id?: number
    workspaceId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceOwnerCreateOrConnectWithoutWorkspaceMemberInput = {
    where: WorkspaceOwnerWhereUniqueInput
    create: XOR<WorkspaceOwnerCreateWithoutWorkspaceMemberInput, WorkspaceOwnerUncheckedCreateWithoutWorkspaceMemberInput>
  }

  export type WorkspaceOwnerCreateManyWorkspaceMemberInputEnvelope = {
    data: WorkspaceOwnerCreateManyWorkspaceMemberInput | WorkspaceOwnerCreateManyWorkspaceMemberInput[]
  }

  export type CompanyCreateWithoutCreatedByMemberInput = {
    name: string
    location: string
    businessNumber?: string | null
    managementNumber?: string | null
    employeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutCompaniesInput
    companyIndustryCodes?: CompanyIndustryCodeCreateNestedManyWithoutCompanyInput
    dayLaborers?: DayLaborerCreateNestedManyWithoutCompanyInput
    employees?: EmployeeCreateNestedManyWithoutCompanyInput
    owners?: OwnerCreateNestedManyWithoutCompanyInput
    sites?: SiteCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutCreatedByMemberInput = {
    id?: number
    workspaceId: number
    name: string
    location: string
    businessNumber?: string | null
    managementNumber?: string | null
    employeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    companyIndustryCodes?: CompanyIndustryCodeUncheckedCreateNestedManyWithoutCompanyInput
    dayLaborers?: DayLaborerUncheckedCreateNestedManyWithoutCompanyInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutCompanyInput
    owners?: OwnerUncheckedCreateNestedManyWithoutCompanyInput
    sites?: SiteUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutCreatedByMemberInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutCreatedByMemberInput, CompanyUncheckedCreateWithoutCreatedByMemberInput>
  }

  export type CompanyCreateManyCreatedByMemberInputEnvelope = {
    data: CompanyCreateManyCreatedByMemberInput | CompanyCreateManyCreatedByMemberInput[]
  }

  export type WorkspaceMemberCreateWithoutInviterInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutWorkspaceMembersInput
    user: UserCreateNestedOneWithoutWorkspaceMembersInput
    profile: ProfileCreateNestedOneWithoutWorkspaceMembersInput
    owners?: WorkspaceOwnerCreateNestedManyWithoutWorkspaceMemberInput
    companiesCreated?: CompanyCreateNestedManyWithoutCreatedByMemberInput
    invitedMembers?: WorkspaceMemberCreateNestedManyWithoutInviterInput
  }

  export type WorkspaceMemberUncheckedCreateWithoutInviterInput = {
    id?: number
    workspaceId: number
    userId: number
    profileId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    owners?: WorkspaceOwnerUncheckedCreateNestedManyWithoutWorkspaceMemberInput
    companiesCreated?: CompanyUncheckedCreateNestedManyWithoutCreatedByMemberInput
    invitedMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutInviterInput
  }

  export type WorkspaceMemberCreateOrConnectWithoutInviterInput = {
    where: WorkspaceMemberWhereUniqueInput
    create: XOR<WorkspaceMemberCreateWithoutInviterInput, WorkspaceMemberUncheckedCreateWithoutInviterInput>
  }

  export type WorkspaceMemberCreateManyInviterInputEnvelope = {
    data: WorkspaceMemberCreateManyInviterInput | WorkspaceMemberCreateManyInviterInput[]
  }

  export type WorkspaceUpsertWithoutWorkspaceMembersInput = {
    update: XOR<WorkspaceUpdateWithoutWorkspaceMembersInput, WorkspaceUncheckedUpdateWithoutWorkspaceMembersInput>
    create: XOR<WorkspaceCreateWithoutWorkspaceMembersInput, WorkspaceUncheckedCreateWithoutWorkspaceMembersInput>
    where?: WorkspaceWhereInput
  }

  export type WorkspaceUpdateToOneWithWhereWithoutWorkspaceMembersInput = {
    where?: WorkspaceWhereInput
    data: XOR<WorkspaceUpdateWithoutWorkspaceMembersInput, WorkspaceUncheckedUpdateWithoutWorkspaceMembersInput>
  }

  export type WorkspaceUpdateWithoutWorkspaceMembersInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: CompanyUpdateManyWithoutWorkspaceNestedInput
    sites?: SiteUpdateManyWithoutWorkspaceNestedInput
    talentPools?: TalentPoolUpdateManyWithoutWorkspaceNestedInput
    workspaceOwners?: WorkspaceOwnerUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateWithoutWorkspaceMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: CompanyUncheckedUpdateManyWithoutWorkspaceNestedInput
    sites?: SiteUncheckedUpdateManyWithoutWorkspaceNestedInput
    talentPools?: TalentPoolUncheckedUpdateManyWithoutWorkspaceNestedInput
    workspaceOwners?: WorkspaceOwnerUncheckedUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type UserUpsertWithoutWorkspaceMembersInput = {
    update: XOR<UserUpdateWithoutWorkspaceMembersInput, UserUncheckedUpdateWithoutWorkspaceMembersInput>
    create: XOR<UserCreateWithoutWorkspaceMembersInput, UserUncheckedCreateWithoutWorkspaceMembersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkspaceMembersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkspaceMembersInput, UserUncheckedUpdateWithoutWorkspaceMembersInput>
  }

  export type UserUpdateWithoutWorkspaceMembersInput = {
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryProfile?: PrimaryProfileUpdateOneWithoutUserNestedInput
    profiles?: ProfileUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkspaceMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryProfile?: PrimaryProfileUncheckedUpdateOneWithoutUserNestedInput
    profiles?: ProfileUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProfileUpsertWithoutWorkspaceMembersInput = {
    update: XOR<ProfileUpdateWithoutWorkspaceMembersInput, ProfileUncheckedUpdateWithoutWorkspaceMembersInput>
    create: XOR<ProfileCreateWithoutWorkspaceMembersInput, ProfileUncheckedCreateWithoutWorkspaceMembersInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutWorkspaceMembersInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutWorkspaceMembersInput, ProfileUncheckedUpdateWithoutWorkspaceMembersInput>
  }

  export type ProfileUpdateWithoutWorkspaceMembersInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutProfilesNestedInput
    talentPools?: TalentPoolUpdateManyWithoutProfileNestedInput
    primaryProfile?: PrimaryProfileUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutWorkspaceMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    talentPools?: TalentPoolUncheckedUpdateManyWithoutProfileNestedInput
    primaryProfile?: PrimaryProfileUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type WorkspaceMemberUpsertWithoutInvitedMembersInput = {
    update: XOR<WorkspaceMemberUpdateWithoutInvitedMembersInput, WorkspaceMemberUncheckedUpdateWithoutInvitedMembersInput>
    create: XOR<WorkspaceMemberCreateWithoutInvitedMembersInput, WorkspaceMemberUncheckedCreateWithoutInvitedMembersInput>
    where?: WorkspaceMemberWhereInput
  }

  export type WorkspaceMemberUpdateToOneWithWhereWithoutInvitedMembersInput = {
    where?: WorkspaceMemberWhereInput
    data: XOR<WorkspaceMemberUpdateWithoutInvitedMembersInput, WorkspaceMemberUncheckedUpdateWithoutInvitedMembersInput>
  }

  export type WorkspaceMemberUpdateWithoutInvitedMembersInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutWorkspaceMembersNestedInput
    user?: UserUpdateOneRequiredWithoutWorkspaceMembersNestedInput
    profile?: ProfileUpdateOneRequiredWithoutWorkspaceMembersNestedInput
    inviter?: WorkspaceMemberUpdateOneWithoutInvitedMembersNestedInput
    owners?: WorkspaceOwnerUpdateManyWithoutWorkspaceMemberNestedInput
    companiesCreated?: CompanyUpdateManyWithoutCreatedByMemberNestedInput
  }

  export type WorkspaceMemberUncheckedUpdateWithoutInvitedMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    profileId?: IntFieldUpdateOperationsInput | number
    inviterId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owners?: WorkspaceOwnerUncheckedUpdateManyWithoutWorkspaceMemberNestedInput
    companiesCreated?: CompanyUncheckedUpdateManyWithoutCreatedByMemberNestedInput
  }

  export type WorkspaceOwnerUpsertWithWhereUniqueWithoutWorkspaceMemberInput = {
    where: WorkspaceOwnerWhereUniqueInput
    update: XOR<WorkspaceOwnerUpdateWithoutWorkspaceMemberInput, WorkspaceOwnerUncheckedUpdateWithoutWorkspaceMemberInput>
    create: XOR<WorkspaceOwnerCreateWithoutWorkspaceMemberInput, WorkspaceOwnerUncheckedCreateWithoutWorkspaceMemberInput>
  }

  export type WorkspaceOwnerUpdateWithWhereUniqueWithoutWorkspaceMemberInput = {
    where: WorkspaceOwnerWhereUniqueInput
    data: XOR<WorkspaceOwnerUpdateWithoutWorkspaceMemberInput, WorkspaceOwnerUncheckedUpdateWithoutWorkspaceMemberInput>
  }

  export type WorkspaceOwnerUpdateManyWithWhereWithoutWorkspaceMemberInput = {
    where: WorkspaceOwnerScalarWhereInput
    data: XOR<WorkspaceOwnerUpdateManyMutationInput, WorkspaceOwnerUncheckedUpdateManyWithoutWorkspaceMemberInput>
  }

  export type CompanyUpsertWithWhereUniqueWithoutCreatedByMemberInput = {
    where: CompanyWhereUniqueInput
    update: XOR<CompanyUpdateWithoutCreatedByMemberInput, CompanyUncheckedUpdateWithoutCreatedByMemberInput>
    create: XOR<CompanyCreateWithoutCreatedByMemberInput, CompanyUncheckedCreateWithoutCreatedByMemberInput>
  }

  export type CompanyUpdateWithWhereUniqueWithoutCreatedByMemberInput = {
    where: CompanyWhereUniqueInput
    data: XOR<CompanyUpdateWithoutCreatedByMemberInput, CompanyUncheckedUpdateWithoutCreatedByMemberInput>
  }

  export type CompanyUpdateManyWithWhereWithoutCreatedByMemberInput = {
    where: CompanyScalarWhereInput
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyWithoutCreatedByMemberInput>
  }

  export type WorkspaceMemberUpsertWithWhereUniqueWithoutInviterInput = {
    where: WorkspaceMemberWhereUniqueInput
    update: XOR<WorkspaceMemberUpdateWithoutInviterInput, WorkspaceMemberUncheckedUpdateWithoutInviterInput>
    create: XOR<WorkspaceMemberCreateWithoutInviterInput, WorkspaceMemberUncheckedCreateWithoutInviterInput>
  }

  export type WorkspaceMemberUpdateWithWhereUniqueWithoutInviterInput = {
    where: WorkspaceMemberWhereUniqueInput
    data: XOR<WorkspaceMemberUpdateWithoutInviterInput, WorkspaceMemberUncheckedUpdateWithoutInviterInput>
  }

  export type WorkspaceMemberUpdateManyWithWhereWithoutInviterInput = {
    where: WorkspaceMemberScalarWhereInput
    data: XOR<WorkspaceMemberUpdateManyMutationInput, WorkspaceMemberUncheckedUpdateManyWithoutInviterInput>
  }

  export type WorkspaceCreateWithoutWorkspaceOwnersInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companies?: CompanyCreateNestedManyWithoutWorkspaceInput
    sites?: SiteCreateNestedManyWithoutWorkspaceInput
    talentPools?: TalentPoolCreateNestedManyWithoutWorkspaceInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUncheckedCreateWithoutWorkspaceOwnersInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companies?: CompanyUncheckedCreateNestedManyWithoutWorkspaceInput
    sites?: SiteUncheckedCreateNestedManyWithoutWorkspaceInput
    talentPools?: TalentPoolUncheckedCreateNestedManyWithoutWorkspaceInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceCreateOrConnectWithoutWorkspaceOwnersInput = {
    where: WorkspaceWhereUniqueInput
    create: XOR<WorkspaceCreateWithoutWorkspaceOwnersInput, WorkspaceUncheckedCreateWithoutWorkspaceOwnersInput>
  }

  export type WorkspaceMemberCreateWithoutOwnersInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutWorkspaceMembersInput
    user: UserCreateNestedOneWithoutWorkspaceMembersInput
    profile: ProfileCreateNestedOneWithoutWorkspaceMembersInput
    inviter?: WorkspaceMemberCreateNestedOneWithoutInvitedMembersInput
    companiesCreated?: CompanyCreateNestedManyWithoutCreatedByMemberInput
    invitedMembers?: WorkspaceMemberCreateNestedManyWithoutInviterInput
  }

  export type WorkspaceMemberUncheckedCreateWithoutOwnersInput = {
    id?: number
    workspaceId: number
    userId: number
    profileId: number
    inviterId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    companiesCreated?: CompanyUncheckedCreateNestedManyWithoutCreatedByMemberInput
    invitedMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutInviterInput
  }

  export type WorkspaceMemberCreateOrConnectWithoutOwnersInput = {
    where: WorkspaceMemberWhereUniqueInput
    create: XOR<WorkspaceMemberCreateWithoutOwnersInput, WorkspaceMemberUncheckedCreateWithoutOwnersInput>
  }

  export type WorkspaceUpsertWithoutWorkspaceOwnersInput = {
    update: XOR<WorkspaceUpdateWithoutWorkspaceOwnersInput, WorkspaceUncheckedUpdateWithoutWorkspaceOwnersInput>
    create: XOR<WorkspaceCreateWithoutWorkspaceOwnersInput, WorkspaceUncheckedCreateWithoutWorkspaceOwnersInput>
    where?: WorkspaceWhereInput
  }

  export type WorkspaceUpdateToOneWithWhereWithoutWorkspaceOwnersInput = {
    where?: WorkspaceWhereInput
    data: XOR<WorkspaceUpdateWithoutWorkspaceOwnersInput, WorkspaceUncheckedUpdateWithoutWorkspaceOwnersInput>
  }

  export type WorkspaceUpdateWithoutWorkspaceOwnersInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: CompanyUpdateManyWithoutWorkspaceNestedInput
    sites?: SiteUpdateManyWithoutWorkspaceNestedInput
    talentPools?: TalentPoolUpdateManyWithoutWorkspaceNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateWithoutWorkspaceOwnersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: CompanyUncheckedUpdateManyWithoutWorkspaceNestedInput
    sites?: SiteUncheckedUpdateManyWithoutWorkspaceNestedInput
    talentPools?: TalentPoolUncheckedUpdateManyWithoutWorkspaceNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceMemberUpsertWithoutOwnersInput = {
    update: XOR<WorkspaceMemberUpdateWithoutOwnersInput, WorkspaceMemberUncheckedUpdateWithoutOwnersInput>
    create: XOR<WorkspaceMemberCreateWithoutOwnersInput, WorkspaceMemberUncheckedCreateWithoutOwnersInput>
    where?: WorkspaceMemberWhereInput
  }

  export type WorkspaceMemberUpdateToOneWithWhereWithoutOwnersInput = {
    where?: WorkspaceMemberWhereInput
    data: XOR<WorkspaceMemberUpdateWithoutOwnersInput, WorkspaceMemberUncheckedUpdateWithoutOwnersInput>
  }

  export type WorkspaceMemberUpdateWithoutOwnersInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutWorkspaceMembersNestedInput
    user?: UserUpdateOneRequiredWithoutWorkspaceMembersNestedInput
    profile?: ProfileUpdateOneRequiredWithoutWorkspaceMembersNestedInput
    inviter?: WorkspaceMemberUpdateOneWithoutInvitedMembersNestedInput
    companiesCreated?: CompanyUpdateManyWithoutCreatedByMemberNestedInput
    invitedMembers?: WorkspaceMemberUpdateManyWithoutInviterNestedInput
  }

  export type WorkspaceMemberUncheckedUpdateWithoutOwnersInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    profileId?: IntFieldUpdateOperationsInput | number
    inviterId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companiesCreated?: CompanyUncheckedUpdateManyWithoutCreatedByMemberNestedInput
    invitedMembers?: WorkspaceMemberUncheckedUpdateManyWithoutInviterNestedInput
  }

  export type WorkspaceCreateWithoutCompaniesInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sites?: SiteCreateNestedManyWithoutWorkspaceInput
    talentPools?: TalentPoolCreateNestedManyWithoutWorkspaceInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutWorkspaceInput
    workspaceOwners?: WorkspaceOwnerCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUncheckedCreateWithoutCompaniesInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sites?: SiteUncheckedCreateNestedManyWithoutWorkspaceInput
    talentPools?: TalentPoolUncheckedCreateNestedManyWithoutWorkspaceInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutWorkspaceInput
    workspaceOwners?: WorkspaceOwnerUncheckedCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceCreateOrConnectWithoutCompaniesInput = {
    where: WorkspaceWhereUniqueInput
    create: XOR<WorkspaceCreateWithoutCompaniesInput, WorkspaceUncheckedCreateWithoutCompaniesInput>
  }

  export type CompanyIndustryCodeCreateWithoutCompanyInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    industrialAccidentInsurancePremiumRate: IndustrialAccidentInsurancePremiumRateCreateNestedOneWithoutCompanyIndustryCodesInput
  }

  export type CompanyIndustryCodeUncheckedCreateWithoutCompanyInput = {
    id?: number
    industryCode: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyIndustryCodeCreateOrConnectWithoutCompanyInput = {
    where: CompanyIndustryCodeWhereUniqueInput
    create: XOR<CompanyIndustryCodeCreateWithoutCompanyInput, CompanyIndustryCodeUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyIndustryCodeCreateManyCompanyInputEnvelope = {
    data: CompanyIndustryCodeCreateManyCompanyInput | CompanyIndustryCodeCreateManyCompanyInput[]
  }

  export type DayLaborerCreateWithoutCompanyInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    talentPool: TalentPoolCreateNestedOneWithoutDayLaborersInput
  }

  export type DayLaborerUncheckedCreateWithoutCompanyInput = {
    id?: number
    talentPoolId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DayLaborerCreateOrConnectWithoutCompanyInput = {
    where: DayLaborerWhereUniqueInput
    create: XOR<DayLaborerCreateWithoutCompanyInput, DayLaborerUncheckedCreateWithoutCompanyInput>
  }

  export type DayLaborerCreateManyCompanyInputEnvelope = {
    data: DayLaborerCreateManyCompanyInput | DayLaborerCreateManyCompanyInput[]
  }

  export type EmployeeCreateWithoutCompanyInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    talentPool: TalentPoolCreateNestedOneWithoutEmployeesInput
    owners?: OwnerCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutCompanyInput = {
    id?: number
    talentPoolId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    owners?: OwnerUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutCompanyInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCompanyInput, EmployeeUncheckedCreateWithoutCompanyInput>
  }

  export type EmployeeCreateManyCompanyInputEnvelope = {
    data: EmployeeCreateManyCompanyInput | EmployeeCreateManyCompanyInput[]
  }

  export type OwnerCreateWithoutCompanyInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutOwnersInput
  }

  export type OwnerUncheckedCreateWithoutCompanyInput = {
    id?: number
    employeeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OwnerCreateOrConnectWithoutCompanyInput = {
    where: OwnerWhereUniqueInput
    create: XOR<OwnerCreateWithoutCompanyInput, OwnerUncheckedCreateWithoutCompanyInput>
  }

  export type OwnerCreateManyCompanyInputEnvelope = {
    data: OwnerCreateManyCompanyInput | OwnerCreateManyCompanyInput[]
  }

  export type SiteCreateWithoutCompanyInput = {
    name: string
    location: string
    startDate: Date | string
    endDate: Date | string
    managementNumber?: string | null
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutSitesInput
    project?: ProjectCreateNestedOneWithoutSitesInput
    siteAttendances?: SiteAttendanceCreateNestedManyWithoutSiteInput
  }

  export type SiteUncheckedCreateWithoutCompanyInput = {
    id?: number
    workspaceId: number
    projectId?: number | null
    name: string
    location: string
    startDate: Date | string
    endDate: Date | string
    managementNumber?: string | null
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    siteAttendances?: SiteAttendanceUncheckedCreateNestedManyWithoutSiteInput
  }

  export type SiteCreateOrConnectWithoutCompanyInput = {
    where: SiteWhereUniqueInput
    create: XOR<SiteCreateWithoutCompanyInput, SiteUncheckedCreateWithoutCompanyInput>
  }

  export type SiteCreateManyCompanyInputEnvelope = {
    data: SiteCreateManyCompanyInput | SiteCreateManyCompanyInput[]
  }

  export type WorkspaceMemberCreateWithoutCompaniesCreatedInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutWorkspaceMembersInput
    user: UserCreateNestedOneWithoutWorkspaceMembersInput
    profile: ProfileCreateNestedOneWithoutWorkspaceMembersInput
    inviter?: WorkspaceMemberCreateNestedOneWithoutInvitedMembersInput
    owners?: WorkspaceOwnerCreateNestedManyWithoutWorkspaceMemberInput
    invitedMembers?: WorkspaceMemberCreateNestedManyWithoutInviterInput
  }

  export type WorkspaceMemberUncheckedCreateWithoutCompaniesCreatedInput = {
    id?: number
    workspaceId: number
    userId: number
    profileId: number
    inviterId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owners?: WorkspaceOwnerUncheckedCreateNestedManyWithoutWorkspaceMemberInput
    invitedMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutInviterInput
  }

  export type WorkspaceMemberCreateOrConnectWithoutCompaniesCreatedInput = {
    where: WorkspaceMemberWhereUniqueInput
    create: XOR<WorkspaceMemberCreateWithoutCompaniesCreatedInput, WorkspaceMemberUncheckedCreateWithoutCompaniesCreatedInput>
  }

  export type WorkspaceUpsertWithoutCompaniesInput = {
    update: XOR<WorkspaceUpdateWithoutCompaniesInput, WorkspaceUncheckedUpdateWithoutCompaniesInput>
    create: XOR<WorkspaceCreateWithoutCompaniesInput, WorkspaceUncheckedCreateWithoutCompaniesInput>
    where?: WorkspaceWhereInput
  }

  export type WorkspaceUpdateToOneWithWhereWithoutCompaniesInput = {
    where?: WorkspaceWhereInput
    data: XOR<WorkspaceUpdateWithoutCompaniesInput, WorkspaceUncheckedUpdateWithoutCompaniesInput>
  }

  export type WorkspaceUpdateWithoutCompaniesInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sites?: SiteUpdateManyWithoutWorkspaceNestedInput
    talentPools?: TalentPoolUpdateManyWithoutWorkspaceNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutWorkspaceNestedInput
    workspaceOwners?: WorkspaceOwnerUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateWithoutCompaniesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sites?: SiteUncheckedUpdateManyWithoutWorkspaceNestedInput
    talentPools?: TalentPoolUncheckedUpdateManyWithoutWorkspaceNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutWorkspaceNestedInput
    workspaceOwners?: WorkspaceOwnerUncheckedUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type CompanyIndustryCodeUpsertWithWhereUniqueWithoutCompanyInput = {
    where: CompanyIndustryCodeWhereUniqueInput
    update: XOR<CompanyIndustryCodeUpdateWithoutCompanyInput, CompanyIndustryCodeUncheckedUpdateWithoutCompanyInput>
    create: XOR<CompanyIndustryCodeCreateWithoutCompanyInput, CompanyIndustryCodeUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyIndustryCodeUpdateWithWhereUniqueWithoutCompanyInput = {
    where: CompanyIndustryCodeWhereUniqueInput
    data: XOR<CompanyIndustryCodeUpdateWithoutCompanyInput, CompanyIndustryCodeUncheckedUpdateWithoutCompanyInput>
  }

  export type CompanyIndustryCodeUpdateManyWithWhereWithoutCompanyInput = {
    where: CompanyIndustryCodeScalarWhereInput
    data: XOR<CompanyIndustryCodeUpdateManyMutationInput, CompanyIndustryCodeUncheckedUpdateManyWithoutCompanyInput>
  }

  export type CompanyIndustryCodeScalarWhereInput = {
    AND?: CompanyIndustryCodeScalarWhereInput | CompanyIndustryCodeScalarWhereInput[]
    OR?: CompanyIndustryCodeScalarWhereInput[]
    NOT?: CompanyIndustryCodeScalarWhereInput | CompanyIndustryCodeScalarWhereInput[]
    id?: IntFilter<"CompanyIndustryCode"> | number
    companyId?: IntFilter<"CompanyIndustryCode"> | number
    industryCode?: IntFilter<"CompanyIndustryCode"> | number
    createdAt?: DateTimeFilter<"CompanyIndustryCode"> | Date | string
    updatedAt?: DateTimeFilter<"CompanyIndustryCode"> | Date | string
  }

  export type DayLaborerUpsertWithWhereUniqueWithoutCompanyInput = {
    where: DayLaborerWhereUniqueInput
    update: XOR<DayLaborerUpdateWithoutCompanyInput, DayLaborerUncheckedUpdateWithoutCompanyInput>
    create: XOR<DayLaborerCreateWithoutCompanyInput, DayLaborerUncheckedCreateWithoutCompanyInput>
  }

  export type DayLaborerUpdateWithWhereUniqueWithoutCompanyInput = {
    where: DayLaborerWhereUniqueInput
    data: XOR<DayLaborerUpdateWithoutCompanyInput, DayLaborerUncheckedUpdateWithoutCompanyInput>
  }

  export type DayLaborerUpdateManyWithWhereWithoutCompanyInput = {
    where: DayLaborerScalarWhereInput
    data: XOR<DayLaborerUpdateManyMutationInput, DayLaborerUncheckedUpdateManyWithoutCompanyInput>
  }

  export type DayLaborerScalarWhereInput = {
    AND?: DayLaborerScalarWhereInput | DayLaborerScalarWhereInput[]
    OR?: DayLaborerScalarWhereInput[]
    NOT?: DayLaborerScalarWhereInput | DayLaborerScalarWhereInput[]
    id?: IntFilter<"DayLaborer"> | number
    talentPoolId?: IntFilter<"DayLaborer"> | number
    companyId?: IntFilter<"DayLaborer"> | number
    createdAt?: DateTimeFilter<"DayLaborer"> | Date | string
    updatedAt?: DateTimeFilter<"DayLaborer"> | Date | string
  }

  export type EmployeeUpsertWithWhereUniqueWithoutCompanyInput = {
    where: EmployeeWhereUniqueInput
    update: XOR<EmployeeUpdateWithoutCompanyInput, EmployeeUncheckedUpdateWithoutCompanyInput>
    create: XOR<EmployeeCreateWithoutCompanyInput, EmployeeUncheckedCreateWithoutCompanyInput>
  }

  export type EmployeeUpdateWithWhereUniqueWithoutCompanyInput = {
    where: EmployeeWhereUniqueInput
    data: XOR<EmployeeUpdateWithoutCompanyInput, EmployeeUncheckedUpdateWithoutCompanyInput>
  }

  export type EmployeeUpdateManyWithWhereWithoutCompanyInput = {
    where: EmployeeScalarWhereInput
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyWithoutCompanyInput>
  }

  export type EmployeeScalarWhereInput = {
    AND?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    OR?: EmployeeScalarWhereInput[]
    NOT?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    id?: IntFilter<"Employee"> | number
    talentPoolId?: IntFilter<"Employee"> | number
    companyId?: IntFilter<"Employee"> | number
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
  }

  export type OwnerUpsertWithWhereUniqueWithoutCompanyInput = {
    where: OwnerWhereUniqueInput
    update: XOR<OwnerUpdateWithoutCompanyInput, OwnerUncheckedUpdateWithoutCompanyInput>
    create: XOR<OwnerCreateWithoutCompanyInput, OwnerUncheckedCreateWithoutCompanyInput>
  }

  export type OwnerUpdateWithWhereUniqueWithoutCompanyInput = {
    where: OwnerWhereUniqueInput
    data: XOR<OwnerUpdateWithoutCompanyInput, OwnerUncheckedUpdateWithoutCompanyInput>
  }

  export type OwnerUpdateManyWithWhereWithoutCompanyInput = {
    where: OwnerScalarWhereInput
    data: XOR<OwnerUpdateManyMutationInput, OwnerUncheckedUpdateManyWithoutCompanyInput>
  }

  export type OwnerScalarWhereInput = {
    AND?: OwnerScalarWhereInput | OwnerScalarWhereInput[]
    OR?: OwnerScalarWhereInput[]
    NOT?: OwnerScalarWhereInput | OwnerScalarWhereInput[]
    id?: IntFilter<"Owner"> | number
    employeeId?: IntFilter<"Owner"> | number
    companyId?: IntFilter<"Owner"> | number
    createdAt?: DateTimeFilter<"Owner"> | Date | string
    updatedAt?: DateTimeFilter<"Owner"> | Date | string
  }

  export type SiteUpsertWithWhereUniqueWithoutCompanyInput = {
    where: SiteWhereUniqueInput
    update: XOR<SiteUpdateWithoutCompanyInput, SiteUncheckedUpdateWithoutCompanyInput>
    create: XOR<SiteCreateWithoutCompanyInput, SiteUncheckedCreateWithoutCompanyInput>
  }

  export type SiteUpdateWithWhereUniqueWithoutCompanyInput = {
    where: SiteWhereUniqueInput
    data: XOR<SiteUpdateWithoutCompanyInput, SiteUncheckedUpdateWithoutCompanyInput>
  }

  export type SiteUpdateManyWithWhereWithoutCompanyInput = {
    where: SiteScalarWhereInput
    data: XOR<SiteUpdateManyMutationInput, SiteUncheckedUpdateManyWithoutCompanyInput>
  }

  export type WorkspaceMemberUpsertWithoutCompaniesCreatedInput = {
    update: XOR<WorkspaceMemberUpdateWithoutCompaniesCreatedInput, WorkspaceMemberUncheckedUpdateWithoutCompaniesCreatedInput>
    create: XOR<WorkspaceMemberCreateWithoutCompaniesCreatedInput, WorkspaceMemberUncheckedCreateWithoutCompaniesCreatedInput>
    where?: WorkspaceMemberWhereInput
  }

  export type WorkspaceMemberUpdateToOneWithWhereWithoutCompaniesCreatedInput = {
    where?: WorkspaceMemberWhereInput
    data: XOR<WorkspaceMemberUpdateWithoutCompaniesCreatedInput, WorkspaceMemberUncheckedUpdateWithoutCompaniesCreatedInput>
  }

  export type WorkspaceMemberUpdateWithoutCompaniesCreatedInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutWorkspaceMembersNestedInput
    user?: UserUpdateOneRequiredWithoutWorkspaceMembersNestedInput
    profile?: ProfileUpdateOneRequiredWithoutWorkspaceMembersNestedInput
    inviter?: WorkspaceMemberUpdateOneWithoutInvitedMembersNestedInput
    owners?: WorkspaceOwnerUpdateManyWithoutWorkspaceMemberNestedInput
    invitedMembers?: WorkspaceMemberUpdateManyWithoutInviterNestedInput
  }

  export type WorkspaceMemberUncheckedUpdateWithoutCompaniesCreatedInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    profileId?: IntFieldUpdateOperationsInput | number
    inviterId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owners?: WorkspaceOwnerUncheckedUpdateManyWithoutWorkspaceMemberNestedInput
    invitedMembers?: WorkspaceMemberUncheckedUpdateManyWithoutInviterNestedInput
  }

  export type CompanyCreateWithoutEmployeesInput = {
    name: string
    location: string
    businessNumber?: string | null
    managementNumber?: string | null
    employeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutCompaniesInput
    companyIndustryCodes?: CompanyIndustryCodeCreateNestedManyWithoutCompanyInput
    dayLaborers?: DayLaborerCreateNestedManyWithoutCompanyInput
    owners?: OwnerCreateNestedManyWithoutCompanyInput
    sites?: SiteCreateNestedManyWithoutCompanyInput
    createdByMember: WorkspaceMemberCreateNestedOneWithoutCompaniesCreatedInput
  }

  export type CompanyUncheckedCreateWithoutEmployeesInput = {
    id?: number
    workspaceId: number
    name: string
    location: string
    businessNumber?: string | null
    managementNumber?: string | null
    employeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: number
    companyIndustryCodes?: CompanyIndustryCodeUncheckedCreateNestedManyWithoutCompanyInput
    dayLaborers?: DayLaborerUncheckedCreateNestedManyWithoutCompanyInput
    owners?: OwnerUncheckedCreateNestedManyWithoutCompanyInput
    sites?: SiteUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutEmployeesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutEmployeesInput, CompanyUncheckedCreateWithoutEmployeesInput>
  }

  export type TalentPoolCreateWithoutEmployeesInput = {
    name: string
    birthday: Date | string
    phone: string
    address: string
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutTalentPoolsInput
    profile?: ProfileCreateNestedOneWithoutTalentPoolsInput
    dayLaborers?: DayLaborerCreateNestedManyWithoutTalentPoolInput
    siteAttendances?: SiteAttendanceCreateNestedManyWithoutTalentPoolInput
  }

  export type TalentPoolUncheckedCreateWithoutEmployeesInput = {
    id?: number
    workspaceId: number
    profileId?: number | null
    name: string
    birthday: Date | string
    phone: string
    address: string
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    dayLaborers?: DayLaborerUncheckedCreateNestedManyWithoutTalentPoolInput
    siteAttendances?: SiteAttendanceUncheckedCreateNestedManyWithoutTalentPoolInput
  }

  export type TalentPoolCreateOrConnectWithoutEmployeesInput = {
    where: TalentPoolWhereUniqueInput
    create: XOR<TalentPoolCreateWithoutEmployeesInput, TalentPoolUncheckedCreateWithoutEmployeesInput>
  }

  export type OwnerCreateWithoutEmployeeInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutOwnersInput
  }

  export type OwnerUncheckedCreateWithoutEmployeeInput = {
    id?: number
    companyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OwnerCreateOrConnectWithoutEmployeeInput = {
    where: OwnerWhereUniqueInput
    create: XOR<OwnerCreateWithoutEmployeeInput, OwnerUncheckedCreateWithoutEmployeeInput>
  }

  export type OwnerCreateManyEmployeeInputEnvelope = {
    data: OwnerCreateManyEmployeeInput | OwnerCreateManyEmployeeInput[]
  }

  export type CompanyUpsertWithoutEmployeesInput = {
    update: XOR<CompanyUpdateWithoutEmployeesInput, CompanyUncheckedUpdateWithoutEmployeesInput>
    create: XOR<CompanyCreateWithoutEmployeesInput, CompanyUncheckedCreateWithoutEmployeesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutEmployeesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutEmployeesInput, CompanyUncheckedUpdateWithoutEmployeesInput>
  }

  export type CompanyUpdateWithoutEmployeesInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    businessNumber?: NullableStringFieldUpdateOperationsInput | string | null
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutCompaniesNestedInput
    companyIndustryCodes?: CompanyIndustryCodeUpdateManyWithoutCompanyNestedInput
    dayLaborers?: DayLaborerUpdateManyWithoutCompanyNestedInput
    owners?: OwnerUpdateManyWithoutCompanyNestedInput
    sites?: SiteUpdateManyWithoutCompanyNestedInput
    createdByMember?: WorkspaceMemberUpdateOneRequiredWithoutCompaniesCreatedNestedInput
  }

  export type CompanyUncheckedUpdateWithoutEmployeesInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    businessNumber?: NullableStringFieldUpdateOperationsInput | string | null
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    companyIndustryCodes?: CompanyIndustryCodeUncheckedUpdateManyWithoutCompanyNestedInput
    dayLaborers?: DayLaborerUncheckedUpdateManyWithoutCompanyNestedInput
    owners?: OwnerUncheckedUpdateManyWithoutCompanyNestedInput
    sites?: SiteUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type TalentPoolUpsertWithoutEmployeesInput = {
    update: XOR<TalentPoolUpdateWithoutEmployeesInput, TalentPoolUncheckedUpdateWithoutEmployeesInput>
    create: XOR<TalentPoolCreateWithoutEmployeesInput, TalentPoolUncheckedCreateWithoutEmployeesInput>
    where?: TalentPoolWhereInput
  }

  export type TalentPoolUpdateToOneWithWhereWithoutEmployeesInput = {
    where?: TalentPoolWhereInput
    data: XOR<TalentPoolUpdateWithoutEmployeesInput, TalentPoolUncheckedUpdateWithoutEmployeesInput>
  }

  export type TalentPoolUpdateWithoutEmployeesInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutTalentPoolsNestedInput
    profile?: ProfileUpdateOneWithoutTalentPoolsNestedInput
    dayLaborers?: DayLaborerUpdateManyWithoutTalentPoolNestedInput
    siteAttendances?: SiteAttendanceUpdateManyWithoutTalentPoolNestedInput
  }

  export type TalentPoolUncheckedUpdateWithoutEmployeesInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    profileId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayLaborers?: DayLaborerUncheckedUpdateManyWithoutTalentPoolNestedInput
    siteAttendances?: SiteAttendanceUncheckedUpdateManyWithoutTalentPoolNestedInput
  }

  export type OwnerUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: OwnerWhereUniqueInput
    update: XOR<OwnerUpdateWithoutEmployeeInput, OwnerUncheckedUpdateWithoutEmployeeInput>
    create: XOR<OwnerCreateWithoutEmployeeInput, OwnerUncheckedCreateWithoutEmployeeInput>
  }

  export type OwnerUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: OwnerWhereUniqueInput
    data: XOR<OwnerUpdateWithoutEmployeeInput, OwnerUncheckedUpdateWithoutEmployeeInput>
  }

  export type OwnerUpdateManyWithWhereWithoutEmployeeInput = {
    where: OwnerScalarWhereInput
    data: XOR<OwnerUpdateManyMutationInput, OwnerUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type CompanyCreateWithoutDayLaborersInput = {
    name: string
    location: string
    businessNumber?: string | null
    managementNumber?: string | null
    employeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutCompaniesInput
    companyIndustryCodes?: CompanyIndustryCodeCreateNestedManyWithoutCompanyInput
    employees?: EmployeeCreateNestedManyWithoutCompanyInput
    owners?: OwnerCreateNestedManyWithoutCompanyInput
    sites?: SiteCreateNestedManyWithoutCompanyInput
    createdByMember: WorkspaceMemberCreateNestedOneWithoutCompaniesCreatedInput
  }

  export type CompanyUncheckedCreateWithoutDayLaborersInput = {
    id?: number
    workspaceId: number
    name: string
    location: string
    businessNumber?: string | null
    managementNumber?: string | null
    employeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: number
    companyIndustryCodes?: CompanyIndustryCodeUncheckedCreateNestedManyWithoutCompanyInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutCompanyInput
    owners?: OwnerUncheckedCreateNestedManyWithoutCompanyInput
    sites?: SiteUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutDayLaborersInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutDayLaborersInput, CompanyUncheckedCreateWithoutDayLaborersInput>
  }

  export type TalentPoolCreateWithoutDayLaborersInput = {
    name: string
    birthday: Date | string
    phone: string
    address: string
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutTalentPoolsInput
    profile?: ProfileCreateNestedOneWithoutTalentPoolsInput
    employees?: EmployeeCreateNestedManyWithoutTalentPoolInput
    siteAttendances?: SiteAttendanceCreateNestedManyWithoutTalentPoolInput
  }

  export type TalentPoolUncheckedCreateWithoutDayLaborersInput = {
    id?: number
    workspaceId: number
    profileId?: number | null
    name: string
    birthday: Date | string
    phone: string
    address: string
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employees?: EmployeeUncheckedCreateNestedManyWithoutTalentPoolInput
    siteAttendances?: SiteAttendanceUncheckedCreateNestedManyWithoutTalentPoolInput
  }

  export type TalentPoolCreateOrConnectWithoutDayLaborersInput = {
    where: TalentPoolWhereUniqueInput
    create: XOR<TalentPoolCreateWithoutDayLaborersInput, TalentPoolUncheckedCreateWithoutDayLaborersInput>
  }

  export type CompanyUpsertWithoutDayLaborersInput = {
    update: XOR<CompanyUpdateWithoutDayLaborersInput, CompanyUncheckedUpdateWithoutDayLaborersInput>
    create: XOR<CompanyCreateWithoutDayLaborersInput, CompanyUncheckedCreateWithoutDayLaborersInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutDayLaborersInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutDayLaborersInput, CompanyUncheckedUpdateWithoutDayLaborersInput>
  }

  export type CompanyUpdateWithoutDayLaborersInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    businessNumber?: NullableStringFieldUpdateOperationsInput | string | null
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutCompaniesNestedInput
    companyIndustryCodes?: CompanyIndustryCodeUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUpdateManyWithoutCompanyNestedInput
    owners?: OwnerUpdateManyWithoutCompanyNestedInput
    sites?: SiteUpdateManyWithoutCompanyNestedInput
    createdByMember?: WorkspaceMemberUpdateOneRequiredWithoutCompaniesCreatedNestedInput
  }

  export type CompanyUncheckedUpdateWithoutDayLaborersInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    businessNumber?: NullableStringFieldUpdateOperationsInput | string | null
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    companyIndustryCodes?: CompanyIndustryCodeUncheckedUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutCompanyNestedInput
    owners?: OwnerUncheckedUpdateManyWithoutCompanyNestedInput
    sites?: SiteUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type TalentPoolUpsertWithoutDayLaborersInput = {
    update: XOR<TalentPoolUpdateWithoutDayLaborersInput, TalentPoolUncheckedUpdateWithoutDayLaborersInput>
    create: XOR<TalentPoolCreateWithoutDayLaborersInput, TalentPoolUncheckedCreateWithoutDayLaborersInput>
    where?: TalentPoolWhereInput
  }

  export type TalentPoolUpdateToOneWithWhereWithoutDayLaborersInput = {
    where?: TalentPoolWhereInput
    data: XOR<TalentPoolUpdateWithoutDayLaborersInput, TalentPoolUncheckedUpdateWithoutDayLaborersInput>
  }

  export type TalentPoolUpdateWithoutDayLaborersInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutTalentPoolsNestedInput
    profile?: ProfileUpdateOneWithoutTalentPoolsNestedInput
    employees?: EmployeeUpdateManyWithoutTalentPoolNestedInput
    siteAttendances?: SiteAttendanceUpdateManyWithoutTalentPoolNestedInput
  }

  export type TalentPoolUncheckedUpdateWithoutDayLaborersInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    profileId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employees?: EmployeeUncheckedUpdateManyWithoutTalentPoolNestedInput
    siteAttendances?: SiteAttendanceUncheckedUpdateManyWithoutTalentPoolNestedInput
  }

  export type CompanyCreateWithoutOwnersInput = {
    name: string
    location: string
    businessNumber?: string | null
    managementNumber?: string | null
    employeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutCompaniesInput
    companyIndustryCodes?: CompanyIndustryCodeCreateNestedManyWithoutCompanyInput
    dayLaborers?: DayLaborerCreateNestedManyWithoutCompanyInput
    employees?: EmployeeCreateNestedManyWithoutCompanyInput
    sites?: SiteCreateNestedManyWithoutCompanyInput
    createdByMember: WorkspaceMemberCreateNestedOneWithoutCompaniesCreatedInput
  }

  export type CompanyUncheckedCreateWithoutOwnersInput = {
    id?: number
    workspaceId: number
    name: string
    location: string
    businessNumber?: string | null
    managementNumber?: string | null
    employeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: number
    companyIndustryCodes?: CompanyIndustryCodeUncheckedCreateNestedManyWithoutCompanyInput
    dayLaborers?: DayLaborerUncheckedCreateNestedManyWithoutCompanyInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutCompanyInput
    sites?: SiteUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutOwnersInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutOwnersInput, CompanyUncheckedCreateWithoutOwnersInput>
  }

  export type EmployeeCreateWithoutOwnersInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutEmployeesInput
    talentPool: TalentPoolCreateNestedOneWithoutEmployeesInput
  }

  export type EmployeeUncheckedCreateWithoutOwnersInput = {
    id?: number
    talentPoolId: number
    companyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeCreateOrConnectWithoutOwnersInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutOwnersInput, EmployeeUncheckedCreateWithoutOwnersInput>
  }

  export type CompanyUpsertWithoutOwnersInput = {
    update: XOR<CompanyUpdateWithoutOwnersInput, CompanyUncheckedUpdateWithoutOwnersInput>
    create: XOR<CompanyCreateWithoutOwnersInput, CompanyUncheckedCreateWithoutOwnersInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutOwnersInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutOwnersInput, CompanyUncheckedUpdateWithoutOwnersInput>
  }

  export type CompanyUpdateWithoutOwnersInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    businessNumber?: NullableStringFieldUpdateOperationsInput | string | null
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutCompaniesNestedInput
    companyIndustryCodes?: CompanyIndustryCodeUpdateManyWithoutCompanyNestedInput
    dayLaborers?: DayLaborerUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUpdateManyWithoutCompanyNestedInput
    sites?: SiteUpdateManyWithoutCompanyNestedInput
    createdByMember?: WorkspaceMemberUpdateOneRequiredWithoutCompaniesCreatedNestedInput
  }

  export type CompanyUncheckedUpdateWithoutOwnersInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    businessNumber?: NullableStringFieldUpdateOperationsInput | string | null
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    companyIndustryCodes?: CompanyIndustryCodeUncheckedUpdateManyWithoutCompanyNestedInput
    dayLaborers?: DayLaborerUncheckedUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutCompanyNestedInput
    sites?: SiteUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type EmployeeUpsertWithoutOwnersInput = {
    update: XOR<EmployeeUpdateWithoutOwnersInput, EmployeeUncheckedUpdateWithoutOwnersInput>
    create: XOR<EmployeeCreateWithoutOwnersInput, EmployeeUncheckedCreateWithoutOwnersInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutOwnersInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutOwnersInput, EmployeeUncheckedUpdateWithoutOwnersInput>
  }

  export type EmployeeUpdateWithoutOwnersInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutEmployeesNestedInput
    talentPool?: TalentPoolUpdateOneRequiredWithoutEmployeesNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutOwnersInput = {
    id?: IntFieldUpdateOperationsInput | number
    talentPoolId?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateWithoutProjectOwnersInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutProjectsInput
    sites?: SiteCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutProjectOwnersInput = {
    id?: number
    workspaceId: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sites?: SiteUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutProjectOwnersInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutProjectOwnersInput, ProjectUncheckedCreateWithoutProjectOwnersInput>
  }

  export type ProjectUpsertWithoutProjectOwnersInput = {
    update: XOR<ProjectUpdateWithoutProjectOwnersInput, ProjectUncheckedUpdateWithoutProjectOwnersInput>
    create: XOR<ProjectCreateWithoutProjectOwnersInput, ProjectUncheckedCreateWithoutProjectOwnersInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutProjectOwnersInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutProjectOwnersInput, ProjectUncheckedUpdateWithoutProjectOwnersInput>
  }

  export type ProjectUpdateWithoutProjectOwnersInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutProjectsNestedInput
    sites?: SiteUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutProjectOwnersInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sites?: SiteUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type WorkspaceCreateWithoutProjectsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companies?: CompanyCreateNestedManyWithoutWorkspaceInput
    sites?: SiteCreateNestedManyWithoutWorkspaceInput
    talentPools?: TalentPoolCreateNestedManyWithoutWorkspaceInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutWorkspaceInput
    workspaceOwners?: WorkspaceOwnerCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUncheckedCreateWithoutProjectsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companies?: CompanyUncheckedCreateNestedManyWithoutWorkspaceInput
    sites?: SiteUncheckedCreateNestedManyWithoutWorkspaceInput
    talentPools?: TalentPoolUncheckedCreateNestedManyWithoutWorkspaceInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutWorkspaceInput
    workspaceOwners?: WorkspaceOwnerUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceCreateOrConnectWithoutProjectsInput = {
    where: WorkspaceWhereUniqueInput
    create: XOR<WorkspaceCreateWithoutProjectsInput, WorkspaceUncheckedCreateWithoutProjectsInput>
  }

  export type ProjectOwnerCreateWithoutProjectInput = {
    name: string
    address: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectOwnerUncheckedCreateWithoutProjectInput = {
    id?: number
    name: string
    address: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectOwnerCreateOrConnectWithoutProjectInput = {
    where: ProjectOwnerWhereUniqueInput
    create: XOR<ProjectOwnerCreateWithoutProjectInput, ProjectOwnerUncheckedCreateWithoutProjectInput>
  }

  export type ProjectOwnerCreateManyProjectInputEnvelope = {
    data: ProjectOwnerCreateManyProjectInput | ProjectOwnerCreateManyProjectInput[]
  }

  export type SiteCreateWithoutProjectInput = {
    name: string
    location: string
    startDate: Date | string
    endDate: Date | string
    managementNumber?: string | null
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutSitesInput
    company: CompanyCreateNestedOneWithoutSitesInput
    siteAttendances?: SiteAttendanceCreateNestedManyWithoutSiteInput
  }

  export type SiteUncheckedCreateWithoutProjectInput = {
    id?: number
    workspaceId: number
    companyId: number
    name: string
    location: string
    startDate: Date | string
    endDate: Date | string
    managementNumber?: string | null
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    siteAttendances?: SiteAttendanceUncheckedCreateNestedManyWithoutSiteInput
  }

  export type SiteCreateOrConnectWithoutProjectInput = {
    where: SiteWhereUniqueInput
    create: XOR<SiteCreateWithoutProjectInput, SiteUncheckedCreateWithoutProjectInput>
  }

  export type SiteCreateManyProjectInputEnvelope = {
    data: SiteCreateManyProjectInput | SiteCreateManyProjectInput[]
  }

  export type WorkspaceUpsertWithoutProjectsInput = {
    update: XOR<WorkspaceUpdateWithoutProjectsInput, WorkspaceUncheckedUpdateWithoutProjectsInput>
    create: XOR<WorkspaceCreateWithoutProjectsInput, WorkspaceUncheckedCreateWithoutProjectsInput>
    where?: WorkspaceWhereInput
  }

  export type WorkspaceUpdateToOneWithWhereWithoutProjectsInput = {
    where?: WorkspaceWhereInput
    data: XOR<WorkspaceUpdateWithoutProjectsInput, WorkspaceUncheckedUpdateWithoutProjectsInput>
  }

  export type WorkspaceUpdateWithoutProjectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: CompanyUpdateManyWithoutWorkspaceNestedInput
    sites?: SiteUpdateManyWithoutWorkspaceNestedInput
    talentPools?: TalentPoolUpdateManyWithoutWorkspaceNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutWorkspaceNestedInput
    workspaceOwners?: WorkspaceOwnerUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: CompanyUncheckedUpdateManyWithoutWorkspaceNestedInput
    sites?: SiteUncheckedUpdateManyWithoutWorkspaceNestedInput
    talentPools?: TalentPoolUncheckedUpdateManyWithoutWorkspaceNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutWorkspaceNestedInput
    workspaceOwners?: WorkspaceOwnerUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type ProjectOwnerUpsertWithWhereUniqueWithoutProjectInput = {
    where: ProjectOwnerWhereUniqueInput
    update: XOR<ProjectOwnerUpdateWithoutProjectInput, ProjectOwnerUncheckedUpdateWithoutProjectInput>
    create: XOR<ProjectOwnerCreateWithoutProjectInput, ProjectOwnerUncheckedCreateWithoutProjectInput>
  }

  export type ProjectOwnerUpdateWithWhereUniqueWithoutProjectInput = {
    where: ProjectOwnerWhereUniqueInput
    data: XOR<ProjectOwnerUpdateWithoutProjectInput, ProjectOwnerUncheckedUpdateWithoutProjectInput>
  }

  export type ProjectOwnerUpdateManyWithWhereWithoutProjectInput = {
    where: ProjectOwnerScalarWhereInput
    data: XOR<ProjectOwnerUpdateManyMutationInput, ProjectOwnerUncheckedUpdateManyWithoutProjectInput>
  }

  export type ProjectOwnerScalarWhereInput = {
    AND?: ProjectOwnerScalarWhereInput | ProjectOwnerScalarWhereInput[]
    OR?: ProjectOwnerScalarWhereInput[]
    NOT?: ProjectOwnerScalarWhereInput | ProjectOwnerScalarWhereInput[]
    id?: IntFilter<"ProjectOwner"> | number
    projectId?: IntFilter<"ProjectOwner"> | number
    name?: StringFilter<"ProjectOwner"> | string
    address?: StringFilter<"ProjectOwner"> | string
    phone?: StringFilter<"ProjectOwner"> | string
    createdAt?: DateTimeFilter<"ProjectOwner"> | Date | string
    updatedAt?: DateTimeFilter<"ProjectOwner"> | Date | string
  }

  export type SiteUpsertWithWhereUniqueWithoutProjectInput = {
    where: SiteWhereUniqueInput
    update: XOR<SiteUpdateWithoutProjectInput, SiteUncheckedUpdateWithoutProjectInput>
    create: XOR<SiteCreateWithoutProjectInput, SiteUncheckedCreateWithoutProjectInput>
  }

  export type SiteUpdateWithWhereUniqueWithoutProjectInput = {
    where: SiteWhereUniqueInput
    data: XOR<SiteUpdateWithoutProjectInput, SiteUncheckedUpdateWithoutProjectInput>
  }

  export type SiteUpdateManyWithWhereWithoutProjectInput = {
    where: SiteScalarWhereInput
    data: XOR<SiteUpdateManyMutationInput, SiteUncheckedUpdateManyWithoutProjectInput>
  }

  export type WorkspaceCreateWithoutSitesInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companies?: CompanyCreateNestedManyWithoutWorkspaceInput
    talentPools?: TalentPoolCreateNestedManyWithoutWorkspaceInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutWorkspaceInput
    workspaceOwners?: WorkspaceOwnerCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUncheckedCreateWithoutSitesInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companies?: CompanyUncheckedCreateNestedManyWithoutWorkspaceInput
    talentPools?: TalentPoolUncheckedCreateNestedManyWithoutWorkspaceInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutWorkspaceInput
    workspaceOwners?: WorkspaceOwnerUncheckedCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceCreateOrConnectWithoutSitesInput = {
    where: WorkspaceWhereUniqueInput
    create: XOR<WorkspaceCreateWithoutSitesInput, WorkspaceUncheckedCreateWithoutSitesInput>
  }

  export type CompanyCreateWithoutSitesInput = {
    name: string
    location: string
    businessNumber?: string | null
    managementNumber?: string | null
    employeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutCompaniesInput
    companyIndustryCodes?: CompanyIndustryCodeCreateNestedManyWithoutCompanyInput
    dayLaborers?: DayLaborerCreateNestedManyWithoutCompanyInput
    employees?: EmployeeCreateNestedManyWithoutCompanyInput
    owners?: OwnerCreateNestedManyWithoutCompanyInput
    createdByMember: WorkspaceMemberCreateNestedOneWithoutCompaniesCreatedInput
  }

  export type CompanyUncheckedCreateWithoutSitesInput = {
    id?: number
    workspaceId: number
    name: string
    location: string
    businessNumber?: string | null
    managementNumber?: string | null
    employeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: number
    companyIndustryCodes?: CompanyIndustryCodeUncheckedCreateNestedManyWithoutCompanyInput
    dayLaborers?: DayLaborerUncheckedCreateNestedManyWithoutCompanyInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutCompanyInput
    owners?: OwnerUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutSitesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutSitesInput, CompanyUncheckedCreateWithoutSitesInput>
  }

  export type ProjectCreateWithoutSitesInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutProjectsInput
    projectOwners?: ProjectOwnerCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutSitesInput = {
    id?: number
    workspaceId: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectOwners?: ProjectOwnerUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutSitesInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutSitesInput, ProjectUncheckedCreateWithoutSitesInput>
  }

  export type SiteAttendanceCreateWithoutSiteInput = {
    date: Date | string
    startTime: Date | string
    endTime: Date | string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    talentPool: TalentPoolCreateNestedOneWithoutSiteAttendancesInput
  }

  export type SiteAttendanceUncheckedCreateWithoutSiteInput = {
    id?: number
    talentPoolId: number
    date: Date | string
    startTime: Date | string
    endTime: Date | string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SiteAttendanceCreateOrConnectWithoutSiteInput = {
    where: SiteAttendanceWhereUniqueInput
    create: XOR<SiteAttendanceCreateWithoutSiteInput, SiteAttendanceUncheckedCreateWithoutSiteInput>
  }

  export type SiteAttendanceCreateManySiteInputEnvelope = {
    data: SiteAttendanceCreateManySiteInput | SiteAttendanceCreateManySiteInput[]
  }

  export type WorkspaceUpsertWithoutSitesInput = {
    update: XOR<WorkspaceUpdateWithoutSitesInput, WorkspaceUncheckedUpdateWithoutSitesInput>
    create: XOR<WorkspaceCreateWithoutSitesInput, WorkspaceUncheckedCreateWithoutSitesInput>
    where?: WorkspaceWhereInput
  }

  export type WorkspaceUpdateToOneWithWhereWithoutSitesInput = {
    where?: WorkspaceWhereInput
    data: XOR<WorkspaceUpdateWithoutSitesInput, WorkspaceUncheckedUpdateWithoutSitesInput>
  }

  export type WorkspaceUpdateWithoutSitesInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: CompanyUpdateManyWithoutWorkspaceNestedInput
    talentPools?: TalentPoolUpdateManyWithoutWorkspaceNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutWorkspaceNestedInput
    workspaceOwners?: WorkspaceOwnerUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateWithoutSitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: CompanyUncheckedUpdateManyWithoutWorkspaceNestedInput
    talentPools?: TalentPoolUncheckedUpdateManyWithoutWorkspaceNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutWorkspaceNestedInput
    workspaceOwners?: WorkspaceOwnerUncheckedUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type CompanyUpsertWithoutSitesInput = {
    update: XOR<CompanyUpdateWithoutSitesInput, CompanyUncheckedUpdateWithoutSitesInput>
    create: XOR<CompanyCreateWithoutSitesInput, CompanyUncheckedCreateWithoutSitesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutSitesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutSitesInput, CompanyUncheckedUpdateWithoutSitesInput>
  }

  export type CompanyUpdateWithoutSitesInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    businessNumber?: NullableStringFieldUpdateOperationsInput | string | null
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutCompaniesNestedInput
    companyIndustryCodes?: CompanyIndustryCodeUpdateManyWithoutCompanyNestedInput
    dayLaborers?: DayLaborerUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUpdateManyWithoutCompanyNestedInput
    owners?: OwnerUpdateManyWithoutCompanyNestedInput
    createdByMember?: WorkspaceMemberUpdateOneRequiredWithoutCompaniesCreatedNestedInput
  }

  export type CompanyUncheckedUpdateWithoutSitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    businessNumber?: NullableStringFieldUpdateOperationsInput | string | null
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    companyIndustryCodes?: CompanyIndustryCodeUncheckedUpdateManyWithoutCompanyNestedInput
    dayLaborers?: DayLaborerUncheckedUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutCompanyNestedInput
    owners?: OwnerUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type ProjectUpsertWithoutSitesInput = {
    update: XOR<ProjectUpdateWithoutSitesInput, ProjectUncheckedUpdateWithoutSitesInput>
    create: XOR<ProjectCreateWithoutSitesInput, ProjectUncheckedCreateWithoutSitesInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutSitesInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutSitesInput, ProjectUncheckedUpdateWithoutSitesInput>
  }

  export type ProjectUpdateWithoutSitesInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutProjectsNestedInput
    projectOwners?: ProjectOwnerUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutSitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectOwners?: ProjectOwnerUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type SiteAttendanceUpsertWithWhereUniqueWithoutSiteInput = {
    where: SiteAttendanceWhereUniqueInput
    update: XOR<SiteAttendanceUpdateWithoutSiteInput, SiteAttendanceUncheckedUpdateWithoutSiteInput>
    create: XOR<SiteAttendanceCreateWithoutSiteInput, SiteAttendanceUncheckedCreateWithoutSiteInput>
  }

  export type SiteAttendanceUpdateWithWhereUniqueWithoutSiteInput = {
    where: SiteAttendanceWhereUniqueInput
    data: XOR<SiteAttendanceUpdateWithoutSiteInput, SiteAttendanceUncheckedUpdateWithoutSiteInput>
  }

  export type SiteAttendanceUpdateManyWithWhereWithoutSiteInput = {
    where: SiteAttendanceScalarWhereInput
    data: XOR<SiteAttendanceUpdateManyMutationInput, SiteAttendanceUncheckedUpdateManyWithoutSiteInput>
  }

  export type SiteAttendanceScalarWhereInput = {
    AND?: SiteAttendanceScalarWhereInput | SiteAttendanceScalarWhereInput[]
    OR?: SiteAttendanceScalarWhereInput[]
    NOT?: SiteAttendanceScalarWhereInput | SiteAttendanceScalarWhereInput[]
    id?: IntFilter<"SiteAttendance"> | number
    talentPoolId?: IntFilter<"SiteAttendance"> | number
    siteId?: IntFilter<"SiteAttendance"> | number
    date?: DateTimeFilter<"SiteAttendance"> | Date | string
    startTime?: DateTimeFilter<"SiteAttendance"> | Date | string
    endTime?: DateTimeFilter<"SiteAttendance"> | Date | string
    amount?: IntFilter<"SiteAttendance"> | number
    createdAt?: DateTimeFilter<"SiteAttendance"> | Date | string
    updatedAt?: DateTimeFilter<"SiteAttendance"> | Date | string
  }

  export type SiteCreateWithoutSiteAttendancesInput = {
    name: string
    location: string
    startDate: Date | string
    endDate: Date | string
    managementNumber?: string | null
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutSitesInput
    company: CompanyCreateNestedOneWithoutSitesInput
    project?: ProjectCreateNestedOneWithoutSitesInput
  }

  export type SiteUncheckedCreateWithoutSiteAttendancesInput = {
    id?: number
    workspaceId: number
    projectId?: number | null
    companyId: number
    name: string
    location: string
    startDate: Date | string
    endDate: Date | string
    managementNumber?: string | null
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SiteCreateOrConnectWithoutSiteAttendancesInput = {
    where: SiteWhereUniqueInput
    create: XOR<SiteCreateWithoutSiteAttendancesInput, SiteUncheckedCreateWithoutSiteAttendancesInput>
  }

  export type TalentPoolCreateWithoutSiteAttendancesInput = {
    name: string
    birthday: Date | string
    phone: string
    address: string
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutTalentPoolsInput
    profile?: ProfileCreateNestedOneWithoutTalentPoolsInput
    employees?: EmployeeCreateNestedManyWithoutTalentPoolInput
    dayLaborers?: DayLaborerCreateNestedManyWithoutTalentPoolInput
  }

  export type TalentPoolUncheckedCreateWithoutSiteAttendancesInput = {
    id?: number
    workspaceId: number
    profileId?: number | null
    name: string
    birthday: Date | string
    phone: string
    address: string
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employees?: EmployeeUncheckedCreateNestedManyWithoutTalentPoolInput
    dayLaborers?: DayLaborerUncheckedCreateNestedManyWithoutTalentPoolInput
  }

  export type TalentPoolCreateOrConnectWithoutSiteAttendancesInput = {
    where: TalentPoolWhereUniqueInput
    create: XOR<TalentPoolCreateWithoutSiteAttendancesInput, TalentPoolUncheckedCreateWithoutSiteAttendancesInput>
  }

  export type SiteUpsertWithoutSiteAttendancesInput = {
    update: XOR<SiteUpdateWithoutSiteAttendancesInput, SiteUncheckedUpdateWithoutSiteAttendancesInput>
    create: XOR<SiteCreateWithoutSiteAttendancesInput, SiteUncheckedCreateWithoutSiteAttendancesInput>
    where?: SiteWhereInput
  }

  export type SiteUpdateToOneWithWhereWithoutSiteAttendancesInput = {
    where?: SiteWhereInput
    data: XOR<SiteUpdateWithoutSiteAttendancesInput, SiteUncheckedUpdateWithoutSiteAttendancesInput>
  }

  export type SiteUpdateWithoutSiteAttendancesInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutSitesNestedInput
    company?: CompanyUpdateOneRequiredWithoutSitesNestedInput
    project?: ProjectUpdateOneWithoutSitesNestedInput
  }

  export type SiteUncheckedUpdateWithoutSiteAttendancesInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TalentPoolUpsertWithoutSiteAttendancesInput = {
    update: XOR<TalentPoolUpdateWithoutSiteAttendancesInput, TalentPoolUncheckedUpdateWithoutSiteAttendancesInput>
    create: XOR<TalentPoolCreateWithoutSiteAttendancesInput, TalentPoolUncheckedCreateWithoutSiteAttendancesInput>
    where?: TalentPoolWhereInput
  }

  export type TalentPoolUpdateToOneWithWhereWithoutSiteAttendancesInput = {
    where?: TalentPoolWhereInput
    data: XOR<TalentPoolUpdateWithoutSiteAttendancesInput, TalentPoolUncheckedUpdateWithoutSiteAttendancesInput>
  }

  export type TalentPoolUpdateWithoutSiteAttendancesInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutTalentPoolsNestedInput
    profile?: ProfileUpdateOneWithoutTalentPoolsNestedInput
    employees?: EmployeeUpdateManyWithoutTalentPoolNestedInput
    dayLaborers?: DayLaborerUpdateManyWithoutTalentPoolNestedInput
  }

  export type TalentPoolUncheckedUpdateWithoutSiteAttendancesInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    profileId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employees?: EmployeeUncheckedUpdateManyWithoutTalentPoolNestedInput
    dayLaborers?: DayLaborerUncheckedUpdateManyWithoutTalentPoolNestedInput
  }

  export type WorkspaceCreateWithoutTalentPoolsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companies?: CompanyCreateNestedManyWithoutWorkspaceInput
    sites?: SiteCreateNestedManyWithoutWorkspaceInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutWorkspaceInput
    workspaceOwners?: WorkspaceOwnerCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUncheckedCreateWithoutTalentPoolsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companies?: CompanyUncheckedCreateNestedManyWithoutWorkspaceInput
    sites?: SiteUncheckedCreateNestedManyWithoutWorkspaceInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutWorkspaceInput
    workspaceOwners?: WorkspaceOwnerUncheckedCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceCreateOrConnectWithoutTalentPoolsInput = {
    where: WorkspaceWhereUniqueInput
    create: XOR<WorkspaceCreateWithoutTalentPoolsInput, WorkspaceUncheckedCreateWithoutTalentPoolsInput>
  }

  export type ProfileCreateWithoutTalentPoolsInput = {
    name: string
    birthday?: Date | string | null
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutProfilesInput
    primaryProfile?: PrimaryProfileCreateNestedOneWithoutProfileInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutTalentPoolsInput = {
    id?: number
    userId?: number | null
    name: string
    birthday?: Date | string | null
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryProfile?: PrimaryProfileUncheckedCreateNestedOneWithoutProfileInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutTalentPoolsInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutTalentPoolsInput, ProfileUncheckedCreateWithoutTalentPoolsInput>
  }

  export type EmployeeCreateWithoutTalentPoolInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutEmployeesInput
    owners?: OwnerCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutTalentPoolInput = {
    id?: number
    companyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    owners?: OwnerUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutTalentPoolInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutTalentPoolInput, EmployeeUncheckedCreateWithoutTalentPoolInput>
  }

  export type EmployeeCreateManyTalentPoolInputEnvelope = {
    data: EmployeeCreateManyTalentPoolInput | EmployeeCreateManyTalentPoolInput[]
  }

  export type DayLaborerCreateWithoutTalentPoolInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutDayLaborersInput
  }

  export type DayLaborerUncheckedCreateWithoutTalentPoolInput = {
    id?: number
    companyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DayLaborerCreateOrConnectWithoutTalentPoolInput = {
    where: DayLaborerWhereUniqueInput
    create: XOR<DayLaborerCreateWithoutTalentPoolInput, DayLaborerUncheckedCreateWithoutTalentPoolInput>
  }

  export type DayLaborerCreateManyTalentPoolInputEnvelope = {
    data: DayLaborerCreateManyTalentPoolInput | DayLaborerCreateManyTalentPoolInput[]
  }

  export type SiteAttendanceCreateWithoutTalentPoolInput = {
    date: Date | string
    startTime: Date | string
    endTime: Date | string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    site: SiteCreateNestedOneWithoutSiteAttendancesInput
  }

  export type SiteAttendanceUncheckedCreateWithoutTalentPoolInput = {
    id?: number
    siteId: number
    date: Date | string
    startTime: Date | string
    endTime: Date | string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SiteAttendanceCreateOrConnectWithoutTalentPoolInput = {
    where: SiteAttendanceWhereUniqueInput
    create: XOR<SiteAttendanceCreateWithoutTalentPoolInput, SiteAttendanceUncheckedCreateWithoutTalentPoolInput>
  }

  export type SiteAttendanceCreateManyTalentPoolInputEnvelope = {
    data: SiteAttendanceCreateManyTalentPoolInput | SiteAttendanceCreateManyTalentPoolInput[]
  }

  export type WorkspaceUpsertWithoutTalentPoolsInput = {
    update: XOR<WorkspaceUpdateWithoutTalentPoolsInput, WorkspaceUncheckedUpdateWithoutTalentPoolsInput>
    create: XOR<WorkspaceCreateWithoutTalentPoolsInput, WorkspaceUncheckedCreateWithoutTalentPoolsInput>
    where?: WorkspaceWhereInput
  }

  export type WorkspaceUpdateToOneWithWhereWithoutTalentPoolsInput = {
    where?: WorkspaceWhereInput
    data: XOR<WorkspaceUpdateWithoutTalentPoolsInput, WorkspaceUncheckedUpdateWithoutTalentPoolsInput>
  }

  export type WorkspaceUpdateWithoutTalentPoolsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: CompanyUpdateManyWithoutWorkspaceNestedInput
    sites?: SiteUpdateManyWithoutWorkspaceNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutWorkspaceNestedInput
    workspaceOwners?: WorkspaceOwnerUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateWithoutTalentPoolsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: CompanyUncheckedUpdateManyWithoutWorkspaceNestedInput
    sites?: SiteUncheckedUpdateManyWithoutWorkspaceNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutWorkspaceNestedInput
    workspaceOwners?: WorkspaceOwnerUncheckedUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type ProfileUpsertWithoutTalentPoolsInput = {
    update: XOR<ProfileUpdateWithoutTalentPoolsInput, ProfileUncheckedUpdateWithoutTalentPoolsInput>
    create: XOR<ProfileCreateWithoutTalentPoolsInput, ProfileUncheckedCreateWithoutTalentPoolsInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutTalentPoolsInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutTalentPoolsInput, ProfileUncheckedUpdateWithoutTalentPoolsInput>
  }

  export type ProfileUpdateWithoutTalentPoolsInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutProfilesNestedInput
    primaryProfile?: PrimaryProfileUpdateOneWithoutProfileNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutTalentPoolsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryProfile?: PrimaryProfileUncheckedUpdateOneWithoutProfileNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type EmployeeUpsertWithWhereUniqueWithoutTalentPoolInput = {
    where: EmployeeWhereUniqueInput
    update: XOR<EmployeeUpdateWithoutTalentPoolInput, EmployeeUncheckedUpdateWithoutTalentPoolInput>
    create: XOR<EmployeeCreateWithoutTalentPoolInput, EmployeeUncheckedCreateWithoutTalentPoolInput>
  }

  export type EmployeeUpdateWithWhereUniqueWithoutTalentPoolInput = {
    where: EmployeeWhereUniqueInput
    data: XOR<EmployeeUpdateWithoutTalentPoolInput, EmployeeUncheckedUpdateWithoutTalentPoolInput>
  }

  export type EmployeeUpdateManyWithWhereWithoutTalentPoolInput = {
    where: EmployeeScalarWhereInput
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyWithoutTalentPoolInput>
  }

  export type DayLaborerUpsertWithWhereUniqueWithoutTalentPoolInput = {
    where: DayLaborerWhereUniqueInput
    update: XOR<DayLaborerUpdateWithoutTalentPoolInput, DayLaborerUncheckedUpdateWithoutTalentPoolInput>
    create: XOR<DayLaborerCreateWithoutTalentPoolInput, DayLaborerUncheckedCreateWithoutTalentPoolInput>
  }

  export type DayLaborerUpdateWithWhereUniqueWithoutTalentPoolInput = {
    where: DayLaborerWhereUniqueInput
    data: XOR<DayLaborerUpdateWithoutTalentPoolInput, DayLaborerUncheckedUpdateWithoutTalentPoolInput>
  }

  export type DayLaborerUpdateManyWithWhereWithoutTalentPoolInput = {
    where: DayLaborerScalarWhereInput
    data: XOR<DayLaborerUpdateManyMutationInput, DayLaborerUncheckedUpdateManyWithoutTalentPoolInput>
  }

  export type SiteAttendanceUpsertWithWhereUniqueWithoutTalentPoolInput = {
    where: SiteAttendanceWhereUniqueInput
    update: XOR<SiteAttendanceUpdateWithoutTalentPoolInput, SiteAttendanceUncheckedUpdateWithoutTalentPoolInput>
    create: XOR<SiteAttendanceCreateWithoutTalentPoolInput, SiteAttendanceUncheckedCreateWithoutTalentPoolInput>
  }

  export type SiteAttendanceUpdateWithWhereUniqueWithoutTalentPoolInput = {
    where: SiteAttendanceWhereUniqueInput
    data: XOR<SiteAttendanceUpdateWithoutTalentPoolInput, SiteAttendanceUncheckedUpdateWithoutTalentPoolInput>
  }

  export type SiteAttendanceUpdateManyWithWhereWithoutTalentPoolInput = {
    where: SiteAttendanceScalarWhereInput
    data: XOR<SiteAttendanceUpdateManyMutationInput, SiteAttendanceUncheckedUpdateManyWithoutTalentPoolInput>
  }

  export type CompanyIndustryCodeCreateWithoutIndustrialAccidentInsurancePremiumRateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutCompanyIndustryCodesInput
  }

  export type CompanyIndustryCodeUncheckedCreateWithoutIndustrialAccidentInsurancePremiumRateInput = {
    id?: number
    companyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyIndustryCodeCreateOrConnectWithoutIndustrialAccidentInsurancePremiumRateInput = {
    where: CompanyIndustryCodeWhereUniqueInput
    create: XOR<CompanyIndustryCodeCreateWithoutIndustrialAccidentInsurancePremiumRateInput, CompanyIndustryCodeUncheckedCreateWithoutIndustrialAccidentInsurancePremiumRateInput>
  }

  export type CompanyIndustryCodeCreateManyIndustrialAccidentInsurancePremiumRateInputEnvelope = {
    data: CompanyIndustryCodeCreateManyIndustrialAccidentInsurancePremiumRateInput | CompanyIndustryCodeCreateManyIndustrialAccidentInsurancePremiumRateInput[]
  }

  export type CompanyIndustryCodeUpsertWithWhereUniqueWithoutIndustrialAccidentInsurancePremiumRateInput = {
    where: CompanyIndustryCodeWhereUniqueInput
    update: XOR<CompanyIndustryCodeUpdateWithoutIndustrialAccidentInsurancePremiumRateInput, CompanyIndustryCodeUncheckedUpdateWithoutIndustrialAccidentInsurancePremiumRateInput>
    create: XOR<CompanyIndustryCodeCreateWithoutIndustrialAccidentInsurancePremiumRateInput, CompanyIndustryCodeUncheckedCreateWithoutIndustrialAccidentInsurancePremiumRateInput>
  }

  export type CompanyIndustryCodeUpdateWithWhereUniqueWithoutIndustrialAccidentInsurancePremiumRateInput = {
    where: CompanyIndustryCodeWhereUniqueInput
    data: XOR<CompanyIndustryCodeUpdateWithoutIndustrialAccidentInsurancePremiumRateInput, CompanyIndustryCodeUncheckedUpdateWithoutIndustrialAccidentInsurancePremiumRateInput>
  }

  export type CompanyIndustryCodeUpdateManyWithWhereWithoutIndustrialAccidentInsurancePremiumRateInput = {
    where: CompanyIndustryCodeScalarWhereInput
    data: XOR<CompanyIndustryCodeUpdateManyMutationInput, CompanyIndustryCodeUncheckedUpdateManyWithoutIndustrialAccidentInsurancePremiumRateInput>
  }

  export type CompanyCreateWithoutCompanyIndustryCodesInput = {
    name: string
    location: string
    businessNumber?: string | null
    managementNumber?: string | null
    employeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutCompaniesInput
    dayLaborers?: DayLaborerCreateNestedManyWithoutCompanyInput
    employees?: EmployeeCreateNestedManyWithoutCompanyInput
    owners?: OwnerCreateNestedManyWithoutCompanyInput
    sites?: SiteCreateNestedManyWithoutCompanyInput
    createdByMember: WorkspaceMemberCreateNestedOneWithoutCompaniesCreatedInput
  }

  export type CompanyUncheckedCreateWithoutCompanyIndustryCodesInput = {
    id?: number
    workspaceId: number
    name: string
    location: string
    businessNumber?: string | null
    managementNumber?: string | null
    employeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: number
    dayLaborers?: DayLaborerUncheckedCreateNestedManyWithoutCompanyInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutCompanyInput
    owners?: OwnerUncheckedCreateNestedManyWithoutCompanyInput
    sites?: SiteUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutCompanyIndustryCodesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutCompanyIndustryCodesInput, CompanyUncheckedCreateWithoutCompanyIndustryCodesInput>
  }

  export type IndustrialAccidentInsurancePremiumRateCreateWithoutCompanyIndustryCodesInput = {
    firstLevel?: string | null
    firstLevelCode?: number | null
    secondLevel?: string | null
    secondLevelCode?: number | null
    industryName?: string | null
    industryCode?: number | null
    date?: string | null
    rate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IndustrialAccidentInsurancePremiumRateUncheckedCreateWithoutCompanyIndustryCodesInput = {
    id?: number
    firstLevel?: string | null
    firstLevelCode?: number | null
    secondLevel?: string | null
    secondLevelCode?: number | null
    industryName?: string | null
    industryCode?: number | null
    date?: string | null
    rate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IndustrialAccidentInsurancePremiumRateCreateOrConnectWithoutCompanyIndustryCodesInput = {
    where: IndustrialAccidentInsurancePremiumRateWhereUniqueInput
    create: XOR<IndustrialAccidentInsurancePremiumRateCreateWithoutCompanyIndustryCodesInput, IndustrialAccidentInsurancePremiumRateUncheckedCreateWithoutCompanyIndustryCodesInput>
  }

  export type CompanyUpsertWithoutCompanyIndustryCodesInput = {
    update: XOR<CompanyUpdateWithoutCompanyIndustryCodesInput, CompanyUncheckedUpdateWithoutCompanyIndustryCodesInput>
    create: XOR<CompanyCreateWithoutCompanyIndustryCodesInput, CompanyUncheckedCreateWithoutCompanyIndustryCodesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutCompanyIndustryCodesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutCompanyIndustryCodesInput, CompanyUncheckedUpdateWithoutCompanyIndustryCodesInput>
  }

  export type CompanyUpdateWithoutCompanyIndustryCodesInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    businessNumber?: NullableStringFieldUpdateOperationsInput | string | null
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutCompaniesNestedInput
    dayLaborers?: DayLaborerUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUpdateManyWithoutCompanyNestedInput
    owners?: OwnerUpdateManyWithoutCompanyNestedInput
    sites?: SiteUpdateManyWithoutCompanyNestedInput
    createdByMember?: WorkspaceMemberUpdateOneRequiredWithoutCompaniesCreatedNestedInput
  }

  export type CompanyUncheckedUpdateWithoutCompanyIndustryCodesInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    businessNumber?: NullableStringFieldUpdateOperationsInput | string | null
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    dayLaborers?: DayLaborerUncheckedUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutCompanyNestedInput
    owners?: OwnerUncheckedUpdateManyWithoutCompanyNestedInput
    sites?: SiteUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type IndustrialAccidentInsurancePremiumRateUpsertWithoutCompanyIndustryCodesInput = {
    update: XOR<IndustrialAccidentInsurancePremiumRateUpdateWithoutCompanyIndustryCodesInput, IndustrialAccidentInsurancePremiumRateUncheckedUpdateWithoutCompanyIndustryCodesInput>
    create: XOR<IndustrialAccidentInsurancePremiumRateCreateWithoutCompanyIndustryCodesInput, IndustrialAccidentInsurancePremiumRateUncheckedCreateWithoutCompanyIndustryCodesInput>
    where?: IndustrialAccidentInsurancePremiumRateWhereInput
  }

  export type IndustrialAccidentInsurancePremiumRateUpdateToOneWithWhereWithoutCompanyIndustryCodesInput = {
    where?: IndustrialAccidentInsurancePremiumRateWhereInput
    data: XOR<IndustrialAccidentInsurancePremiumRateUpdateWithoutCompanyIndustryCodesInput, IndustrialAccidentInsurancePremiumRateUncheckedUpdateWithoutCompanyIndustryCodesInput>
  }

  export type IndustrialAccidentInsurancePremiumRateUpdateWithoutCompanyIndustryCodesInput = {
    firstLevel?: NullableStringFieldUpdateOperationsInput | string | null
    firstLevelCode?: NullableIntFieldUpdateOperationsInput | number | null
    secondLevel?: NullableStringFieldUpdateOperationsInput | string | null
    secondLevelCode?: NullableIntFieldUpdateOperationsInput | number | null
    industryName?: NullableStringFieldUpdateOperationsInput | string | null
    industryCode?: NullableIntFieldUpdateOperationsInput | number | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    rate?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IndustrialAccidentInsurancePremiumRateUncheckedUpdateWithoutCompanyIndustryCodesInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstLevel?: NullableStringFieldUpdateOperationsInput | string | null
    firstLevelCode?: NullableIntFieldUpdateOperationsInput | number | null
    secondLevel?: NullableStringFieldUpdateOperationsInput | string | null
    secondLevelCode?: NullableIntFieldUpdateOperationsInput | number | null
    industryName?: NullableStringFieldUpdateOperationsInput | string | null
    industryCode?: NullableIntFieldUpdateOperationsInput | number | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    rate?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileCreateManyUserInput = {
    id?: number
    name: string
    birthday?: Date | string | null
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceMemberCreateManyUserInput = {
    id?: number
    workspaceId: number
    profileId: number
    inviterId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    talentPools?: TalentPoolUpdateManyWithoutProfileNestedInput
    primaryProfile?: PrimaryProfileUpdateOneWithoutProfileNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    talentPools?: TalentPoolUncheckedUpdateManyWithoutProfileNestedInput
    primaryProfile?: PrimaryProfileUncheckedUpdateOneWithoutProfileNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceMemberUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutWorkspaceMembersNestedInput
    profile?: ProfileUpdateOneRequiredWithoutWorkspaceMembersNestedInput
    inviter?: WorkspaceMemberUpdateOneWithoutInvitedMembersNestedInput
    owners?: WorkspaceOwnerUpdateManyWithoutWorkspaceMemberNestedInput
    companiesCreated?: CompanyUpdateManyWithoutCreatedByMemberNestedInput
    invitedMembers?: WorkspaceMemberUpdateManyWithoutInviterNestedInput
  }

  export type WorkspaceMemberUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    profileId?: IntFieldUpdateOperationsInput | number
    inviterId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owners?: WorkspaceOwnerUncheckedUpdateManyWithoutWorkspaceMemberNestedInput
    companiesCreated?: CompanyUncheckedUpdateManyWithoutCreatedByMemberNestedInput
    invitedMembers?: WorkspaceMemberUncheckedUpdateManyWithoutInviterNestedInput
  }

  export type WorkspaceMemberUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    profileId?: IntFieldUpdateOperationsInput | number
    inviterId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TalentPoolCreateManyProfileInput = {
    id?: number
    workspaceId: number
    name: string
    birthday: Date | string
    phone: string
    address: string
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceMemberCreateManyProfileInput = {
    id?: number
    workspaceId: number
    userId: number
    inviterId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TalentPoolUpdateWithoutProfileInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutTalentPoolsNestedInput
    employees?: EmployeeUpdateManyWithoutTalentPoolNestedInput
    dayLaborers?: DayLaborerUpdateManyWithoutTalentPoolNestedInput
    siteAttendances?: SiteAttendanceUpdateManyWithoutTalentPoolNestedInput
  }

  export type TalentPoolUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employees?: EmployeeUncheckedUpdateManyWithoutTalentPoolNestedInput
    dayLaborers?: DayLaborerUncheckedUpdateManyWithoutTalentPoolNestedInput
    siteAttendances?: SiteAttendanceUncheckedUpdateManyWithoutTalentPoolNestedInput
  }

  export type TalentPoolUncheckedUpdateManyWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceMemberUpdateWithoutProfileInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutWorkspaceMembersNestedInput
    user?: UserUpdateOneRequiredWithoutWorkspaceMembersNestedInput
    inviter?: WorkspaceMemberUpdateOneWithoutInvitedMembersNestedInput
    owners?: WorkspaceOwnerUpdateManyWithoutWorkspaceMemberNestedInput
    companiesCreated?: CompanyUpdateManyWithoutCreatedByMemberNestedInput
    invitedMembers?: WorkspaceMemberUpdateManyWithoutInviterNestedInput
  }

  export type WorkspaceMemberUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    inviterId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owners?: WorkspaceOwnerUncheckedUpdateManyWithoutWorkspaceMemberNestedInput
    companiesCreated?: CompanyUncheckedUpdateManyWithoutCreatedByMemberNestedInput
    invitedMembers?: WorkspaceMemberUncheckedUpdateManyWithoutInviterNestedInput
  }

  export type WorkspaceMemberUncheckedUpdateManyWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    inviterId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyCreateManyWorkspaceInput = {
    id?: number
    name: string
    location: string
    businessNumber?: string | null
    managementNumber?: string | null
    employeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: number
  }

  export type SiteCreateManyWorkspaceInput = {
    id?: number
    projectId?: number | null
    companyId: number
    name: string
    location: string
    startDate: Date | string
    endDate: Date | string
    managementNumber?: string | null
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TalentPoolCreateManyWorkspaceInput = {
    id?: number
    profileId?: number | null
    name: string
    birthday: Date | string
    phone: string
    address: string
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceMemberCreateManyWorkspaceInput = {
    id?: number
    userId: number
    profileId: number
    inviterId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceOwnerCreateManyWorkspaceInput = {
    id?: number
    workspaceMemberId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectCreateManyWorkspaceInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyUpdateWithoutWorkspaceInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    businessNumber?: NullableStringFieldUpdateOperationsInput | string | null
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyIndustryCodes?: CompanyIndustryCodeUpdateManyWithoutCompanyNestedInput
    dayLaborers?: DayLaborerUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUpdateManyWithoutCompanyNestedInput
    owners?: OwnerUpdateManyWithoutCompanyNestedInput
    sites?: SiteUpdateManyWithoutCompanyNestedInput
    createdByMember?: WorkspaceMemberUpdateOneRequiredWithoutCompaniesCreatedNestedInput
  }

  export type CompanyUncheckedUpdateWithoutWorkspaceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    businessNumber?: NullableStringFieldUpdateOperationsInput | string | null
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    companyIndustryCodes?: CompanyIndustryCodeUncheckedUpdateManyWithoutCompanyNestedInput
    dayLaborers?: DayLaborerUncheckedUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutCompanyNestedInput
    owners?: OwnerUncheckedUpdateManyWithoutCompanyNestedInput
    sites?: SiteUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateManyWithoutWorkspaceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    businessNumber?: NullableStringFieldUpdateOperationsInput | string | null
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
  }

  export type SiteUpdateWithoutWorkspaceInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutSitesNestedInput
    project?: ProjectUpdateOneWithoutSitesNestedInput
    siteAttendances?: SiteAttendanceUpdateManyWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateWithoutWorkspaceInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    siteAttendances?: SiteAttendanceUncheckedUpdateManyWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateManyWithoutWorkspaceInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TalentPoolUpdateWithoutWorkspaceInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneWithoutTalentPoolsNestedInput
    employees?: EmployeeUpdateManyWithoutTalentPoolNestedInput
    dayLaborers?: DayLaborerUpdateManyWithoutTalentPoolNestedInput
    siteAttendances?: SiteAttendanceUpdateManyWithoutTalentPoolNestedInput
  }

  export type TalentPoolUncheckedUpdateWithoutWorkspaceInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employees?: EmployeeUncheckedUpdateManyWithoutTalentPoolNestedInput
    dayLaborers?: DayLaborerUncheckedUpdateManyWithoutTalentPoolNestedInput
    siteAttendances?: SiteAttendanceUncheckedUpdateManyWithoutTalentPoolNestedInput
  }

  export type TalentPoolUncheckedUpdateManyWithoutWorkspaceInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceMemberUpdateWithoutWorkspaceInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWorkspaceMembersNestedInput
    profile?: ProfileUpdateOneRequiredWithoutWorkspaceMembersNestedInput
    inviter?: WorkspaceMemberUpdateOneWithoutInvitedMembersNestedInput
    owners?: WorkspaceOwnerUpdateManyWithoutWorkspaceMemberNestedInput
    companiesCreated?: CompanyUpdateManyWithoutCreatedByMemberNestedInput
    invitedMembers?: WorkspaceMemberUpdateManyWithoutInviterNestedInput
  }

  export type WorkspaceMemberUncheckedUpdateWithoutWorkspaceInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    profileId?: IntFieldUpdateOperationsInput | number
    inviterId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owners?: WorkspaceOwnerUncheckedUpdateManyWithoutWorkspaceMemberNestedInput
    companiesCreated?: CompanyUncheckedUpdateManyWithoutCreatedByMemberNestedInput
    invitedMembers?: WorkspaceMemberUncheckedUpdateManyWithoutInviterNestedInput
  }

  export type WorkspaceMemberUncheckedUpdateManyWithoutWorkspaceInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    profileId?: IntFieldUpdateOperationsInput | number
    inviterId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceOwnerUpdateWithoutWorkspaceInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceMember?: WorkspaceMemberUpdateOneRequiredWithoutOwnersNestedInput
  }

  export type WorkspaceOwnerUncheckedUpdateWithoutWorkspaceInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceMemberId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceOwnerUncheckedUpdateManyWithoutWorkspaceInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceMemberId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUpdateWithoutWorkspaceInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectOwners?: ProjectOwnerUpdateManyWithoutProjectNestedInput
    sites?: SiteUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutWorkspaceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectOwners?: ProjectOwnerUncheckedUpdateManyWithoutProjectNestedInput
    sites?: SiteUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutWorkspaceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceOwnerCreateManyWorkspaceMemberInput = {
    id?: number
    workspaceId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyCreateManyCreatedByMemberInput = {
    id?: number
    workspaceId: number
    name: string
    location: string
    businessNumber?: string | null
    managementNumber?: string | null
    employeeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceMemberCreateManyInviterInput = {
    id?: number
    workspaceId: number
    userId: number
    profileId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceOwnerUpdateWithoutWorkspaceMemberInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutWorkspaceOwnersNestedInput
  }

  export type WorkspaceOwnerUncheckedUpdateWithoutWorkspaceMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceOwnerUncheckedUpdateManyWithoutWorkspaceMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUpdateWithoutCreatedByMemberInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    businessNumber?: NullableStringFieldUpdateOperationsInput | string | null
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutCompaniesNestedInput
    companyIndustryCodes?: CompanyIndustryCodeUpdateManyWithoutCompanyNestedInput
    dayLaborers?: DayLaborerUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUpdateManyWithoutCompanyNestedInput
    owners?: OwnerUpdateManyWithoutCompanyNestedInput
    sites?: SiteUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutCreatedByMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    businessNumber?: NullableStringFieldUpdateOperationsInput | string | null
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyIndustryCodes?: CompanyIndustryCodeUncheckedUpdateManyWithoutCompanyNestedInput
    dayLaborers?: DayLaborerUncheckedUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutCompanyNestedInput
    owners?: OwnerUncheckedUpdateManyWithoutCompanyNestedInput
    sites?: SiteUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateManyWithoutCreatedByMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    businessNumber?: NullableStringFieldUpdateOperationsInput | string | null
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceMemberUpdateWithoutInviterInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutWorkspaceMembersNestedInput
    user?: UserUpdateOneRequiredWithoutWorkspaceMembersNestedInput
    profile?: ProfileUpdateOneRequiredWithoutWorkspaceMembersNestedInput
    owners?: WorkspaceOwnerUpdateManyWithoutWorkspaceMemberNestedInput
    companiesCreated?: CompanyUpdateManyWithoutCreatedByMemberNestedInput
    invitedMembers?: WorkspaceMemberUpdateManyWithoutInviterNestedInput
  }

  export type WorkspaceMemberUncheckedUpdateWithoutInviterInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    profileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owners?: WorkspaceOwnerUncheckedUpdateManyWithoutWorkspaceMemberNestedInput
    companiesCreated?: CompanyUncheckedUpdateManyWithoutCreatedByMemberNestedInput
    invitedMembers?: WorkspaceMemberUncheckedUpdateManyWithoutInviterNestedInput
  }

  export type WorkspaceMemberUncheckedUpdateManyWithoutInviterInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    profileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyIndustryCodeCreateManyCompanyInput = {
    id?: number
    industryCode: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DayLaborerCreateManyCompanyInput = {
    id?: number
    talentPoolId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeCreateManyCompanyInput = {
    id?: number
    talentPoolId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OwnerCreateManyCompanyInput = {
    id?: number
    employeeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SiteCreateManyCompanyInput = {
    id?: number
    workspaceId: number
    projectId?: number | null
    name: string
    location: string
    startDate: Date | string
    endDate: Date | string
    managementNumber?: string | null
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyIndustryCodeUpdateWithoutCompanyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    industrialAccidentInsurancePremiumRate?: IndustrialAccidentInsurancePremiumRateUpdateOneRequiredWithoutCompanyIndustryCodesNestedInput
  }

  export type CompanyIndustryCodeUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    industryCode?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyIndustryCodeUncheckedUpdateManyWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    industryCode?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DayLaborerUpdateWithoutCompanyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    talentPool?: TalentPoolUpdateOneRequiredWithoutDayLaborersNestedInput
  }

  export type DayLaborerUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    talentPoolId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DayLaborerUncheckedUpdateManyWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    talentPoolId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeUpdateWithoutCompanyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    talentPool?: TalentPoolUpdateOneRequiredWithoutEmployeesNestedInput
    owners?: OwnerUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    talentPoolId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owners?: OwnerUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateManyWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    talentPoolId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OwnerUpdateWithoutCompanyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutOwnersNestedInput
  }

  export type OwnerUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OwnerUncheckedUpdateManyWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteUpdateWithoutCompanyInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutSitesNestedInput
    project?: ProjectUpdateOneWithoutSitesNestedInput
    siteAttendances?: SiteAttendanceUpdateManyWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    siteAttendances?: SiteAttendanceUncheckedUpdateManyWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateManyWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OwnerCreateManyEmployeeInput = {
    id?: number
    companyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OwnerUpdateWithoutEmployeeInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutOwnersNestedInput
  }

  export type OwnerUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OwnerUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectOwnerCreateManyProjectInput = {
    id?: number
    name: string
    address: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SiteCreateManyProjectInput = {
    id?: number
    workspaceId: number
    companyId: number
    name: string
    location: string
    startDate: Date | string
    endDate: Date | string
    managementNumber?: string | null
    memo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectOwnerUpdateWithoutProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectOwnerUncheckedUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectOwnerUncheckedUpdateManyWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteUpdateWithoutProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutSitesNestedInput
    company?: CompanyUpdateOneRequiredWithoutSitesNestedInput
    siteAttendances?: SiteAttendanceUpdateManyWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    siteAttendances?: SiteAttendanceUncheckedUpdateManyWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateManyWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspaceId?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managementNumber?: NullableStringFieldUpdateOperationsInput | string | null
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteAttendanceCreateManySiteInput = {
    id?: number
    talentPoolId: number
    date: Date | string
    startTime: Date | string
    endTime: Date | string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SiteAttendanceUpdateWithoutSiteInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    talentPool?: TalentPoolUpdateOneRequiredWithoutSiteAttendancesNestedInput
  }

  export type SiteAttendanceUncheckedUpdateWithoutSiteInput = {
    id?: IntFieldUpdateOperationsInput | number
    talentPoolId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteAttendanceUncheckedUpdateManyWithoutSiteInput = {
    id?: IntFieldUpdateOperationsInput | number
    talentPoolId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeCreateManyTalentPoolInput = {
    id?: number
    companyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DayLaborerCreateManyTalentPoolInput = {
    id?: number
    companyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SiteAttendanceCreateManyTalentPoolInput = {
    id?: number
    siteId: number
    date: Date | string
    startTime: Date | string
    endTime: Date | string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeUpdateWithoutTalentPoolInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutEmployeesNestedInput
    owners?: OwnerUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutTalentPoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owners?: OwnerUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateManyWithoutTalentPoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DayLaborerUpdateWithoutTalentPoolInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutDayLaborersNestedInput
  }

  export type DayLaborerUncheckedUpdateWithoutTalentPoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DayLaborerUncheckedUpdateManyWithoutTalentPoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteAttendanceUpdateWithoutTalentPoolInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    site?: SiteUpdateOneRequiredWithoutSiteAttendancesNestedInput
  }

  export type SiteAttendanceUncheckedUpdateWithoutTalentPoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    siteId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteAttendanceUncheckedUpdateManyWithoutTalentPoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    siteId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyIndustryCodeCreateManyIndustrialAccidentInsurancePremiumRateInput = {
    id?: number
    companyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyIndustryCodeUpdateWithoutIndustrialAccidentInsurancePremiumRateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutCompanyIndustryCodesNestedInput
  }

  export type CompanyIndustryCodeUncheckedUpdateWithoutIndustrialAccidentInsurancePremiumRateInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyIndustryCodeUncheckedUpdateManyWithoutIndustrialAccidentInsurancePremiumRateInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}